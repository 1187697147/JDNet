%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (\346\274\224\347\244\272\346\226\207\347\250\2775.pdf)
%%Creator: (Adobe Acrobat 20.6.0)
%%For: raincuoh
%%CreationDate: 2020/8/6, 下午10:50
%%BoundingBox: 0 0 781 353
%%HiResBoundingBox: 0 0 780.3774 352.2598
%%CropBox: 0 0 780.3774 352.2598
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 552 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-08-06T14:47:15Z"
   xmp:ModifyDate="2020-08-06T14:47:15Z"
   pdf:Producer="Mac OS X 10.13.6 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -352.26 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-05 0 mo
1.52588e-05 352.26 li
780.377 352.26 li
780.377 0 li
cp
clp
-87.193 471.117 mo
872.567 471.117 li
872.567 -68.8825 li
-87.193 -68.8825 li
cp
false sop
0 0 0 0 cmyk
f
-87.193 471.117 mo
872.807 471.117 li
872.807 -68.8825 li
-87.193 -68.8825 li
cp
f
148.558 132.929 mo
174.17 132.716 li
174.153 130.716 li
148.542 130.929 li
cp
173.187 134.724 mo
179.162 131.674 li
173.137 128.724 li
cp
.75021 .679683 .670222 .90164 cmyk
f
566.557 292.92 mo
606.486 292.92 li
606.486 246.609 li
604.486 246.609 li
604.486 291.92 li
605.486 290.92 li
566.557 290.92 li
cp
608.486 247.609 mo
605.486 241.609 li
602.486 247.609 li
cp
f
584.937 189.755 mo
584.937 191.703 li
605.486 191.703 li
604.486 190.703 li
604.486 219.601 li
606.486 219.601 li
606.486 189.703 li
585.937 189.703 li
586.937 190.703 li
586.937 189.755 li
cp
602.486 218.601 mo
605.486 224.601 li
608.486 218.601 li
cp
f
147.632 293.376 mo
173.243 293.163 li
173.227 291.163 li
147.615 291.376 li
cp
172.26 295.171 mo
178.235 292.121 li
172.21 289.171 li
cp
f
630.73 266.451 mo
662.09 266.451 li
662.09 202.776 li
630.73 202.776 li
cp
.147951 .326177 1 .00268559 cmyk
f
662.09 202.776 mo
681.47 183.396 li
681.47 247.071 li
662.09 266.451 li
cp
.300847 .42594 1 .0664378 cmyk
f
630.73 202.776 mo
650.11 183.396 li
681.47 183.396 li
662.09 202.776 li
cp
.122621 .247776 .937407 0 cmyk
f
1 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
630.73 202.776 mo
650.11 183.396 li
681.47 183.396 li
681.47 247.071 li
662.09 266.451 li
630.73 266.451 li
cp
630.73 202.776 mo
662.09 202.776 li
681.47 183.396 li
662.09 202.776 mo
662.09 266.451 li
.135805 .104005 .108583 0 cmyk
@
126.765 162.034 mo
137.489 162.034 li
137.489 98.8692 li
126.765 98.8692 li
cp
.674342 .208225 1 .0487678 cmyk
f
137.489 98.8692 mo
153.694 82.664 li
153.694 145.829 li
137.489 162.034 li
cp
.72195 .315953 1 .175723 cmyk
f
126.765 98.8692 mo
142.97 82.664 li
153.694 82.664 li
137.489 98.8692 li
cp
.554589 .150179 .861967 .0077821 cmyk
f
126.765 98.8692 mo
142.97 82.664 li
153.694 82.664 li
153.694 145.829 li
137.489 162.034 li
126.765 162.034 li
cp
126.765 98.8692 mo
137.489 98.8692 li
153.694 82.664 li
137.489 98.8692 mo
137.489 162.034 li
.135805 .104005 .108583 0 cmyk
@
10.9597 244.125 mo
73.251 244.125 li
73.251 181.834 li
10.9597 181.834 li
cp
.603296 .518395 .513207 .212314 cmyk
f
73.251 181.834 mo
94.0148 161.07 li
94.0148 223.362 li
73.251 244.125 li
cp
.648371 .571221 .563867 .345068 cmyk
f
10.9597 181.834 mo
31.7235 161.07 li
94.0148 161.07 li
73.251 181.834 li
cp
.510643 .425422 .425422 .0681468 cmyk
f
10.9597 181.834 mo
31.7235 161.07 li
94.0148 161.07 li
94.0148 223.362 li
73.251 244.125 li
10.9597 244.125 li
cp
10.9597 181.834 mo
73.251 181.834 li
94.0148 161.07 li
73.251 181.834 mo
73.251 244.125 li
.135805 .104005 .108583 0 cmyk
@
661.86 266.451 mo
693.22 266.451 li
693.22 202.776 li
661.86 202.776 li
cp
.0655528 .173251 .731167 0 cmyk
f
693.22 202.776 mo
712.6 183.396 li
712.6 247.071 li
693.22 266.451 li
cp
.261662 .311223 .8262 .0125734 cmyk
f
661.86 202.776 mo
681.24 183.396 li
712.6 183.396 li
693.22 202.776 li
cp
.0534981 .129702 .589685 0 cmyk
f
661.86 202.776 mo
681.24 183.396 li
712.6 183.396 li
712.6 247.071 li
693.22 266.451 li
661.86 266.451 li
cp
661.86 202.776 mo
693.22 202.776 li
712.6 183.396 li
693.22 202.776 mo
693.22 266.451 li
.135805 .104005 .108583 0 cmyk
@
178.766 162.034 mo
210.126 162.034 li
210.126 98.3591 li
178.766 98.3591 li
cp
.653773 .579889 .56878 .366613 cmyk
f
210.126 98.3591 mo
229.506 78.9789 li
229.506 142.654 li
210.126 162.034 li
cp
.678828 .610956 .600488 .485359 cmyk
f
178.766 98.3591 mo
198.146 78.9789 li
229.506 78.9789 li
210.126 98.3591 li
cp
.568017 .483009 .477821 .146273 cmyk
f
178.766 98.3591 mo
198.146 78.9789 li
229.506 78.9789 li
229.506 142.654 li
210.126 162.034 li
178.766 162.034 li
cp
178.766 98.3591 mo
210.126 98.3591 li
229.506 78.9789 li
210.126 98.3591 mo
210.126 162.034 li
.135805 .104005 .108583 0 cmyk
@
178.766 323.901 mo
210.126 323.901 li
210.126 260.226 li
178.766 260.226 li
cp
.369879 .299321 .304356 .000976577 cmyk
f
210.126 260.227 mo
229.506 240.846 li
229.506 304.521 li
210.126 323.901 li
cp
.502495 .417029 .417029 .0571908 cmyk
f
178.766 260.227 mo
198.146 240.846 li
229.506 240.846 li
210.126 260.227 li
cp
.288395 .227146 .232303 0 cmyk
f
178.766 260.227 mo
198.146 240.846 li
229.506 240.846 li
229.506 304.521 li
210.126 323.901 li
178.766 323.901 li
cp
178.766 260.227 mo
210.126 260.227 li
229.506 240.846 li
210.126 260.227 mo
210.126 323.901 li
.135805 .104005 .108583 0 cmyk
@
94.0148 193.216 mo
111.39 193.216 li
111.39 130.452 li
110.39 131.452 li
121.765 131.452 li
121.765 129.452 li
109.39 129.452 li
109.39 192.216 li
110.39 191.216 li
94.0148 191.216 li
cp
120.765 133.452 mo
126.765 130.452 li
120.765 127.452 li
cp
.75021 .679683 .670222 .90164 cmyk
f
94.0148 191.216 mo
111.438 191.216 li
111.438 292.175 li
110.438 291.175 li
121.861 291.175 li
121.861 293.175 li
109.438 293.175 li
109.438 192.216 li
110.438 193.216 li
94.0148 193.216 li
cp
120.861 289.175 mo
126.861 292.175 li
120.861 295.175 li
cp
f
137.43 162.034 mo
148.154 162.034 li
148.154 98.8692 li
137.43 98.8692 li
cp
0 .663844 .998169 0 cmyk
f
148.154 98.8692 mo
164.359 82.664 li
164.359 145.829 li
148.154 162.034 li
cp
.160342 .728298 1 .0429999 cmyk
f
137.43 98.8692 mo
153.635 82.664 li
164.359 82.664 li
148.154 98.8692 li
cp
0 .519524 .785916 0 cmyk
f
137.43 98.8692 mo
153.635 82.664 li
164.359 82.664 li
164.359 145.829 li
148.154 162.034 li
137.43 162.034 li
cp
137.43 98.8692 mo
148.154 98.8692 li
164.359 82.664 li
148.154 98.8692 mo
148.154 162.034 li
.135805 .104005 .108583 0 cmyk
@
126.861 323.757 mo
137.584 323.757 li
137.584 260.593 li
126.861 260.593 li
cp
.674342 .208225 1 .0487678 cmyk
f
137.584 260.593 mo
153.79 244.387 li
153.79 307.552 li
137.584 323.757 li
cp
.72195 .315953 1 .175723 cmyk
f
126.861 260.593 mo
143.066 244.387 li
153.79 244.387 li
137.584 260.593 li
cp
.554589 .150179 .861967 .0077821 cmyk
f
126.861 260.593 mo
143.066 244.387 li
153.79 244.387 li
153.79 307.552 li
137.584 323.757 li
126.861 323.757 li
cp
126.861 260.593 mo
137.584 260.593 li
153.79 244.387 li
137.584 260.593 mo
137.584 323.757 li
.135805 .104005 .108583 0 cmyk
@
137.43 323.757 mo
148.154 323.757 li
148.154 260.592 li
137.43 260.592 li
cp
0 .663844 .998169 0 cmyk
f
148.154 260.593 mo
164.359 244.387 li
164.359 307.552 li
148.154 323.757 li
cp
.160342 .728298 1 .0429999 cmyk
f
137.43 260.593 mo
153.635 244.387 li
164.359 244.387 li
148.154 260.593 li
cp
0 .519524 .785916 0 cmyk
f
137.43 260.592 mo
153.635 244.387 li
164.359 244.387 li
164.359 307.552 li
148.154 323.757 li
137.43 323.757 li
cp
137.43 260.592 mo
148.154 260.592 li
164.359 244.387 li
148.154 260.592 mo
148.154 323.757 li
.135805 .104005 .108583 0 cmyk
@
300.644 153.814 mo
310.385 153.814 li
310.385 107.22 li
300.644 107.22 li
cp
.765255 .551598 0 0 cmyk
f
310.385 107.22 mo
323.119 94.4859 li
323.119 141.08 li
310.385 153.814 li
cp
.872282 .694087 .0826123 .0052491 cmyk
f
300.644 107.22 mo
313.378 94.4859 li
323.119 94.4859 li
310.385 107.22 li
cp
.601678 .38584 0 0 cmyk
f
300.644 107.22 mo
313.378 94.4859 li
323.119 94.4859 li
323.119 141.08 li
310.385 153.814 li
300.644 153.814 li
cp
300.644 107.22 mo
310.385 107.22 li
323.119 94.4859 li
310.385 107.22 mo
310.385 153.814 li
.135805 .104005 .108583 0 cmyk
@
231.686 129.517 mo
295.644 129.517 li
295.644 131.517 li
231.686 131.517 li
cp
294.644 127.517 mo
300.644 130.517 li
294.644 133.517 li
cp
.75021 .679683 .670222 .90164 cmyk
f
337.486 217.007 mo
348.209 217.007 li
348.209 153.843 li
337.486 153.843 li
cp
.765255 .551598 0 0 cmyk
f
348.21 153.843 mo
364.415 137.637 li
364.415 200.802 li
348.21 217.007 li
cp
.872282 .694087 .0826123 .0052491 cmyk
f
337.486 153.843 mo
353.691 137.637 li
364.415 137.637 li
348.21 153.843 li
cp
.601678 .38584 0 0 cmyk
f
337.486 153.843 mo
353.691 137.637 li
364.415 137.637 li
364.415 200.802 li
348.209 217.007 li
337.486 217.007 li
cp
337.486 153.843 mo
348.209 153.843 li
364.415 137.637 li
348.209 153.843 mo
348.209 217.007 li
.135805 .104005 .108583 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+CambriaMath Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KAAAAA+CambriaMath def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 33 /g22 putdup 34 /g42 putdup 35 /g39 putdup 36 /g60 putdef/FontBBox {-1475 -2464 2868 3117} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BDEAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F78368B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36AE72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7FD9C5DE33005> |-/g22 <1C60D8A8C9B661294FB423E7675208DE120140CA8AD8DF468313F6BCFC4C938BB635F736540E193D5465EF9C4C7D1FD2054367011DF8AE7785C69B00A7D9A04258C48D608524A323BF69008F16AC33AB3878354DAC508A09D551A3F642E440B293A85794A09F57AEA3EB7900A78BFA08262576EE37FCA4F724356C23D5B3DBE6504A616602AFFDB74EAD2BB0FC2545B801CB290306DE3680D16D4DB76B18004E4A395DD89857181DCAC763040EAB9A9DC3BAD7B83EA5280C15147FED5045B062118280C1B4915D5831EDB25580BF6D79C2BB2404CC13C7FA6762042E25C14AE7C308BCEA180A9024ECA7AC02FAEB3E40CF> |-/g42 <1C60D8A8C9B78699627EE018E775A8907124CFE4565074F1759DC8F30E3AD403D40160E4EF9E833FD479D7157B66AD321F8FD19749E274786444B1B9EF33B6BF5E6EE20AFB0B437ADD58C9B94E6C45C32755E02DA02E96FE9D31962929246945E9D290B06119DDE8A8E527AE628D2ECF2BD0DEC17E94FEF562DAA30AACBBCD1794FEACDB9FA3FF8CBB7F7B1D8FA7FB7C310F609204E5784F5B4A521834789DDBDC183D3AD80D9157A3D65BD50D32> |-/g39 <1C60D8A8C9B82E3491B38B14CACFB3729C41091A9561EAECD2269DC0F0FAE766564B010CF54A5BA91E63C2F06BD1ED2B48CFEBEDDB5FE2E1092465194023F9D96EDC170589CEBD3872113791F9AEBC02DF210A23782F9CF1AB72811BC10C14AC14960BA4D7280C69F9A52913E7E6152901C2EF270809C83DAE613FCB779825EE0A3CB34AF58FDC3C> |-/g60 <1C60D8A8C9B78AC300FD5CF528FFB32DCB379C1C1F621CF1F7CF5B61A20EF25F60996133A95D7D9C37DC323918B36F2FE540FC483C03C666EBFFF45AE3209C346E1C51A29A549855B2AE8E97A5426FB760DB99E281EF0FE6CDFE5D61DA7582D61D7272769DD61B87016D2A98E421F4E6C221C391DFA713AFD044F9E53FA21C458A9D74C70E7A3345CBE83810E139798C2F5D41B314D999F057194E825A9360E69A57CF085024FBD18DFBD7519D04605814EC07FAA0A170D9ED253F0C30D2F5B5527D7886F8F1EA929A982515A27FF545C8C4> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IDXBWH+CambriaMath /KAAAAA+CambriaMath findfont ct_VMDictPut/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 219{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf259.092 125.758 mo(!""#)[8.62531 7.50549 7.50546 0 ]xshIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf287.092 128.638 mo($)sh364.408 191.024 mo
431.975 191.024 li
431.975 189.024 li
364.408 189.024 li
cp
430.975 193.024 mo
436.975 190.024 li
430.974 187.024 li
cp
f
479.599 221.593 mo
490.323 221.593 li
490.323 158.428 li
479.599 158.428 li
cp
.765255 .551598 0 0 cmyk
f
490.323 158.428 mo
506.528 142.223 li
506.528 205.388 li
490.323 221.593 li
cp
.872282 .694087 .0826123 .0052491 cmyk
f
479.599 158.428 mo
495.804 142.223 li
506.528 142.223 li
490.323 158.428 li
cp
.601678 .38584 0 0 cmyk
f
479.599 158.428 mo
495.804 142.223 li
506.528 142.223 li
506.528 205.388 li
490.323 221.593 li
479.599 221.593 li
cp
479.599 158.428 mo
490.323 158.428 li
506.528 142.223 li
490.323 158.428 mo
490.323 221.593 li
.135805 .104005 .108583 0 cmyk
@
490.311 221.593 mo
501.035 221.593 li
501.035 158.428 li
490.311 158.428 li
cp
0 .663844 .998169 0 cmyk
f
501.035 158.428 mo
517.24 142.223 li
517.24 205.388 li
501.035 221.593 li
cp
.160342 .728298 1 .0429999 cmyk
f
490.311 158.428 mo
506.516 142.223 li
517.24 142.223 li
501.035 158.428 li
cp
0 .519524 .785916 0 cmyk
f
490.311 158.428 mo
506.516 142.223 li
517.24 142.223 li
517.24 205.388 li
501.035 221.593 li
490.311 221.593 li
cp
490.311 158.428 mo
501.035 158.428 li
517.24 142.223 li
501.035 158.428 mo
501.035 221.593 li
.135805 .104005 .108583 0 cmyk
@
323.218 130.105 mo
388.891 130.39 li
388.882 132.39 li
323.209 132.105 li
cp
387.9 128.386 mo
393.887 131.412 li
387.874 134.386 li
cp
.75021 .679683 .670222 .90164 cmyk
f
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g26 <1C60D8A8C9B624F952C09B19DD22DA2CB0599838A6BBF8FB47DCD6E61A7FAC89A4DCB706A0ED3D59BBA7A566B327BB21850987A86584AA958B032C361B5A206E9119B357B793172DC31F875BF7CD729066F357C7B626BACE4D7314C45CA7F7D3082EE9ABCF75EAFBAA45A70943B0C7FB7CABCA911D065A050469385EF3D59A088C85B854AD43ED5E7E4E2059EDB09CEA552409A9A4DFC765DB309F2B18136F3EF54860A1685B80AB87E8F0BBCAA57922BD7CF4F52B808442526750169630DDEEF96C6B62D54D0561F2DD54A79CF97204F43D691140D008B17BDD4D8A9DB9D9DA7BD770CA6B28F04C2279C42FF2F7C5D0F153A87B36> |-/g43 <1C60D8A8C9B7EDAFE893F5FC1FF656FC61BE6EC450AACD5A0DF9BB131EBD8DF8B5ED5CF5AEEA3D84F24972B3E5CA4CBC5799371AEB2AA83D0C0E5D429141DCFE144FC38BC7DC3592F24D29DDCEB8DD9E7BF8D949F8090C8588B3889B29F10E5823C1417A315379DF47B7D7DBC2DEB37100C8B3638A9709DC4D4EAFCFF4152048F08FC6BF0F3ED91D4629E11321E4B2036D6A77F7AFAD51F43A67D6B0C181316B971D49CA151A7C8215977BC9D131A48D26F07B2DB21EF4514B0FF7165E21572640CA8FFFF5CE5255DB0CB294F8D7537748C4BC7ABFE4A62C27C77A264CD1AE452E837CFC1F5B3062EC78631419B149B770366CCA5E1D5A58ABBDE651C162E754AFAE135937FFA6A8FB5F7F45DFF9F3B84D969D741CD7E577D0ACF516FE24> |-/g45 <1C60D8A8C9B74D93A5A192672FD228D4708B61E2554DD8941DE75CB87C3586EC5E14A1E5A88489B38F826BC24E60FDD443754BAFB8BCA8D802BD51F19080A7A99BBA66DE627ECEBD72EAC075CB339AC272414E3EEAA47F0E24F9831221FAA83E408D51273FBF07CF742AD6D3DD7555B8331B48C70C78D06A527A8D9CCFE456E1EFDCF65153E3E592E3E7FE95654A0E339BFCC2EFC9216CDE3F4F5947FE86262F79CEE74C37921814ADCFF503DF28E5C501DEE456BDB1ACCC4455ED386E4712955D4A5CF40EEF9BE10DBB06CE4A8445A3F1A478BE671DCABD0881071CCF876724951CFDA2F81247D8DF5B09C4F412F782> |-/g29 <1C60D8A8C9B7EE7C1908F1523D8EA9801A20624497B8F17A94E1EDFB00E5A43A6C2C0516F07AC4F31FCA17042581FE4B349FFAEF6370BAE1DC1FD11080DC607FE95F8D7A11056EC8B4570E93F304C22FC2892468893BBE32998158F78DE7E899E532633A1CDAAA322D4EB39EE8EBEE9D81C67BB495DBB2871020237F6C6A1842380EE747C231260169BFFC8861434F53CB84CDA7145D122E739F06D93477A22F7274943D46614FB2E571F07CA89AC51ADF8DDB6F65520BC9E53264A1531C2E25CD21605DE1A72D15951C5B5B88348C38C443C860FB5A6F4BCC634856D086F479C993D02598695267DEF47E5746871404429A3A78B3B08B81CCBA347D92> |-/g40 <1C60D8A8C9B6BBBB4CE52FD48B04492F7E2C4553CF0682951AD3A11AECF5831A24A87C656A0D69E6B3A251121847A5EA1C42A3D4422CDEA588338B329750F0A21E389D7D04917B8E0ACA60B7997D45B0836F74AFD6FDE4233E53F1F6127E777380EEE7D644B44B14EC752B448386E02915FE5315C2CFB862ADF5307C3ADF3535657C54800CA813541B5D904AFBFB775874DD86710268602C0E5BBC310A11B1D779465B97010A9B5C439F33CE26F763FF4EE9D0BB02390100AEBF7198900CB69F81F2486BB82B1A92109E77D3BCD82CCA2A769CC7ED004C622FD636E5D01CC548E1471CF36E70E39058B430208A1E3AF422D6C443EFD472954ED4BB47FBBDDD475260AB8774591ED7869BB582A2B98C39A83C4FBC10EE32BB74D4A5268EE261014DECA557D409538090630A4266CD16A5F399EF2B8A5C9DF935D4F2D5C755543176CBAD27E7678CBF00EBDB643D350F6E0628D52A63084D51D265889204740B8A96BFD413C7F2E23CEFF78D9DFA2C7B8E1F058071> |-/g33 <1C60D8A8C9B7AB676D2B474C469BAEFE4CB79113AD639D26E2AB135090B40A373A81FDB8A6DF8851C83E6499BF4A0129CF4779E3A8F344261777897C9965C9EF53BFAFCBC6895A20DB4F807F3E46BD0626A719D52E91CF5618DDDAA49429953B06D25362026409045DB9831FBB619552CF2A8794F5A9AE56ED9DE3A46B6F0E61D23A4E9F82720FB6FE12E14BD0E795D4E581A6F27CC110087C0079722A45D19A7FDA82E777EF85D2CB8C241100124441F9733260477B38F2C06ADB3E1D> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 37 /g26 putdup 38 /g43 putdup 39 /g45 putdup 40 /g29 putdup 41 /g40 putdup 42 /g33 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 213{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf328.98 125.758 mo(%&'\(\)&#*)[9.62491 7.74899 6.50308 7.74908 11.753 7.74899 4.37491 0 ]xsh2 lw
403.793 122.601 mo
403.793 139.609 li
395.289 131.105 mo
412.297 131.105 li
@
395.289 131.105 mo
395.289 126.408 399.096 122.601 403.793 122.601 cv
408.49 122.601 412.297 126.408 412.297 131.105 cv
412.297 135.802 408.49 139.609 403.793 139.609 cv
399.096 139.609 395.289 135.802 395.289 131.105 cv
cp
@
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g17 <1C60D8A8C9B62FDE75DF744BE36C6990529AFC313DA4E341874C93EDFF8DDE7F92E9F5BE879329F42090D6F5B9658555A40E8F54C9C9FF40500AA93D110538FC80CF3ADB4E4702A885AF22E6EB03DB195A4C7FF5C4B70E758935ACDF862F66A4EE605320629B9056C394C662F72E2D9D0CB29D904B9D0ACA68F75F0BF1360EFAEF05F0F8C4F282A5CF12EF7EA095EE9833D3031C1462DA01DB595C8B1D675A26854CED5C6502B3D409FC7B425C87072C9EC8205E115A586F2C2C3EBAADEEAA772ED30EA4F0AF386602F79FE11A8CEC546D53D3AC0DB09A54805A55CB01CE10EB9E1E36AD4ED1423818D7AFC464EE45F501EFD373240298B97389ED5A451DB4931EF9E88B5B5085239E020C81ADA7FB627F44D9ABD75346773EFC76DD805C9C58F89F8997C80A91BED60ECF362920D9C99EB25954749BFD3E9FBA> |-/g57 <1C60D8A8C9B7F88C2BC3AB8E1F989FE2FEA0C513528CA7DFBF50274F68AA0EDB4100DE0B777AA374FBFE005F9E9EC8F9AB3D41A4C4EFF0E6E0A6F09C393DCFD2531BB9E18C9571E3369CFCC09837C3AFFF9BDC71DF68C6C16970B0971387A247FC0E95B4CD1BF0393DA9D91E831DB41A58EDC8F542002489C46507000C58221626CFE029D1A273DB9655B154A4F77E74EDEC4BDBD21696CCC25245DD284B8E8A8755FB79CBA587E858BCBF0207A46A656DC1D971C8B434EC954DEC60E03836F96B4E5E97C756F5F5E35B009DCB3792DDAD78C622DFA41CE4F1BFB60AA7FA02DDE47ACACF0C690E38A8B38D1C35A77E07F84B508A9324632067B36C0927DD8183C23D330030C9A7F437249F853585AB625A22C3290B> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 43 /g17 putdup 44 /g57 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 211{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf289.466 160.318 mo(+)shIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf298.096 163.198 mo(,)sh412.305 130.105 mo
433.351 130.268 li
433.336 132.268 li
412.289 132.105 li
cp
432.367 128.26 mo
438.343 131.307 li
432.32 134.26 li
cp
f
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g58 <1C60D8A8C9B7F88C2BA724A7B173E355DC3DD2115486BF636F3B33ACC1A2AD7312E4C1FDD6B5BE3D52D8DC8D6755AE9E46E8EDA4E644567C010BECF7E1BDCF3EA1DC3735C4C97148933FE4DB8DE209CB87E5308EFB91F8024F91F8B3B3332EE766095C1D986C76413D2D655C577AFEB5213F85651DE001438642C2FC97BE7A1824501E163B3F61D72653ECC06F7AE3AB9C876B00582717CD67F558A4023ECB16F8F73725AF9F79628381D7E1BCDC00FB04638A3D92B8A3C294DCDCE1E8125DC171E55B6C1B31A64C47BD155FE646B5511971302A9547640B2C6150CDA86C8F963327FEBC5F5FC826CDEBEBD2ECBCDD0BF151BE0A57A71E2182B1DCA99B2F7473F50033D9C77321CB10A665A55CC7A85CD8616E85DC09C1> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 45 /g58 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 /g58 210{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf324.708 224.398 mo(+)shIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf333.337 227.278 mo(-)sh440.736 183.742 mo
452.762 195.769 li
452.762 183.742 mo
440.736 195.769 li
@
438.245 189.755 mo
438.245 185.059 442.052 181.251 446.749 181.251 cv
451.445 181.251 455.253 185.059 455.253 189.755 cv
455.253 194.452 451.445 198.259 446.749 198.259 cv
442.052 198.259 438.245 194.452 438.245 189.755 cv
cp
@
438.343 131.307 mo
438.343 126.61 442.151 122.803 446.847 122.803 cv
451.544 122.803 455.351 126.61 455.351 131.307 cv
455.351 136.003 451.544 139.811 446.847 139.811 cv
442.151 139.811 438.343 136.003 438.343 131.307 cv
cp
@
451.836 125.331 mo
447.093 127.617 442.35 129.903 442.236 131.16 cv
442.121 132.417 451.093 131.731 451.15 132.874 cv
451.207 134.017 444.179 137.103 442.578 138.017 cv
@
445.847 139.808 mo
445.761 176.249 li
447.761 176.254 li
447.847 139.813 li
cp
443.763 175.244 mo
446.749 181.251 li
449.763 175.259 li
cp
f
455.263 188.755 mo
474.61 188.958 li
474.589 190.958 li
455.242 190.755 li
cp
473.631 186.948 mo
479.599 190.01 li
473.568 192.947 li
cp
f
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g59 <1C60D8A8C9B7F88C2B12A13FB00DEC46929D544F43348D83E6BCE6B7594FA21E641D983F2A8DE1ECF5360F9504F3B9BA951A75312F456366B4286B8A7DC78029A8DA28644D6071E11BC131E82291D6AA572A1EF5E4B813A619BA97DE9F84B62E8D733F8F60D1638DF5064CFCF95E8EE1FCBA872DC4C7AC57E348D4F4C98E283197816CE54E710CFC65479EDEC3F412E96EA52594BCBF26ABC8E806A4206EAB1CE8E5DCD4226867E5E98F6F6DE01E3A1317746F174D52EEBDEFC78645A12C42F936B11B23CA16312525C662E1912C2335A40710DF54894FA06938B053> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 46 /g59 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 /g58 /g59 209{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf467.379 229.438 mo(+)shIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf476.009 232.318 mo(.)sh361.985 323.757 mo
372.709 323.757 li
372.709 260.592 li
361.985 260.592 li
cp
.765255 .551598 0 0 cmyk
f
372.709 260.593 mo
388.914 244.387 li
388.914 307.552 li
372.709 323.757 li
cp
.872282 .694087 .0826123 .0052491 cmyk
f
361.985 260.593 mo
378.19 244.387 li
388.914 244.387 li
372.709 260.593 li
cp
.601678 .38584 0 0 cmyk
f
1 lw
361.985 260.592 mo
378.19 244.387 li
388.914 244.387 li
388.914 307.552 li
372.709 323.757 li
361.985 323.757 li
cp
361.985 260.592 mo
372.709 260.592 li
388.914 244.387 li
372.709 260.592 mo
372.709 323.757 li
.135805 .104005 .108583 0 cmyk
@
372.696 323.757 mo
383.42 323.757 li
383.42 260.592 li
372.696 260.592 li
cp
0 .663844 .998169 0 cmyk
f
383.42 260.593 mo
399.625 244.387 li
399.625 307.552 li
383.42 323.757 li
cp
.160342 .728298 1 .0429999 cmyk
f
372.696 260.593 mo
388.901 244.387 li
399.625 244.387 li
383.42 260.593 li
cp
0 .519524 .785916 0 cmyk
f
372.696 260.592 mo
388.901 244.387 li
399.625 244.387 li
399.625 307.552 li
383.42 323.757 li
372.696 323.757 li
cp
372.696 260.592 mo
383.42 260.592 li
399.625 244.387 li
383.42 260.592 mo
383.42 323.757 li
.135805 .104005 .108583 0 cmyk
@
231.686 291.121 mo
356.985 291.173 li
356.984 293.173 li
231.685 293.121 li
cp
355.986 289.172 mo
361.985 292.175 li
355.984 295.172 li
cp
.75021 .679683 .670222 .90164 cmyk
f
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g56 <1C60D8A8C9B7F88C2B780E4DB2544561CAC9A20C6BB0B13699B706C1363010DB765FA6C43655301BE09B2CC3CD96E1857F37F0C3A41E09A4894AF0519685AD3CAD001A338BFE95F6F1AA62102D91F860C1C48E32F88B27AAA80BA221C6190705435530756B753E8A19A3D6B6F9D6F69BDA4DFF70963E5D7172CEA8BAE2A62723B33714F423A266021272A7A831450ABD0A86799213944A73BBF7786549680961C310707B73A46D81D67FB83359220776A5236469A2820155406C994784A4020BC578B6FF849EE8BAFE5D3039B602F31D2CBA08D4C984BF04> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 47 /g56 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 /g58 /g59 /g56 208{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf346.648 330.718 mo(+)shIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf354.953 333.598 mo(/)sh535.197 221.593 mo
566.557 221.593 li
566.557 157.918 li
535.197 157.918 li
cp
.147951 .326177 1 .00268559 cmyk
f
566.557 157.918 mo
585.937 138.538 li
585.937 202.213 li
566.557 221.593 li
cp
.300847 .42594 1 .0664378 cmyk
f
535.197 157.918 mo
554.577 138.538 li
585.937 138.538 li
566.557 157.918 li
cp
.122621 .247776 .937407 0 cmyk
f
535.197 157.918 mo
554.577 138.538 li
585.937 138.538 li
585.937 202.213 li
566.557 221.593 li
535.197 221.593 li
cp
535.197 157.918 mo
566.557 157.918 li
585.937 138.538 li
566.557 157.918 mo
566.557 221.593 li
.135805 .104005 .108583 0 cmyk
@
535.197 323.757 mo
566.557 323.757 li
566.557 260.082 li
535.197 260.082 li
cp
.0655528 .173251 .731167 0 cmyk
f
566.557 260.082 mo
585.937 240.702 li
585.937 304.377 li
566.557 323.757 li
cp
.261662 .311223 .8262 .0125734 cmyk
f
535.197 260.082 mo
554.577 240.702 li
585.937 240.702 li
566.557 260.082 li
cp
.0534981 .129702 .589685 0 cmyk
f
535.197 260.082 mo
554.577 240.702 li
585.937 240.702 li
585.937 304.377 li
566.557 323.757 li
535.197 323.757 li
cp
535.197 260.082 mo
566.557 260.082 li
585.937 240.702 li
566.557 260.082 mo
566.557 323.757 li
.135805 .104005 .108583 0 cmyk
@
2 lw
596.982 233.105 mo
596.982 228.409 600.789 224.601 605.486 224.601 cv
610.182 224.601 613.99 228.409 613.99 233.105 cv
613.99 237.802 610.182 241.609 605.486 241.609 cv
600.789 241.609 596.982 237.802 596.982 233.105 cv
cp
.75021 .679683 .670222 .90164 cmyk
@
609.677 230.273 mo
607.677 229.252 605.677 228.232 604.177 228.523 cv
602.677 228.815 600.969 230.732 600.677 232.023 cv
600.385 233.315 601.344 235.482 602.427 236.273 cv
603.51 237.065 605.885 237.023 607.177 236.773 cv
608.469 236.523 609.323 235.648 610.177 234.773 cv
@
613.99 232.105 mo
625.998 232.105 li
625.998 234.105 li
613.99 234.105 li
cp
624.998 230.105 mo
630.998 233.105 li
624.998 236.105 li
cp
f
399.625 290.92 mo
530.197 290.92 li
530.197 292.92 li
399.625 292.92 li
cp
529.197 288.92 mo
535.197 291.92 li
529.197 294.92 li
cp
f
517.944 188.755 mo
529.952 188.755 li
529.952 190.755 li
517.944 190.755 li
cp
528.952 186.755 mo
534.952 189.756 li
528.952 192.755 li
cp
f
248.018 128.665 mo
248.202 125.341 li
248.59 122.034 li
249.175 118.778 li
249.953 115.578 li
250.916 112.438 li
252.062 109.362 li
253.383 106.356 li
254.876 103.421 li
256.533 100.564 li
258.352 97.7868 li
260.325 95.0946 li
262.449 92.4909 li
264.717 89.9796 li
267.124 87.5647 li
269.666 85.25 li
272.337 83.0393 li
275.133 80.9365 li
278.048 78.9456 li
281.077 77.0702 li
284.214 75.3144 li
287.456 73.682 li
290.797 72.1769 li
294.231 70.8029 li
297.755 69.5641 li
301.363 68.4642 li
305.049 67.5072 li
308.809 66.6971 li
312.638 66.0378 li
316.531 65.5332 li
320.483 65.1872 li
324.488 65.0039 li
328.541 64.9871 li
332.225 65.1184 li
335.864 65.3869 li
339.457 65.7898 li
342.999 66.3241 li
346.487 66.9869 li
349.915 67.7752 li
353.281 68.6861 li
356.58 69.7167 li
359.809 70.8639 li
362.963 72.125 li
366.038 73.4969 li
369.032 74.9768 li
371.938 76.5617 li
374.755 78.2488 li
377.477 80.0352 li
380.1 81.9179 li
382.622 83.8941 li
385.037 85.9609 li
387.341 88.1154 li
389.532 90.3548 li
391.604 92.6761 li
393.553 95.0763 li
395.376 97.5527 li
397.068 100.102 li
398.626 102.722 li
400.044 105.409 li
401.319 108.16 li
402.448 110.973 li
403.424 113.843 li
404.249 116.781 li
404.447 117.806 li
402.484 118.185 li
402.293 117.201 li
402.312 117.282 li
401.506 114.41 li
401.522 114.461 li
400.563 111.642 li
400.581 111.692 li
399.473 108.929 li
399.494 108.978 li
398.24 106.274 li
398.263 106.32 li
396.869 103.678 li
396.893 103.722 li
395.362 101.146 li
395.388 101.188 li
393.723 98.679 li
393.751 98.7188 li
391.957 96.2811 li
391.986 96.3187 li
390.066 93.955 li
390.096 93.9905 li
388.055 91.7036 li
388.086 91.737 li
385.927 89.5299 li
385.959 89.5612 li
383.687 87.4369 li
383.72 87.4662 li
381.338 85.4276 li
381.371 85.4549 li
378.883 83.5051 li
378.917 83.5305 li
376.328 81.6722 li
376.362 81.6958 li
373.674 79.9322 li
373.709 79.954 li
370.928 78.2878 li
370.963 78.3079 li
368.092 76.7423 li
368.127 76.7607 li
365.17 75.2985 li
365.206 75.3153 li
362.166 73.9595 li
362.202 73.9748 li
359.084 72.7282 li
359.121 72.742 li
355.929 71.6077 li
355.965 71.6199 li
352.703 70.6009 li
352.74 70.6117 li
349.411 69.7108 li
349.448 69.7201 li
346.057 68.9403 li
346.094 68.9482 li
342.645 68.2925 li
342.682 68.2989 li
339.178 67.7703 li
339.215 67.7752 li
335.66 67.3766 li
335.698 67.3801 li
332.096 67.1143 li
332.134 67.1164 li
328.49 66.9866 li
328.53 66.9872 li
324.517 67.0038 li
324.559 67.0028 li
320.595 67.1842 li
320.636 67.1814 li
316.726 67.5238 li
316.768 67.5193 li
312.916 68.0185 li
312.957 68.0123 li
309.169 68.6646 li
309.21 68.6567 li
305.491 69.458 li
305.531 69.4483 li
301.885 70.3947 li
301.926 70.3834 li
298.358 71.471 li
298.398 71.4578 li
294.915 72.6827 li
294.954 72.6677 li
291.559 74.0259 li
291.599 74.0091 li
288.297 75.4966 li
288.336 75.478 li
285.133 77.0909 li
285.172 77.0704 li
282.072 78.8047 li
282.111 78.7823 li
279.12 80.6342 li
279.157 80.6097 li
276.28 82.5751 li
276.317 82.5486 li
273.558 84.6236 li
273.595 84.5949 li
270.96 86.7757 li
270.995 86.7447 li
268.489 89.0272 li
268.523 88.9939 li
266.15 91.3742 li
266.184 91.3384 li
263.95 93.8127 li
263.983 93.7744 li
261.891 96.3386 li
261.923 96.2978 li
259.98 98.9479 li
260.01 98.9045 li
258.221 101.637 li
258.25 101.591 li
256.619 104.401 li
256.646 104.353 li
255.179 107.237 li
255.203 107.186 li
253.904 110.141 li
253.926 110.087 li
252.801 113.108 li
252.82 113.053 li
251.873 116.136 li
251.889 116.079 li
251.126 119.22 li
251.138 119.161 li
250.564 122.358 li
250.573 122.297 li
250.192 125.544 li
250.197 125.483 li
250.014 128.776 li
cp
406.221 116.445 mo
404.414 122.905 li
400.33 117.583 li
cp
f
332.805 188.996 mo
328.619 188.731 li
324.105 188.262 li
319.669 187.649 li
315.313 186.895 li
311.044 186.004 li
306.866 184.979 li
302.785 183.823 li
298.806 182.542 li
294.935 181.137 li
291.176 179.613 li
287.536 177.974 li
284.019 176.223 li
280.631 174.364 li
277.377 172.4 li
274.263 170.334 li
271.294 168.171 li
268.476 165.914 li
265.814 163.567 li
263.313 161.132 li
260.979 158.614 li
258.819 156.015 li
256.837 153.34 li
255.039 150.592 li
253.431 147.775 li
252.02 144.892 li
250.81 141.948 li
249.809 138.946 li
249.021 135.89 li
248.453 132.786 li
248.111 129.636 li
248.001 126.484 li
250 126.414 li
250.108 129.53 li
250.103 129.457 li
250.437 132.533 li
250.427 132.462 li
250.982 135.495 li
250.966 135.426 li
251.737 138.413 li
251.717 138.346 li
252.697 141.283 li
252.673 141.219 li
253.857 144.102 li
253.83 144.042 li
255.214 146.867 li
255.184 146.811 li
256.761 149.575 li
256.729 149.523 li
258.494 152.221 li
258.461 152.173 li
260.409 154.802 li
260.375 154.758 li
262.5 157.314 li
262.465 157.274 li
264.763 159.754 li
264.727 159.717 li
267.191 162.117 li
267.155 162.083 li
269.781 164.399 li
269.745 164.368 li
272.527 166.596 li
272.49 166.568 li
275.423 168.705 li
275.387 168.68 li
278.465 170.721 li
278.429 170.698 li
281.647 172.641 li
281.611 172.62 li
284.963 174.46 li
284.928 174.442 li
288.41 176.175 li
288.374 176.158 li
291.98 177.782 li
291.945 177.767 li
295.669 179.277 li
295.634 179.263 li
299.471 180.655 li
299.437 180.643 li
303.381 181.914 li
303.347 181.904 li
307.394 183.049 li
307.36 183.04 li
311.504 184.057 li
311.47 184.05 li
315.705 184.934 li
315.671 184.928 li
319.993 185.676 li
319.959 185.671 li
324.362 186.279 li
324.328 186.275 li
328.806 186.739 li
328.766 186.736 li
332.932 187 li
cp
332 184.957 mo
337.863 188.217 li
331.738 190.952 li
cp
f
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g27 <1C60D8A8C9B678BD19AF3BE28479CA9CC3836C359E865483DB069D10AC9209CFE90A7C2842843929B3AF298427598249D8536EE552102FE881E0954A36AEA75870A8177EFE9509998FB89AEB0D0375F32F9A41ABB195397CB04EA7DAD02879DB33113F2EC5448CB09FADBB4C12112CBA27D14CFA7257A4EFB5687B764838B0685DBCAEB94450C3E587B6F713C64FE47EB24A27971B9907FC52CAE3EF2D709894DC4497159FB8D27BEE6356CB84E4DE0F87D174125C6A8F6566C11FB0FAF8EDEA4AEF7F84E81275209CB9C534E2D0079657BC2DE91343ED94C0C0672E3E9FCA0D2EC425A6619C2358B9E84696808AF81D34C94D7048B30C72A4019EBA78E18AE8D6A87FBBEA24EDB47025E4BA6A5A1B139EE1DBE3EFFAA2> |-/g28 <1C60D8A8C9B7C0542DF6823AA6820AF5200973C7EC313D83AA043E92A1E4B9DED93F66F99DC7580A3135A6B3E91EF29CFF5787C32991976315D0E0AAD26826551CDB151CB4E8C9038286C0943ABFBFF9425182CA7C1FBF35DA4F597C76B7F7B1731968B837A5935375654B6144F4FDA90B67C921E97940114CBF0BC2C71A7B28AD8666C4F2B7DB17839C3BADF14D8430C13AA31A49534C078728518803BE020D51183BAD6DCE74EEB06894B3411FE68CB2CC17CF477D6B8CD0F84FB79D2DE10165769CA1DA3170A15CC9DDA9F7EBE73D75FAFC0081452EAAA610B9FD8DE1228A691E5774FCB2CED7> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 48 /g27 putdup 49 /g28 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 /g58 /g59 /g56 /g27 /g28 206{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf43.7993 264.477 mo(0)sh192.607 343.198 mo(0)shIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf200.992 346.078 mo(,)shIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf192.388 182.157 mo(0)shIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf200.448 185.037 mo(/)shIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf545.76 238.078 mo(1)shIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf551.515 240.718 mo(/)shIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf545.875 343.438 mo(1)shIDXBWH+CambriaMath*1 [10 0 0 -10 0 0 ]msf551.955 346.318 mo(,)shIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf657.823 285.838 mo(1)sh477.029 103.24 mo
487.753 103.24 li
487.753 40.0753 li
477.029 40.0753 li
cp
.674342 .208225 1 .0487678 cmyk
f
487.753 40.0752 mo
503.958 23.8701 li
503.958 87.0349 li
487.753 103.24 li
cp
.72195 .315953 1 .175723 cmyk
f
477.029 40.0752 mo
493.234 23.8701 li
503.958 23.8701 li
487.753 40.0752 li
cp
.554589 .150179 .861967 .0077821 cmyk
f
1 lw
477.029 40.0753 mo
493.234 23.8701 li
503.958 23.8701 li
503.958 87.035 li
487.753 103.24 li
477.029 103.24 li
cp
477.029 40.0753 mo
487.753 40.0753 li
503.958 23.8701 li
487.753 40.0753 mo
487.753 103.24 li
.135805 .104005 .108583 0 cmyk
@
498.278 103.24 mo
509.002 103.24 li
509.002 40.0753 li
498.278 40.0753 li
cp
.765255 .551598 0 0 cmyk
f
509.002 40.0752 mo
525.207 23.8701 li
525.207 87.0349 li
509.002 103.24 li
cp
.872282 .694087 .0826123 .0052491 cmyk
f
498.278 40.0752 mo
514.483 23.8701 li
525.207 23.8701 li
509.002 40.0752 li
cp
.601678 .38584 0 0 cmyk
f
498.278 40.0753 mo
514.483 23.8701 li
525.207 23.8701 li
525.207 87.035 li
509.002 103.24 li
498.278 103.24 li
cp
498.278 40.0753 mo
509.002 40.0753 li
525.207 23.8701 li
509.002 40.0753 mo
509.002 103.24 li
.135805 .104005 .108583 0 cmyk
@
519.528 103.419 mo
530.252 103.419 li
530.252 40.2538 li
519.528 40.2538 li
cp
0 .663844 .998169 0 cmyk
f
530.252 40.2537 mo
546.457 24.0486 li
546.457 87.2135 li
530.252 103.419 li
cp
.160342 .728298 1 .0429999 cmyk
f
519.528 40.2537 mo
535.733 24.0486 li
546.457 24.0486 li
530.252 40.2537 li
cp
0 .519524 .785916 0 cmyk
f
519.528 40.2538 mo
535.733 24.0486 li
546.457 24.0486 li
546.457 87.2135 li
530.252 103.419 li
519.528 103.419 li
cp
519.528 40.2538 mo
530.252 40.2538 li
546.457 24.0486 li
530.252 40.2538 mo
530.252 103.419 li
.135805 .104005 .108583 0 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g15 <1C60D8A8C9B7C63DF8CAD7A86802D85F90DEE581EAE569C7C23ED254E5A4121B602029562724248FC0F1AAB6C1595E74DA46013B2FB971448308B7C15E79C147448F705C3DF8D36EFDE0DB532DBA51FA4A7FBA98948E2601A12E5E20D39E1DC1247DFB1C920A6E4B06965189E9394CFB25FCFC31AF880277EE5DB8F0C4B4AD8B78CDCC26ABCEAC6ABDA557D88786C3AD2C4A4DC64E033D961FE676E6CAA20FBF> |-/g41 <1C60D8A8C9B7FD84A4785742EF375932A7EED3F0D521E6362E3686FB1CE3943098A0376C2042F572D236FFE4971DE7454071FF757680901DBC804C765F4B2F120F07D522A0BF8B64DC4A49D39030B6E4CF17516FC0DF3420550889C23154EBA2AA9C793D35FE4A8BE97648893AA6B75394EC7ADA61159AA4A95681648674D65BAE391A36FE453BD8538F5A971990C5925ECF59844F1D6CA78D6A056F01E977D030EB99A0152027B11D0BD28DAB4FF154C39919847D935C8CFBECC69988757401317A7F80055ECF05BDA0D6533D4463FF2606036E189E33E0EF2C4B5F892741D6FC22471A5A98AB60C703367EAFCFF6974321A66FD58B37EE3F9EF5F624210F8956004EBDB15B9F46D8> |-/g48 <1C60D8A8C9B79B8E966D626B3E0F724BB5CDD5E0AE75AF982FF2ADE88398970F4ADD713405CC0B0C34BE66DD1E7F8BBAE59190B967A7568469D60C526E1157FC39CDE33ED4C6F33551F7F1C5A4ECBCDB577E49B5D99AAB1198E73AE50299B94E0792A756D3EF2A17D5C5121D4494E714DB5BD7FAE4971485A80693880D75B424015DB0BA68A855C004D6AD5E952F85FE7E9173AB0943F52FAF551B24745D4D7125A9CBF0EAF60712478D9F26A82CFB3A6F9830A69CD17CF30E6081EBC60FBF6BA59FD6DA6496342EA99A246B4C720FEB6C2C8874D60D2ADF5815EF6DD721EDE133C0E7272FB6F8F19459C4493260A13FC8F1179E628E58E9B50B0929FF26E977A4B850743CBA53503A01C581BBEB3F91C2AAA3F11A5807F6D8C64EADD5E59F7E6024BE37A636A6712C3CE5D06C448FB99C126297E13A975EE8026450DD966701CE565B8A1248142B5CE349A3E4B19E25A0871785DF4E7C5990D0F1EE84596ACB13F71D3B7E7685386DB890A4F222041F571EC6B5B5F57FCD1EFDDC983727EDF6CA1AE84A7227D40E> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 50 /g15 putdup 51 /g41 putdup 52 /g48 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 /g58 /g59 /g56 /g27 /g28 /g15 /g41 /g48 203{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf565.125 49.4375 mo(2"34)[8.37476 7.5069 7.99683 0 ]xsh628.789 38.8623 mo
630.12 39.2132 631.142 39.9708 631.855 41.1352 cv
632.568 42.2996 632.925 43.7044 632.925 45.3496 cv
632.925 46.9993 632.569 48.4041 631.858 49.5639 cv
631.147 50.7238 630.124 51.4791 628.789 51.8301 cv
628.625 51.3037 li
629.678 50.9528 630.46 50.2601 630.973 49.2256 cv
631.486 48.1911 631.742 46.8763 631.742 45.2812 cv
631.742 43.7409 631.487 42.4614 630.976 41.4429 cv
630.466 40.4243 629.675 39.7396 628.604 39.3887 cv
cp
602.401 38.8623 mo
602.585 39.3887 li
601.519 39.7396 600.729 40.4243 600.217 41.4429 cv
599.704 42.4614 599.448 43.7409 599.448 45.2812 cv
599.448 46.8763 599.704 48.1911 600.217 49.2256 cv
600.729 50.2601 601.512 50.9528 602.565 51.3037 cv
602.401 51.8301 li
601.065 51.4791 600.042 50.7238 599.331 49.5639 cv
598.62 48.4041 598.265 46.9993 598.265 45.3496 cv
598.265 43.7044 598.622 42.2996 599.335 41.1352 cv
600.048 39.9708 601.07 39.2132 602.401 38.8623 cv
cp
ef
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g6 <1C60D8A8C9B7917E85D3D67655686D266F095346DBF1C975D4DD04AD23C3980FBB0261E5784F63E76EA1E91CA77E23B7CE6FB429D9654A77DB1B7E073F7F97A6EE98F89B7633A4FAAC1D0A4E0F0F74578F05B7CE4F72AB53AD20DFEFAE5CCD3471DD6B578F864AC5710AFAA7CBA4BC3D68A0ED7E5B8F367698371E4304B19B62C47DCC6202> |-/g62 <1C60D8A8C9B63FB74F1CED7EE013354496CC7EE8472ACE2A1D5DC419071CDD0E525630A7BEC517B060AD6A5A59D22411D73BEAEC469D0DDEEC76979EE7CD> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 53 /g6 putdup 54 /g62 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 /g58 /g59 /g56 /g27 /g28 /g15 /g41 /g48 /g6 /g62 201{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf602.844 49.4375 mo(5)sh610.595 49.4375 mo(6)sh620.594 49.4375 mo(5)sh564.125 69.8375 mo(2"34)[8.37476 7.5069 7.99683 0 ]xsh627.789 59.3224 mo
629.12 59.6734 630.142 60.431 630.855 61.5954 cv
631.568 62.7598 631.925 64.1646 631.925 65.8098 cv
631.925 67.4595 631.569 68.8643 630.858 70.0241 cv
630.147 71.1839 629.124 71.9393 627.789 72.2902 cv
627.625 71.7639 li
628.678 71.4129 629.46 70.7202 629.973 69.6857 cv
630.486 68.6512 630.742 67.3364 630.742 65.7414 cv
630.742 64.201 630.487 62.9216 629.976 61.903 cv
629.466 60.8845 628.675 60.1997 627.604 59.8488 cv
cp
601.401 59.3224 mo
601.585 59.8488 li
600.519 60.1997 599.729 60.8845 599.217 61.903 cv
598.704 62.9216 598.448 64.201 598.448 65.7414 cv
598.448 67.3364 598.704 68.6512 599.217 69.6857 cv
599.729 70.7202 600.512 71.4129 601.565 71.7639 cv
601.401 72.2902 li
600.065 71.9393 599.042 71.1839 598.331 70.0241 cv
597.62 68.8643 597.265 67.4595 597.265 65.8098 cv
597.265 64.1646 597.622 62.7598 598.335 61.5954 cv
599.048 60.431 600.07 59.6734 601.401 59.3224 cv
cp
ef
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g8 <1C60D8A8C9B7917E8528B497DB733C0C3B4AA85F7C17FE50E20B9998473F952415FF2FE6B06DADF86768AE87E77D492960991C6C92168942FE024E19C1291ADA8A229D019EA2576B9DBBACCA5773552985567A8C92EF350AE32B2358CD35DC7B3F99DB1C7B057034C6B4787410D1F7227A4225B870A4D4FA9F499C358F4D16A9DABCB23EF22559225CC6E4434A929117B48779F5A84DBAA2663923DF410BBA9E5B6EC4161A4A45F0181706F0F1A2451145487A2E7DA7FF62D111CBCC397580E5559F485F9DEAB3C973DA1551AEC5BCC7B3904344B0B4C81B40CB2215BE500F4D8E5765C19FEEF73648C5B794B9> |-/g18 <1C60D8A8C9B7876E2474453D05DFE594DE59C2A2DE11A6512183ABF8653919E7DA1B02ABD419A53481A45F1B0F844782B1FDA62FDC4880CDCA4CC5F7A4E60C4C97F6ACF7854423BA456D01D0F8AD1D3BD6221E41953900B696178EC5D5E608D61A2CF54501081BA32B9E17EF79885CC74B97B9F011B54D14B4E71FF18AA67D85BD3CFA78F156783B9D1DB1D5BB2823E27A5259> |-/g38 <1C60D8A8C9B7931D877F70A92CFB2D94CD98AACAA7AA5D4B6EA1E774C4EBBDEB437C77CDE028ED7A840E05FB137F6D94628752AAE413CB7085795FC13151F7570862B8EFFA78077435635D78C1A1AFE399B650729159ECF6CCEDD64D6C9AED0EC40265C7DF25B5AE82376CE354782C8B6415CF801772EBA76DB07D02797D6E12C53963E3F8DBE5B88DAAC4B0FFCD6FE032E816D75FD773722D7F0848DE9C047792D989E2DDAD947ECD98D906F1FDA11ABE43CCCD41B81083755FC1C694F7026F0D15815D80946AE16AA4586DE32518C3AA> |-/g50 <1C60D8A8C9B7EB08620DE1BA1334BAD0AAE06F1D092A42F1123B2BD1D0B0B284AB1493982A42B8315248F987328F62D3E77561F626C59F69C6D4DF3C5C90863152145938F9708415339AC9F1E32031F92E20DD1DB92820BB8DD5918F35FA2916422178605937B224FB33C5E645404BBF39FA4EB86BFCB675E2D4B9E32938F7510ED8BE0C19319B6466515998D55A3F2563C9A39ED972CAB7BB3492B7A421367F75A62C1113E45CD4AA744619DC5327FCE89D437531F758C88A0457E733E52007F7C3D6BB5BB7901C8FE2166540D93EA50745F6FB40FE48DF0AB7D9E1B9D82FE288B8A14147ACF01F11A718E85D0B13E5> |-/g23 <1C60D8A8C9B67031CF3AF1A207902D9DF1EA9784A824A48BE97CD118E2342F90F74DFE2C456D9A839989660D0FF2639B57DA3B39B43880CECEA9B267A09554DE8E8221B6BE830321D18A1AA50B29D92DFF4F3197CDF88539A4DF0F3BF0238065090E229B703F753D2174BFF56D341141B8C745344D53409DDA622B7C54247E38A1EE7F5F28CF5292D18241387CC0D45D81480E92942ABDA4067E16F75EE16CAEA67803FB7DC61A231E7EC0F459764CE53A9E8A8739E62AF6F9BC7E3356CCD8FA4E6D9157FC9EBBCF22A04944DBC741ADB0368E5719D9AB3F720AF9E966A283920E845183002101E1D8351B46AB44D82B8E31990AFE29367D908EEBE831A3F914512080F283AF7145D6CF4C0F6829EA60F4EDDF6FEB23E2F9CD1C6F53546977CD6463A53349D01C72734F76D441CD113C403F2EB09E0ED748B3D9C63A97CB9D59141CBFCE7F11485867AF1CA4E5CBCE8ED1FD68525FC1EF3760A9EC26> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 55 /g8 putdup 56 /g18 putdup 57 /g38 putdup 58 /g50 putdup 59 /g23 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 /g58 /g59 /g56 /g27 /g28 /g15 /g41 /g48 /g6 /g62 /g8 /g18 /g38 /g50 /g23 196{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf601.844 69.8375 mo(7)sh609.594 69.8375 mo(6)sh619.595 69.8375 mo(7)sh563.704 90.2375 mo(8*\(9:;*8%)[7.49976 6.99579 7.75189 7.75183 7.87781 8.8717 6.99579 7.49982 0 ]xsh%ADOBeginSubsetFont: MAAAAA+TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /MAAAAA+TimesNewRomanPSMT def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 33 /g1 putdef/FontBBox {-568 -307 2046 1040} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/g1 <1C60D8A8C9B854D0F13087BBB1CA740A43DAD9701E3526922439491C919607A35FADE78CBF58DEB6F77162B833A564944651E40EB8B1029279A92DA87F1970EA51E0E090EFBE9271A7A54984404D201FAE563EA042AC2F2168613E235EA185B91D3B39DC0CADE02D647DEA9D03A1D7A0C1E2B40AEF5E6B5E30B20C5D70C85702672228> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IDXBWI+TimesNewRomanPSMT /MAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut/IDXBWI+TimesNewRomanPSMT*1 [33{/.notdef}rp /g1 222{/.notdef}rp]IDXBWI+TimesNewRomanPSMT nfIDXBWI+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf556.089 66.2375 mo(!)shgsave
641.617 110.344 mo
669.851 110.344 li
669.851 19.2965 li
641.617 19.2965 li
cp
clp
641.617 110.344 mo
748.704 110.344 li
748.704 19.2965 li
641.617 19.2965 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 87.193 352.26 ]ct
[107.087 0 0 91.0471 554.424 241.916 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 227 
/H 193 
/M[227 0 0 -193 0 193 ]
/BC 8 
/I true
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 227 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 227 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 227 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 227 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
lMuM:JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcP*:JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&lMuM:JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcPWI!!3#u!!3#u"9AK*!!E-!!!8_l
M?!\Z!!<&u!!.]PV#UPu!!<&u!!26_JcLB&JcP-;!!2fo!<NE%!!!/u!!!)+!.k4K!!**%qu?]uq>^Kr
QN3BQ!<E9"!!!)s!!!&s!.k3&!.k4:!:Bgg!rrB$!"0ioTX)5E^:L\EGT`maM?!VXqu?a5AI4<jXKAV*
V2\t%Mu][S!!<&u$Q!B3TW+rkVkT&Y)=RWX!4`(9$:gZ<i8W.a8I3fGJcOU,!<`H&!!318YPGp5^AbkN
Y[de8!!C":JcPQG!!<&u!EGcbXTb=o!<<*$V#Z_[!!<&u!EP]cWr]6$#HOnq;?6at!f?uW!!*.Tq;qk?
jlGQ\!U9Z:!6Y?H!WW3'!*Z]*^B;3b^V9T[!O>f+!!!,O!.k45!!WH(!!3-lU@G>dUIG.^!!9_3JcGuU
!!!'#8tZ!]"0/E&Wr&gtTL\t]!!8bmQN.V`j5f@bj5f1]jPo=aj5f@_Sc/V@!42_-R_QT9^Au"I^Au"B
^B']'r;Zg!lMuM:cN!s!mB$D@!W;uu!RLgu!9sOcK<)$OWrT1!WrT0oWr[bPr;Zfu[/bp]"#oB#joXW+
hu;aCiTB:_k2tddroO2:PQ7HY!unAW^AbkL^9)Z@rP&LrH)n]p^AbkMXq^p:!rW+N!58F6'V,'&!h3^O
rN-,PA=<=s"J$)(!!2'ZJcP*:mf3G(RB*@eWroAhA1db\"YF8OX/i9"Ws"h%!!!&)!/^a]HKO/JjlYQG
%g`6ujlPV)$#ntfiT9+^I$+K-!!*qBr4`B"-ia5JrP/=3!@a<3^BCkV"98Q$!.k3f!!*b-r2g!M*rZ0<
Xo8;$++X9k"JcM/!!;'YJcOU,!>D.(Wr[\lrW)ntrVusAJ,H>MTah,(!lY.k!;?HtS*&kpk2n;p!!D?E
k2cI@!&"95!p&L=V>uh\!3Z:8!O4]`!<'\4!"/c-!'@I#^;%Fc!!3#u!s8N'!VZQq!WW8r!!!)6!!!/u
!!!,t!3ZA&Sc,YkTIp'ArN5tt!A:)EXT4ph!!!)p!<)ru!VQKn!PJI5!r;ls!oF"#!!&JdWr\eEquH\r
qu?pSSu\llX.&nc!!;cm!!2cn!!2cna8c2Aq>^Ks_uSm!"b,UrjQ;R$!!)-[k5,,^P3(]cj*nQ>L]@SZ
!!*'$!!ek*^V7IU!<W0!rP&R;"98E&!!/bk^As`%!!!/n!!!&+!!3-#!W;uu!N,o!!<@`MXTFF]!W2rr
XT8D'qu?eXXfVZ,XbH`S!!7uW\c<$;!.h2OWiM!W!W2rrWrW2%qu?_SrMopNrVup"m/V_<df9P+jQ>F`
8,<2cjo4E=!!PsVjlPV`c2`Frmf3>hrP&B,!r;oq^B"<:qZ$VhrkAKJ;XaYd!r)`q"TAB$!Rq,5!!!&r
!!!)&!!#IdXTORa!!)osrN-)#!rDrtNW#sZ61=jS!VcWp!jr%*!!!&%!!#OfWr\+Zq>gJp!<<2u!!%oU
Wr]4er;cHi!!2ip!!9>(!!2He^]4N"jlY\tq#CEVroX"V"A.b:k2P>"JcP*:oDepn"g\-B"L8%.!!2ut
rP/=3!!3#u!=5t0^AtV=!!!&f!!30$"oSE$!RUo9!!!,r!!!,&!!*1rriH0oq>gNqrN5kq!<o.qXT5-Z
!!!,4!!!)r!!*'$X8i8'TDkkkTD/EbX8)_r"eP^o!295hmJm4h\c;^3p](9qkQ&O$"IS?6j-9<="6J\-
jS/]XOQGWeU#,j%!8mhW?2_M>49,EY!<'Y9!!!'#!!3'!"ZjE5^;"4H!!39'#5nN(!<<-$irIg6!!N0!
"TeZ("98S4!;c`r9Dtsm0DGPGXTAJ&!W)is/cDdO;=4Dc!WWA=!;6Bm!rDs$!<<*$!!9>(!)3?l!&40J
rN#qu!!2rs"YQjVWiK%c!!33%"LS40!rDs$!<<*$!!<-"YlFmgk2kb"!!)-[k4\iYk2t[c!V6;C!6kKH
Z+n&fRJd*c"8i/t^B+B8!r;lsRf:&%Y3u>j!W<!!&YT*;!OmdW!6P9A!W2p&"98H&"-0!(`rP<'!20=n
!/(4M!!<&urN-,$!!2or!/:ES!1rHU!=b%eXT>D>g]643!!<-"!s3b,+Kb\FSZ;gmWe10L!!<&urMou"
!!2or!/(9O!1N0Q!=aqbWr]&8_#X<3!!<-"!s3_(+g(eJNTK<[2"ptMjo4E:!!G7Ck2V!V!!Z$Wk2YU<
'X[oA+[u#']`8*7!%@f\""=3N!Vufp^B"E;qZ$[!!%7`[!%779!!E3#"X:[p\P$W8^V9aY!rrE'!<<-#
!!C!N6i[8C!7h,M*rW2@+85d6XT/G!!!30$*W<)?*Uj%/!r`0')6L$@4B2<^mf:`8!Wi?'qZ$^"XfXLr
!:^$h+8r5?+SPm7WrN4t!!30$*rW,>*q0.0!r`0')lfp84]VK^e,\h8!Wi?'qZ$^"X/e1^!!DBDjlZF?
qu?i\k2tau!!D9CjQ>_-#N=X_!!2-Bk.(Kj!<;2a!!IP\^V?oE!<'\/!!!'!!!]O>^V4^h!:Tsk!s$*N
U&G#n28??/!!L'O!!!-#!!EhI^Bao/!5ed:AH&\2S+Zj\XnD_pRf9Dh?1%[q!W]@)NrB"Z.]i]B^&S;<
XT/>&rW!'/XfVa-dfA\6oDf#)WiN1fp&P&lp&G5^X/i7,mJm@k!3</ZrW!!LX.%E9mJmBjWrN,$rW!'/
X/cC)YQ+e3iTB6Fp](?q!9O4Bp&G59k2tY,li7+Jk"P^R!TSgH!!2-BqZ$ZtjlEQE!20>+!-e,:rP/..
!s&B%GlGGXU&4o]!!sIV^B+B;!!0iUqZ$Tuq>^Nt!VQKn!W2ot!W;uu"9&9#"Si#t"82^"!rr<T^:aLK
mf3Ll!!E9%!W<!"!WW5?!!&#XXT2i(!<'%n!!$R/XT4CK!"0FAXT8D'!!'--!!)rt!!;us!!2?b!!<-"
!!;rr!!;io#6Fl*-EX?L!posf!r;ls!TX7>!!%oUWrQW&!<&tl!!$R/WrS+G!!s:=WrW2%!!'',qZ$Tt
q>^Kro)SOc!!<-"!!;rr!!;io#6Fl*-E=$F!posf!r;ls!Qb?>!!#Uijo>Y[!!DBGjlZ7:":4/Pj\5"@
!TrJ@!!2-aaT2#7!TD_.!!'>(^ApFq!!!-!!!!&u^]+<6!<3)t!!G?t^;$uA!!EE>^V9mH!!4*7+8l0R
!?)dT"TTlD('"C;3)9\X!<G&J#5nN3-qOsN!!PG]#64`*4@'DR!#u%F3`7F4$:Fpq!!BgI\./r`!!42Y
0+e0a!WW3'!":t]0E(q\!<=ZB)ZTp@3*-+\!!:7B!2KOq!&4?O!!<#trN5bn!%n2P!2B)cqZ$a#&?W&9
q#CI14r=+s%20BT!rs<(&HDh4.mF.8!!4W1"T8<1*]jc1!!=i="TSN'0/Eq4!#bkA/O:K_#;uS_!!94'
W<rqD!!*iK,Rj_R!WE'$#qn@cqu?sF3tqYq!@pV<!!!&t!6tQET`1tl1&V(P!rDurX7cMr/uu"QTC)[^
!YDE5!r2ft'L3N5!"BVU!!<3A57mkr!A$M=rW!!L3X#B]%NdeA!!!*S5m75g!AH>:qu@W9"YN+b"U?se
!!!(uX/-.0&HDhJ'."(f!!3'!!spYD-2[`J,!6P>!<F`ArVup!i;i*B".eQ8k4J]VjlGRco`,*VioZWp
!!20CeH"Y1!m]rEV#US0^VB`^!5@U1!5._""9KFT^R+m!&-2b2ZbO5h&HDh3J%iYt!4;a?!<Z-r^B"O#
rP&FG!!'>(^B"I3rkANK!^ck#!#GP6!<ITE^B"?8"1Z+\^AYeI!#GRK!FGp-!"'(C^V7Fs^CgSJZi7]?
!CZn$!=AkK!!'+]Xo,:$XR6&k!>DT;K),HIV#IIr%K6>2Bs"K;!2TUr!<PLaXT8PWrN-/1!!&bmXT8Jd
rN-)$2#XNV&cD\0BDS_3!!'"pXT8D6riH2q!WE'"#H@X'!=f,2!2TUr!<>%VXT/UH!!'"qWrT0^WrT-e
!!**6!irAQq>^YlX/`30rW!+9WiH+"U&M(n!^Zdc!<b(SWrib1!20=l!<PLbWrf:%2>sQU&cD\0BDSY4
!!&jrX/c-!!<<`2WrYrrrW!91V5pVrX/c^2!29Cm!<>(WWrNCq!7h,ff]M;Xj6#L`k2b[djlYUbk2tdf
k2kaek2ZF&"m"h.j5nnZ!!;<D1&:kPUZULsr;[!2i8t">V>fT^!!)*Bk2cRCrT=(Z!1WuM$NL1hjQ5>#
!9WD(j88le$g-R5jl>C`!!'q!k2PM%jobYaj6#M$!!U4$hr<eYrW!8"jQ,G'!9W>'k10P'!!*/8q7d$G
^V@MO^Au"H^B=N<!!!&o!!NE(!!*'%rkBDN"TSZ*!5H9\^V(il!!T[CT`DjBA\Z!k^QE(*^CHo<^:ndk
^;"9p^Uq7?C&Pe,T3o@JD$0h=R(g<e!"co[[f?O7A&#c^)^?'t!#NDa'*&+7$GX?S!s"V$^Au$`?ba@b
^R8KE^Gj46!!2eqkcFjc!V??l!W;uu!rf;@Q3.*g!!'.';m!,>!!!+qXc<C`X\u:'X0$bHrN-Qh7BN\$
!3NA%Xf\\,G?+UD)N.=lX]Y]*!.q>T+oi%RXf)4$"&Q,%8JE'S*WQ0QXfW'5!WWJ-Xd&qfJ?>pRXfY="
Xf8FU:9CWJa8c5AWqi[tWiN2#n#HGgrMor!!V??l!W;uu!rf5>PQLme!!'(#<3*#=!!!+nX,I%ZX&H("
VlP/BrMpEc8#iRu!33)!X/i2"G#nRB22G#.X',Q)!.h/N,6/.QX/#^s"&Z,"8e`6V!!!Y4WX]"1!!fR*
P6(`6X/c6$X%o^rV5o1M:TLNH`rH+srT5$ZjlY^bk2t[cjQ>Rbk2bXdk2YUck2b[dk2QC&!9<DG"6Sb,
AGlK3!9WDEk2#t9+-u%_!9WDEk2t(P-3<8ik2o58io(+BiT:1'j4302!r_6a6NH61"9&9%1Z@Kq!!;<F
]`%m4!TiJ?!!23>qu@Dmj^J2i0';9rjlQR*jM0e6!9E2)!:'XX!!*/8q7d$G^V@MO^Au"H^B=N<!!!&k
!!36&,6#=a^'Oc>!Dap?^V:fg!!^3Q;#jH;!<0_JAH2_E^V>F%!4'@a!*(6D]t_<n!!3)6"+pXTZ3S-i
!!"@\^ENRV!kH%!rW!?T^V9aK!rr<%/\f%'rW!#3^:4(A%hudn"\^*D^;%F0!!0jL<6,%>!V<GZXT8D&
n,NLk!#ba;!!`E&"[<n*XfWB<!!]R-5QF%e!<0)%;?-^rXUf:L!2?T*!(7_*XKAU&!!*##$Z,nEUTJ&,
!$&,C)?'U;Wi^4=!!OFGXT/>&rVupB!j/R+rW!##Xf24!"qRi<"$IM(riH?9!!'.'6c]6.!NPsr"0/E&
WpctgWr8t!!!3'!o)Jgn!#tp<!NHA'!!PY.!3<.9rW!/'X$H_O)Z]l<'iP)4WiN1<!!&[m@fSt<!33*#
;ZHgsWs`bF!2-B'!!"%?WuCs;!iDu9rW!*DX/c4#!r`0%,HIjHrW!"uWhfUo%M,V@"$RY+WiN14!!'(#
!(Fp.!8mb;)W^#Bk2POcio]=ajlGRbjlY^ck2kadk2kabroO4@lMq%Kk2kOu!!3/\k5>8\k2cF?%cc^6
!<<,Xk2m<W!1W*Vr;[>`k2l[E!9E;)&c_p&j9becs5s7[!lj15r;Zl[k5#&Yj5p4>!n?5Br;cl[r;[)^
j5gXK!9WA)!9!nX]_fGD^?301]^c%&"T8<%!<<N+^AnZ?!!s4N^BjlB%DTXmrW!62^V?TK!!L'O[f-7,
^B)))rW!63^V?QH!!'dJ\GcIC^V;`.!5-(K!!<3$^:u6"!!.efZ3:(*!ft+&rW!$?^V;W)!!sX[^E*IW
#/@pTrW!#6^E1T!qu?_uhlQm[nc/XkqZ$U%rN-&*r;[-4XfVd-!XZ!2&H2Y9#-G"k!rrD)Xf24!!j/RP
rW!60Xf[]e!!'.'WVul'XfX)R!3E;m!!NE(!3N@IrW!%=XeGmp!!7JKU](5q's4SerW!6>XfW??!!KF+
SGiKiXfWAZ!!'"qWrT0kX7WFmWU^#h!rDrt#lUe(#lO`0%'$?4!!3J-Wt>71#mRH2O95IaX/i&q!!94%
-iO)P#HOnd!WW5$Who[p%]cW]!!'"!R/d9g!33(ErW!%=Wh0@j!!7DGU&G#n's"A8.K0;R's"AO!WWA(
X-rqe!ii:;`rI"0k2kack2t[cjQ>Rck2YRck2kafjlY[ej8J*DjQ>Ubjk',)pAb<Xj6#M$!!2'@r;Zl\
jSSuZk2TYE!!;<F])D[1k2Z@>!p8WHrW!#]i5,Bms5s:\!nQFYr;ZlXk5>8]']PMW!!4A+U&=rlk2Z@>
!TW;?!!;<FHN!mFio^%:c2[jMrkAFrr;Zg"qu?]trP/:2rrN#t"?O<3^U!A0!!3'!#Qau,!2dNFXT\V'
#>DkH"98E]^Au"H!"V*)^BFT<&&5ju!!*>>^BXZ;'K*Y>&c_nC^V:Ze!sZNS"oo"F^FB-^$kpCj"Te`*
[_I1i!!W?%*Oib2!!!%]^V9aK"TTLV^BO]=4MSW8!!!\I^BObt!9jI`U].@q0`:tO!rDurXnD_p/cMjP
U?qp\!WE'%Pc_'X!r`0*4ftgf!!"OOXo/51/?Q#V!!!D/XV:a8"g+m0rW!!LXfW0F!!!G0XV1[9"Ked/
!!fX.+8u6K%]ui8!<E2!X_.V6"9&9%W3'b4!#L!aXT/>'!#2Q;"98ETXfV^+!"Q-5"9HRD!hcTp!NRsR
!!!)t!<&tl!!FpTWiMcZ!!!'!!!JFbWgNqf!!kcgWr`8$/?>fL!"UZ^Wri>%$`g<B!!!2'Ws&D%'Ip/`
%KHJ;X/cp7!X,R("98\-X!%BA"V.T6!s&E,!2QZ.!!!-#!!8srB`7uJH)mtG!!<38X/c@'!&1IS"98E3
X/c@(a8c=5jlPXt!!D?Dk2l=;"TSPbioZWm!!?QiiHkD%!TE2>!!26@qu?cZk5>8\jlZLA!TiJA!!2->
r;cl[r;Zl\hu3WUk552[jQ?C@!kRM%qZ$]1iXGed![Hjiqu?f\joGA\s5s7[s5q<$!20>+!-e,:rP/..
!s&B%GlGGXU%/0`!W2rs!"]1:^V9aM!!&t4TE"rmW5#_=!"T*k^U=1E!*R(N!W`:$^VB^I!g(1+rW!X8
^V9aM!)^JF!!!bK^An?9!.V_qr;Zo6^EWRU!s-0O,5qQDZbN+1!!l`B^B+B8Nk`%%!!7DZ[da@K!!&#X
XT2i(!<'%n!!$R/XT4CF!"#F&XT/A%!1'aHrW!"cXebmq!d^uI$NU5-8$/lo!!#EhXo/5$H`a:H!#.r*
XT/A%5cq-g!"c97!!3-#Bs"K8!!9:))>aC8XfWK?!!8ptMZ!M\8$/lo!!%8GW;ZbuA?Df]!:^$hMZ0XV
@eKg#X7cMnAH&V0N9C6JTW>*n!<<+aX,?lV!gKaZr;[=PX/#ar!(j5k!<<*hX/l1!!dUiCrW!'mX/c4$
%fenqWrN,2X/c4%!!$`5WVleuX/d3:!!94%)u]g=TrX"J!!l/sWrW2#GH7P=!!6]2UrEB78cIiP#Q"N!
!!DBGjlZ7:":4/Pj\4k<!hJK9r;Zn0k"5OP!bCAgr;ZmCk.(?i!Tr>=!!20@r;ZmDk.gip!TrMB!!2'@
rVuu[jo#/\%cZ+=!!26Dqu?g!!9WA@!!8kV6Mpfak2cLA![$R9rW!!*i4?o."F.Yq^TI20rP/1/!!3'!
#->SS^2a5Sn,NFhqu?eV^VB^I#f",;!!!/:^N08Q#eRj!!!3/#^S(Q+!i<Z(r;Zo2^O,q[!iWl.rW!G,
^RkK+B"u(^!!*)7^RG-%!Z8\eqZ%0G^V9dL!!L'OE<-%>"Lc(SrW!#4^O6"\"Ll-t!!C:B!+c)2!1WZ^
rN5bn!1Nnh!+"dg"*UfK!<)s(XfX8W!!9:)?2Xa/XK?+8!<ALhNW&nZPHBcA!!94'B)Vc3Q*$,H!!njl
MuWiVXfVX'!!9:)L&M&R'<SD6!!3h9Xo8;&!j/S1rW!$%W3*#t!!97(BDql6W3'k9!p]jP!;$6oA?)]2
R.^OYX7cMrQ`I0e?K_@jFK;J@!!oX+0`V1TX/fS*!!oO(B)hr4QE,oB!!87_M#@;TW2jP0!!8@bN;`eX
PH+nE!!$!!Wr`2"!irASrW!!5X/l*t!Yh]9rW!$%X/fP*!!<:uX/,^p!i`55rW!(sX)%b;a8c>KiTB6F
p](?q!9O4Bp&G59k2tY,kPtZ(j5p4>!T`DA!!;<F"oSE&e`I8=!!7!!8cA\k>383N!!:[4$iU,-@cU;`
!!cuq70!;gj5p4>!p/N&r;cl[q>^NX!9O.Z!p&JHr;Zo1jh1Qm!nQE?rW!#4jUoQ6!W`9LrP&F`!!*,s
!<'Y5!s/9!!Wi?LrP&=[quHBi!s;rG#5nNGHG?ok!WWSB^CC5I[_KR"!rr?%^V;)r!!'aJ;ult"^V<)6
!!r_A^EW^Z!PcBQrW!GC^Gu8qEkf3e!!&\,^HMPr+%3lU!!!$(!!.2V[K$=.!5H:8!<<*+^V<\I!!L'O
,lRcF^V;JB!!")=XT0I;!<'#"!r;lu!<=/=XT0C2!!<9tXT\S&#%ap9!W`9+$*C<:!!B1%XV_-=!!9:)
*<#p>XfXti!!9:)1]@@V!NiIBrW!#%X\&Kl#Hb*Z!!-B-X8W)$NNK<:rW!!XXfVL%"U"f*?`g:*!!9:)
K)P`V#-G!o!!!)&XW.6>!j/ROjoF??!$D0?!$M"9rMoo"q>^Qt!$;*>!$:V0!s29!"T8<3AZMX/!<<A*
WsSh/UoUO6!r`0$X/d9?!!91$7K*;eWrP!U!!<8&WuV*=!ir@orW!2(X"=;P?E:%(!!A+ZX"jSR!]R0Y
rW!*)!!$E-V#:8pX/ggN!!rk1X$cpf!ir@ArW!##X!Z!iqZ$`\j5oFs!!D?Fk2c49"68M(k3W-Kj88lY
$KSr"!!20@rW!#2k2uRA!TW>@!!2*Ar;cl[qu?cZk5>;[k5>;[k5G>`"m+25!!<3mk2uRA!TV`-!!3>d
\GZC/k2nDs!!26Cr;ZlZk5>8\k2jM]"L5_V^7"p"!!E-!rP/@4!!;us!1No%!3Y_i!hR//rW!$$^V>m0
!!O1R^Bah,rkAmB4h^nC^V9mO!"6QV)u]gX^V:s5^B>^p^B=N:"i%ee"98V>^F^J@GJClp!-A.S((Ctm
$@9J"!<BF?!<@;W^AtQo!4KXirW!##^VBaJ$m37!"98E-^V9b1^B)CU!20=n!/(4M!!<&urN-,$!!2or
!/:ES!1rc^qu?eUX[`6h!j/SOrW!*7XfVa,K)Vk]!&1MT*3H=E!!!;,XVCa7*NcF](9IWUXfVX)!!B@*
&-;h6XfWc_X^\E7!WZR+XVM3RXTrF>X8i6pXT/?0XfVSuE<)r>BDql4RB<Uj!"0UFXTAJ&"g+m,0!5!N
bl@m;X/i7Pr;Zg!quH\r!WW3$q>^MJri6$fmJm<EX%<0h!irAJrW!*7X/cC(Jc;\Z!&:JR*NQ4B!!!;*
WtbO5*NQ4[(97KTX/c:%!!B:&&-;h6WiI?[X(&-1!WZU,Wtl!PWs<4:W;lpkWrN-.WiH,mDuc]7BDql4
QE.(c!"0XEWr`8$"fn[(0<="2kPtaFjlYGWpAb3TroWqT"?5K*j+-Ot!CGrH!!;<F-2dfRk2lXD1Zmi[
!!(pW!9WGB!!26Dr;[/djo>DD!!)'A!<)s!jlZLA,iRea!94=Hjo>Abk2bY)!9O7gk10M4S)s\N#2nVD
SJD48jpV.g!cI)]r;Zl\jo#/^j5g7@j2V-#?,-BR!^$G`q>gK/"TSN(!!!'!!!PEu^V7Hnmf3=grkAef
(L"Sg]Dqp5!!W;8!E?f4^BCqEI_WMo!!4sk^]"3E"i%g]^UsSs^:O@F"Y[X)!WE'2^V@4l]+D`k]XPY$
]>)+p^Ao*2^V7"g^InV.Fhb]&^Hhm2^V<MRXhVR]rW!"E^V'OG!"/\>!49cH!)*9m!&+*IrN-,$!!2rs
!%n/O!)`.ariHN?&kT4-X8i5$!!E/$!(6^e"Jl*4XfMF$![t1QrW!H2Xf\S)X8lt:WrN,%,d"3I!"?!3
W3**/Xf\\'X^nL2XW%6kXf\>"XZQUa@'-Q3XYTrSXfXboS?8n%!!!*$A?Ds4!!!9&XT50;!!#^kWrOjK
!<&r"!!!&s!!P!UX/`3umK!6e$>0uDX/i3"!!*'%r2TieWrB%%U&\o.W;Zbu.''EJ!"T14X/2kr!,8I3
!!!*IX/c*u.]]VGX/HH-Wi;epA>lQ0WiH+OX/_emX$$I`@B6H,X#'fSX/eJmRB*=rrW!"1X/Z'u!!iJ'
!28uae,TU5k2kb"!!)-[k4\iYk2t[c!U]pnk2bY4!!)0Bf),OHjpU5Mi9'+_X8i^le,]IJ!TW8>!!qZI
^ZF&I%cPq9!!26?r;[YrjLXF%!9W:l]]9CKjQ>I`!!)-?R-*Q1!"K4qk0E)h!!26E!!%?-ir&iY#ijS9
!<)$[W7V+?!!30)ZMqTAZ2jq*!W2rr^]"35!W<!!#dOBD!42V(!!2`m"T\T'T=ho:^G1'8!WW3$!1Ua<
],LaQ^V>[,!2.*"!!*(3^UO7E!!&k1^S(W-Ttd3$!!$ND\,ZL1&-/]E^S:c/AA>gm7f]!m^Sh&2!4MmA
"<mjH!$V?V!$qOD!HPpR^Bg_D!!!'#UVEE!!!TmH^5r<qa8c5CUAh7pU&=uh!<'%q!!*7rriH0qm/R0F
XSf1%AcMl1!"OacXfE-9Suo,<!!&"\NW&nZ;m!%t!$[T.Xc<A]Nie3?!!#itW;lo!!10giO8o8XXfSWb
!/7PWQ2Ua`W;`n#)#sX;!#bd<!#tn;!+#Q*#aGSo!!*(]Xc!&W"0&E)Hc?$d"/#Rn!2'#drN#_o!<o(o
WrSjl!:^$jLoIEQWrcl5!W<!.KWD/P'EFT&X)n=AMQ;X6!!6-#V>UB<O/o=?!!%qXL]IJU;6-Mn!!*(b
X/h3[!)fktX#^65X/hE_!!&hoWrO+<!!!r:WrO.=!!-E+ri6<f"onW(!0+%8r;ZqrWiC?`!!J\Ok2V^$
!!D?Fk2c:;"H_a-k+V/B#=I/$jlY[d$iU/*!"M!KjjO20JE5i4!!#UQ8cA\k!Tq5s!!l`ik"GaT9'/M?
!!32^_>O?EB]eGS!!!&^hW=e<2s'10rW!&3k2k_&!!;3Bk5>8\"lTCB!+>^)!`A)Hr;Zr;iSc$H!:'XU
!!$+!^B(#0q>gK/!<<6!!!&\k^B)&Hm/R:k!!E?,!rW*4"onW(!!3<(!rr<)!!*'#!!!*&r;Zg!r;Zm&
!s85t!!<&u!Wi?&qZ$U#rW!!#!sST&!!;us!<EE%!!*9+q>^KtrW!3)!!<3$"U"f/`W-!-rN-*\!W2rt
!<'##!!<#t!0-rZ!(#uP"T\T)!<WB$!!!0#!!WH+!!3-#"8`'!!Wi6"!!3#u!WrK)p](9pqu?]tq#CBt
r;Zj""8i-!!Vl]q"T&0""9SE"!!<&u"p+c)!s/H)`W-!/rMosW!VufpWrW2%qZ$VRri6("6M^]S!!NB'
!W`B(r;Zg#r;[$&!rrB&!!E)u!<N<#!!!&u!!36(!VcWp!W2ot!Vl]q"T8<$!X&?#!!2lq!!N0!!<`K#
!!!)u!!E?'!!<9'!!C1?"Qnh.k">FL!9O4Bq#COhk2b[ah>i--j8]Vi!!*'$!11I8^;$<A!rN&s^BX`A
!!!$"!MKD+!1Nle!!Mfl!!E)u!!N6#!s&B%"nhor!quZp!r`0)!!!$"!rrB)r;[!%!!3-&!rW*$!<<*&
rVup"r;Zg#r;[-)!WW3$!!*'"!r;ls!r`0"!WE'(!WW3'!!3-$aoM;=!W`:QrN--[!!2utrN-)#!rN#u
NW#sZL&M&P!q?6j!rDrt!r;ls"82]p!VZQo!Vucu!WW6&qZ$^!!!32t!!*-$!WW3$r;Zg!qu?]tq>^Kr
q>^Krq>^["!!!'#!Q"gC!<@\OX/`4X!!2utrMor!!rN#uMZ'RUKDkiN!q?6j!rDrt!r;ls"82]p!VZQo
!Vucu!WW6&qZ$^!!!32t!!!*"!!!&u!!!)u!!!&r!!!&t!!3-#!Vud"!<<*$!!0k8"Yo*#iT<Z,!!)-[
k5#&]8`o-rju;f1JcNpn!3Z:8!O4]`!<'\3!"&`,40cQ7^V?oO!W<!#!rr<%oDejmrVup!p](?s!!<*!
qZ$g$!!!'#!!N3"!W`9&qZ$U"r;ZfunGiOir;ZfuqZ$TtrW!$$!!!)s!!**%r;Zfuq>^Qu!!;$XjT#:O
rN-*n/c5VIXo&/"/tr6G!1iue!!;Zj!!2]l!W`9%oDeso!!!)s!!!&s!!!,Z!!!&s!!!&q!!!&m!!30$
!Q4s=!1Nke!M1qA!<&tr!!Y*JX/`5$Rem'b!q?6j!V??n!<</m!!<6%!!;us!!2rs!!DBaq>^KrqZ$Ts
q#CBqo`,$o!!0t;"b,UrjQ;R$!!)-[k5,,\P3(]c!TSW^!4Mq/(pa(S"I1A8!!3&5rVusJQ2JB"ZP*HA
"7#r=!7CiJ';GE,!Iu6j!<'&!!!+0lr2g*t%KZV3ciAXtm/R/#T_thkIinXirN#nt!?cmiWs#++!WW;0
!/LUYS*&kpk2lXrr;Zr]jlYY&!!"YNjoXW+UQtnT!!=1B^V9]^"2:m_3W6\r3I.[?^V9]^"KiI>!!<*!
JcNLb!>M($XTFu&/H)[P/7b1GXTY1+!!!&Z!.k4:!:Kmi'Uc#%ri6.$Qt.fIWs((cQ`I0eri60i&-)\2
YlKX]#C>Ojk2kabFq4lZk2k^e!"!W*k2GF^k'W<lU]:Ib^V9]^!5AHI!5A3B!LNre!!!)t!.k3c!!%`?
XT="Sr;ZfuhuJ?/g&M2,X/c0"!36%!!35do!J(:M!!!&=!.k4D!!YCEi9'+_hu;aCiTB:_k2tddroO2:
U]?Y["p+c)"9;W2qnE<K^V@Lt^\tnJZ<.#*!!A/[YQ+k.!!!'#8YYaW!M`*_!!!)i!.k3o!!WH(!!3-m
TDPYkWiN2#ql9aj8,`Jg!n@:&!8mhhQK.&gk2YO]k2bOak2YObj.3RXJcGiP"9JK%!Wd#=q7cpDrkAW@
A-)`2".]F^!!!)u!!-)lorSCi;#pXs!eLE]!!!)u!!-,iq5XLqri63m;?6at!p0K7!6bED!epI4"leY)
k(s,Z!.k4:!!36&!WE',*dXKb]Y;+k[%MXdWW7eS!!<*!$ih&SN2*JVXfJ:X@i17,U&Y/pqu@*@AW!.[
WiDtkMIROq!.k3Z!!s!&S^u`YdAfbDf)UC&lN$AR!!2fo!<NE%!!!/u!!!)(!.k1Q!!!$$qu?]uq>^Kr
PQ70Q!<E9"!!!)s!!!&p!.k3&!.k4&!!!&u!!!&u!!E<&"98Q%!!!):!.k45!!33%!rN#u!N#jK!!33%
!rN#u!K-r0!.k3k!!!/h!!<6%!!:[NJcOd1!!;Ec!!0Y2JcP`L!!;Ec!!/\lJcLB&[K$:.r;Zfuq#CBq
q>^Tu!!!&_!.k3&!.k3&!.k3&!20As!<W?&!!*5s!!!&s!!!)t!.k3_!!!*!!!!)i!!!&X!.k4:!:0[c
!rW*!!q60i!NuKT!.k3L!!!)u!!30$!Vl]q!rDs!!<<8r!.k3g!!!&i!!!&q!!!)T!.k4-!!!&i!!!&q
!!!)9!.k3&!0dH`!WE'!!r`0+,^#lf]"c"lZCqAE-NXGJ!!!%Z!36)"!WE'.)dnc%X0&M)U5i\'!<VNd
JcNdj!!3'!%3/f:TVnikW1]&X*WZ>g!.k4+!!rj.S'gBZe!ir7YlK@UrVup#rW!18YJ7ic^V@JZ^C%,N
!!3-'!!E9%!ho[`!!!*"!!cGoXf\\,XfVE%"eJEg!<<0(!!3-#!J^Z_!!!*"!!cJlX/i8$X/c&t$CX]i
!<<0$!WW3$lMuM:bQ%kKKB)+Kk2tP"joaZ*jab>NJcP$8!E?Dt^BVEe^U$o?!O)QX!!5N_Xn&RpUI::G
TE#!]U%GAgWiN1o7eZn7!4i.1U&=$SjlY_)j9=].iTB9pgAlg*lN$;P!1EAl!5AHI"IK/j!!9A)M#[O/
qlTIl"G-US!!/>bU]:CHnZ)Yiri60Q!!*'#q#H!H^AnEpjQ>L`jo4BNjlPXdk2YUdiTB7a1YMh\!8IPU
(pLaP^Bpoa4VIer'K(<<qnE07(@2#%!Wh`i!!2Zk!X&K(quHNm!!W#q!s/H&"T&0!!rN#u!rW*!!os=]
"Npf>!!*b*qlL0l@PA8l!"UPmQi!lcSe:;h!!1sW!!;]k!!Dlo"T\T'!WW6!!!!&t!!!&u!!!&\!!!):
!!3h(Wr/n'Q!uHX!!!NZBE4=pWr\Y$li7"dhZ*WXnc/Xlo`,'p!!!)t!!!&t!!!&u!!!&n!:Kmf!l+d:
LZ/6p"68NY#Q"K($u"bbjo4BBJF3Dh!6bEF"TTLIr4`9#-i!`G!<=R8^V9]^!ji[Cmf3=ir;Zm#!!Dur
!!3#u!WrE&q>^Kur;Zg"i;`i[qu?d"!!E0"!<WAb!!30$!WE'!!oO(A!!<<''VkT.!J;Ee!!+0nr2g!q
&FKMu!rW*#!<<2m!!!)q!!!*!!!!)l!:Kmf!rN$"!<<3"!!!)X!!!&>!!!*&!#2+(Wr[enpAb:<JZGgM
Wr\n*mJm4gr;Zm"!!;`l!!;oq!!<*!!!;*Z!!<&u!W`9&r;Zg!hZ*WW_Z0b/j6$@&!&X?K"Yo)tj6#J(
W.P)Z!!'8%^C.M5!!!*&!!!$"!!W<$!BIXf^B:V>!!;Nf!<E0%!<</s!!E?'!!*5o!!!/]!!!6$!!!&R
!!!&t!!!&l!7CiIT`(trW@n5O!Wi3!!!E0"!A(5KXTP-p!!2$Y!!3'!!!;fn!WW3%iW&r]V#]l_!1j(h
"f3mQ!!33!!!!-"!!+[JrMp$h!!!&Y!!!'!!!!)l!!!)b!;ZZq"H`ZgMrs0^k.^oe!!U.!k2bQQQN4)e
!!2rs#arHA^V@Ls=T\R&"9JQ'!X&?#!*T36!1E`bo)JakpAbC!!!!$"!!Vfk!!2cn"T\W(!!*5o!!!3$
!!!&m!!!&a!!*3&rVup%_uKdiqlKlh!WE'%!<<*#!rN#u8,KCgKAuq4!<E&u!!D'X!!;`l!!CgQ!!<*!
!!DKdlN$GT#_K+WX/i8#8HJej"9AK&!<W0!!(m'g!.s52!!2ut!!D'X!!;rrqZ$Tuf)PdPr;Zg"_uKuu
k2GIbi8X\8o`,3Wk2YLajYW5&Y5eP(qu?_"qS*9L=Te^)!<<<&!!<6%!*T<9"hqac^V3eG!;$6m!<<9%
!!!0$!!!&s!!!&j!!!)l!!!&k!!!0#!!WH(!!**#!rDrt!os=_!WW5C!!!&t!!#ObXT:onr;Zg"qZ$Ud
q5jWclMpndrVup"q>fp`!!2-\!!;lp!!2rs!!2-\!!2-\jT#8]qu?^gqPs[t8HShj!!E)u!(m0j"feW'
X/\\U!!!*"!!!)`!!!&r!:'Ub!quZp!W)is!TX4\!Qb?;!!D?Dk2cO(!9*ML#NOt.io].\ihujD!!*5.
rkAKB^AbkJ^0LX;!Wi?&rVus!?MqP<[f4#AZL7bo!<`)s#QXo*"TSN*!!2]l"9igdKf&B$!Wi?)o)Jms
EHQsaq>^X!!<<*#p&OL\!!1(>!<StoXT5<tXT1um!!!&s!!#^jXT59uXT5-e!;ult!qcNq!rr<&nc/dp
?!V@to)Jgm!!;`l"9Vq;D]d:*bl@bGTDkklUoOEp!NJfl!!!&s!!#akWrSpoWrSg\!!!)n!!<<'!!<#t
p](F!?=%P!o)Jgm!!;`l"9Vq<D]lCek5YgQjQ5L5hra"^i:R'Mjo+<E[-$K4S]q-9"U,V3!:Bgg"9oR/
!!-TErkALu?bZNS!PVn9!!c]A^V@Lt>W_o!!,1d#"g>MI\>TK-!!NK*]"#5`oDf'r!"-?Q^4#VR!g'*0
nc/q+]>)(2!!*'""HK**!!2$Y!s9L:R)f7-;#RKs0MVJI!)31g!(m*j!D5!CXT2>g!!SspWMu0ar;[!&
!3<)uXmuGp#HOu/B_29+H]BHD!!E\1XfZC;!!7G)+mB"$!!<9:O+PFQ!)`]q!]!NNri6(":&+bo8ueqm
WiJcGrMooumJm<WVkjHkPQC^_"Te\%V5:3_!!EP*X/]k*!!7G(-Lq->$`L,+C]+57G_mX%!!<9:N.LU$
eGoRMroO=D!!(pUjoF?6!"7cIk2>>$!9N8'irSQJ"G>+>_drTD"3n`tiq!-R!!(O2i=,>Y!@(5+!!Ca5
i",bd!?jne!!,hNf`:LA!3cC:"I9#f?G?BQ"'G[*!r`0#>/'sM"'P[)PlADtYO2Aj#5u:<!!!'!!!&Mf
^Apjp!!9pM*qfR:!X6?Q6i6rW!!9pM*rZ-A#J\#BrVup"jo>A_rW!"e^V@hi!1s1l"b?XR9WbGrXTM&o
!!3'!!(m*j"%`ImJ,ZPMT'cRY"T>J"!!%cQXT1HP!!9:)(A7_2!<]I+2=LSIXfWB<!!<D,XZ-4Z!<E2`
!!!'!!!7bSXiLJBRf9>jJ,fRDWr8t#8HAelrVuskWr8t#8cSj?ri6$frW)Hg!!N8$qZ$VLri6#]n,NNj
Wu(I0"9AV*W]'>H!ir@<rW!$(X/e5Z!!!&^!!!'!!!7_PX2k8DKB;4W0`D%Tio]CajnSlZio]@`k5G>`
/*>pTKC&X=k5OH=!!>4Cj5o_0s5rnQ!TrA0!<;3Z!!23Dh#IL4k2bk/lN$SX!<OJD^Bu:f!!-9<^V.Cr
?Msj2?bX:g^V4"S!!FJD^Aoe_!!!)l!!'J,^C1)D!!*'6^;%Fb!rrAp!"Au0,JUtn!<<-#^V9aLr;Zp.
^V:!K!!E9&!!!*"!!=:W^'+E8"V/;^"on`"!!!&t!!!)u!!NE(!*m9jqZ$\h^R5!#!!2rs!!<*!!s&B%
"Pj%Y!?(j<!$(t<"A,_tXK;N*9`4qu9s(P!XfY7s!!4&:XT0LB!!!&k!!&tsXT8D&rVup/riH3k!qQBp
!<=%?Xo&2!Xnr)#$*C<4o`+smrW!$9XfV[(!!N_3XTSV)qZ-Bk!!2ut"T\T'9!)q,!!8%[K(f6F!Vucr
!o3hW!?;!<!$2%=#"kqsWiN-or;[1"WiN/#W_EHn!ZM$<!$V:@!!2Zk!2TUp!<<0"!!Nn5X/hWio)Jmo
!$&&?quHbtqZ$^)X/cBr!!!'!!!=%<WWN/""U_<2"98Jn!!!&t!!NB'!)'A/qZ$\RX+C!F!!2or!!:mT
rT="X"QSY$k2?+:"QJS#k2Q:=roO4@m/R-troX(X!oiA(!-mr4!TW>?!<;3X!!23Dmf3CNiqrfVk2cRD
jq7Ij!^c$*klBZB!-%qP#,qS)!!!.(r4`AE!!$B?rP&>4r;[!'WkQ6_Dt3l2!<<0$]`,YG%/g/+\,O,E
AH2]2oDesoE50!_!!+L_!5&41!Wi?'q>^KrqZ%!*!!!*$!H#T`!!!0!!!!'!!!<6%!!3#u!s&B%!r`0"
!W2p#]Y?Q/!W;uu#5J6$"TSN'qZ$Ttr;Zg!j8f)X!*oN*#+#;k!!!'ir2g&t!!#akXT1cf!!*.griH0)
n,NLj!3H1%!"&T(!3,t"!)i:d!aMk.r;Zm?XfMF$!W`9%o)Jpp!!!'#!!QN-X8i5%li7"dp](AsXY9PO
!!N)t!!Dur!!3#u!!1sW!+#T)#*f/i!!!'kr2Tuu!!#coX8]."7f<;j!gTddX'G,o!W`;#ri6#*r;Zho
ri6#tn,NMqX/Gmr!["JArW!!#!!2Zk$NU5-!WW4(X/H!u!pfme!VcWrWN.`M!!!/t!!!,r!!!&u!!!&W
!!EGejPsqN!!VKHjlYS(rW!)ZjlPXbqZ$b6i9','oDnag"5)_tjSSu\^?4M=!Up'j"Qn,0!!262k5YPc
k1/>h!S6E(!6tQEV#J+/H2[dO!<<+'^:q@s]jk?^rkAQL>QY$*!!%EG^At"s!!NSA^;%E%rVuporP&=I
rW!$B<>tr;!!3<8)Z9XWYJ6J+!!!27^U=^f'`\7['eKjs!!"6B&-)\63`?4[!!9@=S,NBl)B^UF!!!'!
!!N]e6ou:hr;[QS69>h]2%Kch!E[%M6OOG5!"U.o/GoJ]!<=938/)%)!!NNn6N@8i,!md\q#KXZ!0R8_
!+bs,!(m-k!j#3kr2ful!rN#uBE#"5O7*&K"T>G&'`J(45Q.\a&H2Y2(ISu9!!362'E%n4T<3eG!"&h0
Xf)[=&-)\L&.Kfi!WW3=64<ho""chAqu?ejXbZlU!tuLq%f650#:_Va'*A+4'c/\Z%KIsd!WW3hXfXGd
$jZh@(Dn=l!!=)t3Y22i#m18e2#m^Y))NJo!!84^Wr]83qZ$moWiE,#W_lHiri6+#9*5"k!,);3!0-FI
"U(m+X/cs6!!#=`WrN_1!!4!,'`A"5!t5nB!!8XjK)P`e"/r8r%1WpL!#uOp#m(),*(128!!=iA"8i-#
S#_5A!!*cO!@&*O!!NTW2_PjHr;[QL2(oF>.LQ:X!(X)i2@']s!"0V],5M9A)E9ehrW!6,"#`%;!rs8t
+lE>'=6AT+$2OW0io9%]g&V32k2kaaqZ$d"$fpI2;!n;cjPf7`qu?i]k2YRl!!7l:2>mLVe`OC)!!7l8
3oL&@!!)0@^]4B9Zi7]G3WT3_!!!'#?G?ER!58BH!kuBTq>^LVrkANA!!2Ti!\(m6)6LY,!rrG<^QuXL
"98P2^;%E!!WW4J^V0aJ!#<8`3WT5h^V@Lt^V7Ga'u%Gt@/pA8rkAI6<;jQA%0-M2!5H90!!!YH^V4:X
!!*;0r4`IZ!!WeB^V@M^^B/ue)#CuK7KBan^BX`=!rr=?^V9]^!hTGn$9,]6^QAN*^V7ITi;`kQriHGX
!!!'#!!*'nrN-($r2frmq>^LIriH0rmf3qAX_F9,,Q[rIXf[/VXTAJ(V#IJ%&cht4B<A99!!`K(XfX/T
!2o[q!<Ec2XTM?!!Mo^s!<>LcXU5@7!WW5&XXsMQ%fWR1;Z-Rr"Jbms";h+A#HRa(!c.iMqQ0fY!2BIp
"TSN(!!$:%XTOI]!%RuM!dk!IriH0YnGr(Z!29Cm#qc2X!WW3$!)9KmWrT1!Wrf<$:&4hi0)hmOU$ht#
+KK4DX!IfI!irAPX/c:%!hlWpWtGF5!,&@4r;[S5X"FAPUT:GqX/i8$!>)93X&&csU&M(n!(Hje%LE+:
!!'(#/cYk]X/i7!r;Zj$T_thq)#sdEW2lu!ri6*:!#,40!]^7Rri68(!!3-#?)t")Wssjb!%Y(MX*XiC
X/`4Vi;`tPk2kb%!!3-#iVqs>h>ZO;insM2"6JY,V="<cjplRsr;Zu_j=o`YrW!%siT0/"!!3PjiV``W
j5g1>(:NAfiTB7[jo>D>k2l[E!2J]<jo>DBroX+Ys5s7["6S\(!W2otSHS*;j6#M&!#*lEk2GC`jq.Rn
k2tdfk2k\)!1WuMqu?p(k2POak!T+J$0(+0-31dBioWVf!!*/4rkALH!!<#t!`ZqKrP&NM^Kgj?!W2ot
%K=*D])Vp&!#pR*,-\h2!!JP$>`le0!!C!MC;7M(!!!&)^RtK*+:l6%#ljr4C;7Mb+!VI"!#iVe&HKS\
@DBRi^R.^0^S(Q+!u/Ja#6"TJ'YhBp!WW3'^V?ZH"2DSS!!g9QVuQjc^V:ll!#<8`[icS/$j6P6ZG3L>
!#1L/^F]I&^V<,q^SmR7^V%<K[(a03!!*,#riH52!!2rs!(6Ra!)*+f!"&Y,!il;%nGio5XVmb5B`J3a
X\&qJXf)4$XfYX+XVUm9!hcZSrW"&KXfVd-!!cQ,X[O$E%fcSCXfW$4XfYC$XfSXV4ftiFrW!$2XfVa*
!%AG\XUP:2!!9:)PlLlfXTJP,Xf[lh!.q>T(]XOIXf\N=',:fR"/2icr;[FUXfWcI'!88n/$5+iXf\\,
2$0VVX6ou\!!*+tri6)0!!2rs!_'/irMp""X%`<h!"&Y*!iQ)"nGj;@WuIS0B`J3`X%Rf?U]:IsW`Q7%
(B+:8SZ@VH!#uBIWs/P(#?Rt,7i33V!!!_6Wso'0X&,jtWN1RP5-(`ArW!$2WiH:%!%AGZWso(0!!94%
OoPQaWri>*X/_Ba!.h2O)#sXJX/i$6'GUoS".uW\r;[OVX/dHF'!&&k/?>"eWiN,"2PR4Mi;`u'k2tb!
!!2->rT4.?k4\iXjQ,IPmf4%7irFqr%0-AYjo?ah\,ZNkhu`''r;ZnYj@0"Is5s7[!WqHFq>_&gjo>DB
jT4N*f&eagj5WZ.!!2'@qu?cYk552^k2p%O!!26BrW!2ciFDog1Z[Zr!!;<C]__[1Pid#b!!4A)jSf,h
k2QFAk%$=.k1A_qWoDOe!<'Y4!WE'"!<iB%!<QF$^BIU;!!*'#r;Zg#rP/71o`,a1ZG-Kp^OZP!^V0f^
^Q&9o8Ke)J^E<FT#f",O!<<*e^VB^I"X(Oo!!!*"!#I0"^An7.-31fq^2O&QTte&:!<>X)^B=H8!\D(#
r;Zo.^UO1B#-GN=!k#eNrW!?X^V9aK!s#dEDZKk@rVur.#ek$U!!Fsi^GYuj%^Wp4#)3+_^V7Gg!/82&
i;ihYqu?]urVus"8,KCg7/-`^!r]7j!"K()XTECBC]b'IXTGQ*GR"3K3uJ%#XV^s:!j/RirW!!WXf_O%
"W4AD!!!'!!!aXKXT/>a*!#u?"^D$-Nif;[!!>6`XTJJ%![4\Jr;ZnuXf;:"#+M[o!N)urrW!?MXfVR'
!W]1$>6"X)rW!8(X]>K'![OnM.fKDPUTJqIE<&W1XTSe-Dlp/#!<&tr!!!*"!!**lql9]dp](9qrN#Df
(':,/!cG&T!t200!iW/D!!#,"!33(:rW!##X$Q^b!]I*[r;Zm:WiH1$!!3'!&0\'S!!#5(!3<0#>lXk_
X/5dq"$3K`!r`0$,-%^B!!9!tV>^H!R&L&dU8t$f!":'PWrN,$!2QZ#!!!*"!"#L%<rr@'-*+'rrW!G%
X*b%h!)'AmWs&KAX/k@_qu?i[k2k^u!;kpP!!DBGjlGk1%@6,V'BTi+!9N/>e)hbM!!2*@r;cl[qu?c[
jno)Zio^(;!TE2=!!q]Ki<0,\9'3kd!!20@qu?cTjo#/\^?330!![Vt!!'1aYl+S%k5>8]]&j+l!!:!r
!rW-!k5>8iTB7L$('"?siT't=']eE8!<'\3!!!-#!!<9&!+>]=!*fR*!<N&t!!W>9nc04&!!'aJ!-#]^
!4KW\!5H9-rW!9/#f"+]!<E_G^(^JG!h$g*rW!*&Ktjkm!WE'2"cg@(!!!'#$GX?Y!WW4/^U*n>!gg[*
r;[7d^TmqA"<5+j&-Dn5rW!'Y^V:-Y"98FF^UjCE!sQER+T)3A"2DS`rW!87^UaCG!!'LC])D[8S%l]\
!!$lN\)@>cXo8;#!r`0%!<<*pqlKijp](9rrN5\l&c_n4!!'.'!*lY*!3!"5!3N@QrW!9-"g+m3!!!D/
XUb=1!e[VFr;Zn<Xe>Rl&Hd<\U]:Aq!!fX.ScJfk:T^Dk!!7bST)AWrGcd\A!!3k:XUG:/!!t-WXU"t.
!+E"1rW!$&XfWH<!!<;)XUb=1!i`<&r;ZntXfD@##_oI`(]XP=Xf:7ZrN#nt!!<-"!s&B%:]%0m9DAJe
"9#:k!"]/2!33("?)se%UoP10X/dcM!!EB-X/cI/!!!D-WXf".!eRJ@r;Zn<X.B.g&Hd9YT`>&n!!fR*
RK3Bg:og;h!!7_PRf*3nGH7A<!!3k8Wsf(-!!t-UWsAb,!+Dq+rW!$&WiI$8!!<;'Wt,+/!i;rqr;Znp
X/>jr#_]7Z)#sY?X/5Ulkl:hJjlPXu!!VKGk2bRbp&G3Uk2kXl!"@lL!!MH!!4q:m!9E8=!<;3[!!2->
r;ZmUk'Ht+!YsjWqZ$X?jT)(R!!;<EJGoNM!Tp*T!!4n;KDbcO+6K'k!!26Cq#CHXj8ArZ#3=&-!!2*A
q>gQXr;Zo8j3df*!kd[=rW!!ZjlZOB!X%T!i;`ql^V:2l%KQP0!rr?%!+*CRrP&EJ^KUR9!!3'!!"f.E
#.sp9!<<*$p&GR:^T%8b^TKr=VuS?_^C'o>!`QkKrW!![^V9XH!kc9hr;[89^Nok[!<<3%\%d.hrW!$S
^:t!R!"PI4[K-@2]>&:c!!<52^ArQY!!9%4\G?1,VSBV>!"/k2^QAKs!%5Or!!E0"![>CorW!$'^V=(Q
!"Q?MS,`Ni]>($>!!BRBO5U'=XT#=%$N:#*!rW*!9_kdj8brDf!"Ak/!3H(u!!2cn%M,\/!$SJ826E,D
+K_aNr;ZmcXf_R&!\CIUr;Zo#X^:r+!i`;5r;[!&!3*)2!WE'$-EXBSrW!I_Xf)4"!irG.!!!'#WNB_1
!!8CeWVQSrPc^qa!!<7mXaL*J"<FVH!!<*!!ZA,BrW!$%XfY7p!!8ptL].8ZX0%B^!!8suHJni(WW&pu
$N:#*!rW*#9rb5lWrf<%9)/Ge%0!:-WVc_r!VQKq&$(rq$6lO=2QN#A+fhXKr;ZmeX/l4"!\LIQr;Znu
X'bf*!i;r/r;[!&!2Z`,!WE'$-E=*NrW!I]X/#^q!iW/*!!!'#V5n/+!!8:`V>:/nOfP>X!!<7iX*agG
"<OVE!!<*!!ZS2@rW!$%X/eqm!!ApqK`DG[!2urV!!!(oX*ES'!7q/3pAbHXio]:`k2POt!!D<Ek18u$
%-)(&!9AM-k$e;jk2uO@!T`DA!!26@rW!$#fAd&5!!:"!$Msf)^ZGh"!!2*Ar;ZmXjgtEk!n697r;Zo8
jpD"e!aap)q>^S'k.gip!ds&Ur;ZlYk5#&YjlZLA!T`D@!!8eT48o3]e)j:%!!8qV,4P[(!!*,,rkAFp
q>^P(^AbkI^AP_J@/p9.r;ZgZrkAH>n,NSe^LR<arP&I8!//,%r;Zp$VSAf'!!9(5Zi0q3#/@nm!!3-#
^V:rh!"$BS,QIlG!//+m$ig;.!5-("!WW58^E*7Q#f",!!!!)0^Nf_X!!<-"!j]RYrW!$(^:uW+!!7Yb
\,64.!dMJirW!$9^V:-S!"QcXIK0?Q^V:]f!!0jL,2iM%V#IIr0)GVL!)E9j!)NFk!&"8Q!2K#`"@'"c
!#>I7"98F>Xf_O%!s+XgNW&nZQ*$h\!"&k2XVCg:!!'.')>aC?XfWNB!<<+;XeYgp#ct.G!<<,%XVUj8
$*C<J!!!%uX^_>4!!!'!!!8ms>5eL("0J[TrW!"6Xf2-t!s)r7WVul"&Zr/?r;[,*X_@b8"g+m@rW!#%
XVp't!29Cm!&+0K!Df`pWrT0tWrPum!!"\OWresp!:g*m6*!l`(&b09!!$o;X8N##!KjF?rW!"_X.fLm
$3[E1'`\77!3<.=qZ$r&WuM*?!!$o;T`"irWN0n;!!'(#(B"4=X/d3?!!/mrA,ZH.!WE'#TW;;r!!<>'
X"4/L!bn^2qu?g"A?2R+!!<h6WsAS'#cjt>!!!2'WtbO5!ir@@i;`tTk2k_"!!M9BjQ>G"joOKCq#CNZ
j6!!&!".ih!!)-CjQ6FB'*77Uqu?e)j[oFO!at)]r;Zl\jSSuYk2c@=!TN8>!!3hrSc&NifAmVE!!26D
quHcZr;Zo3jp:e`!h8<Sr;ZlWk5>8]%d(G$!!3Gg_>OB6jSSuZk26^J!!23Dr;Zl[k3W0B!!30$TDlS-
G6.aIrVuq)rP&HJA7*(M^B2)U"8i-!GlGGXU[S6dUV7HH!<0_N;#g^(^97M:!sJ\>^-)Gr"2DTf"98EG
^;'UH',J9r"TSN(!!"+U^B"K<!!KdGIf9<R#f",W!WXI[^B4B7"!#(j!r`0$^V<&4!!NE(!5H9`rW!@:
^V9sQ!!KXBOT5@^rW!#.^Q8?o"'iUU!r`02*koB?!!"Uc^An67*l#Dn!rW*!!p9O`N;fp]@K?H1rW!!n
XfV`.XfPAorN-.&9`k4m!+c)2!0H[M"H]_s!s&>&)*e0'U91$f!!36&XfX8W!!9:)=TSR')6L%>!##sG
XTJP'!<<*9XfVR*!!!)!X_Ib7#mIH57f`T.XfVX'!!<t<XTAD$!j/R[r;[!%!!'.'<rN(*:p$i&!!!(q
XaU'H!iW5IrW!$mXfVX'!!j@BXW[ZE,-A!H!!F(>XTS\'!!!&_!!%lTWrlf3!!<-"!)<Em"0,6oWrB%#
W_NWn!!$R/WrS1X!;-<pNN*Nl!<0#:5l^tZWg`tg!WrG'W\FJR!irA*!WW3>WiQ'u'+q7F!rr<%!!!k:
WrN5%!!8ssC&S)="fn[q!<=+?Wr`2"!u7l;!WE'#X/e&T!!NB'!3</%rW!7%X/c@'!!8joI/<mEUoOK?
rW!$nX/c:#!!jC@X!.ND,HImE!!F+=WWWA$!!!&_!!GaPk2cjE!"7iKk2kG#!93/$k1f_4":4)Nj&>FI
!E%bR!<2-[!!A_KK`M&O!Tr>=!!;<F"8r3#io^.=!T)u8!!20Cqu?f2jph7hs5s7[s5s4Zs5s7[s5s+W
!p&JFrW!!#k2ZC?!h\I"qZ$]/js'a(s5s4Z!TN8?!!2-Br;Zo]huM^9!-S:U!N?/!!#8qV^V@Ls=TAG0
^:q@s^0^j@!!!)#rkAGRnc01%!5#uG!W^!M\cMj3^V=4U!!rbB^C:/C\A,a+rW!%=^UF:D!!>p0\c<HF
!sJ]*FhbEd!!*'"^V:Na!s"%h^]"3UGJCTe"98II^:4.D!!C!M+92BE!!iQ)^V;f0!"?WV]`%m>!kuE0
!WWZ0!!U-O0)bhPDnj'd!!r\'^V9aM!ee=trW!"C^UsCD!s&B%!U]sc!!$F+XT=ahr;Zgnr2g&k!!#dl
XT2)o!!*+friH0+nc01$!3<4%!<B7(WW<)"XfYCt!!r_/XU+t-WNE9DrW!%)Xf):"!"1rlWrN,$!rr=/
Xf;3u#d(3@!!3.>Xf_R&!Fi/9W;lu"!+W.1rW!T5XfWE?!!3-(!!'.'/H>bWXf\](!"8n1XXjJQ#ljr-
XfWiI!!6B,Xo/5*Pc_%f!<I)?WVul!@BHTg!!$I,Wr\Idr;[4%WiN2#W_!0j:TCDsX/i6qr;Zj!Q2[fa
?Le(,!<B(!!!*)#X/5mt!3<.sr;[-*X/cO,!2Z`r+8u6B>cXY$rW!<iX/>pt!WrE&@B67&!!oX+&HDk4
E2ou<!"!,8V#UPs!+W%*rW!H1X/[$;!!3-(!!'(#/cYkR$*1)*rW!?-WiI]P!!rW*"08FIrW!")X/l1!
#a)0g!!*+<X/5dq!b&..huElak2YT;qu?m$iT'([iV``Zhr<e\htmBVC?FR="nVfn!!1U3rW!#\k0*`(
!p8VGquHcZrW!#9k2?1<!X%Stqu?cZdJEnF#3Ec#!<;3[!!3nojo,5]#NNSt!!3Gc_u0Q9jPot8!TrG@
!!;<BfDP[Mhrab8!Tr;<!!<>cirK&Y!ab$MrW!!5jhC]o!X@]7jT#Gc!!*'"+oT.U,Q7ZD=hXgL!PW+C
!!$='^B)#VrVupDrP&=[nGj((^9[h?!5#u]!!!eL^DI"N!!FCY^'=W<RJssD!'\-tFhb$Y["8:&^V'UI
ZbHJ?Ekf?hZ\/;k^V:Qb!"lu\8-JtnEPJXVZ@r9r^V9cSKE/a$MZ<bXZbHMB^V?0:#JRsfZ2q(f!l)K5
!&D</!!'dK(a6Wr,eq(o#65g[^Jk77!4KY(!<<+m^P;g$9a(Fq!<N8h!!!&u!!!o8XT0:=!!,TkrN-&s
r;ZgjrN-+%:]:=o)uZl=*Us+2"KeHu!!o[.&HDeCXfW98!!O1@XT\]WriHq90Wb=_XdfBfC]J"JX8i6q
XT/?,XfW`HUM^&AXfW39!"H'43Wf?^?*0XtTl0p7XfVStD?-f@G5_IIUTFLsXf[3U"obVKUB$d.!NiIX
!%4mS!!'.'',dnR)m-4B"TT=?X[<*h!2lrGrW!.]X`=EC4TbT_!!2He!!3#u!ZJ,?!ir@ArVusjWrB%"
W`&cq!)3?l!NJuq!!"#;WrO42!!3;'U&G#tW2gL1!"l94'E%n7(osY?!.t3N0`Wu0!+Dpr!2=90A?2[0
!26Fn!+)_,!2491%]cWC!!!J/X#gC`!*uXo!2"00>H=e/!2+30WiL7@!&(%H!!0.$JcGtSX/hlnR!/S3
X"aT%X'G]*X/cmPWra9AWrN;'(TXT*!<<+pX*O[E#)]I$!2r*`rVup!k5YVEk2t_%!!V3?j6#>%qu?o_
j6#LY!WE'%!9NA(j6lsKiM$5N!S-90!<;-W!%$ab!!"k<jQ6FBjT#MGGQ=`U!!q`?!!&YR!!!2bj8bec
!!)0Dr;cl[r;[B3k'd;p'EA6qj8bY_!9*&[rW!M'jo>DCjtm&<iTB9n!-TFas5s:\%-@Zm!9N>C!9O7]
jQ?C@!TrJA!!9Uk,Q7ZG8*1Tfe`6];!WW5)^V7IK!!$4#^AqI9!!<6%>e^0O"(;00R/Xi$YlXCq"U(L5
])r$C!!rf0!!0C?^J"V.!!!9%^Aph'^EKo`I(mA,^.//a^V7"g^JOt2H,%,-^IJ97^V?og:VXZ@rW"&C
I(mA-^HqpK^V@@p70Sae^TXQM^N]_YWkQ6N^Uo36rkAJ4!<0_IXM;CJ!<U$N\A,ZX!5H:N$<4dTU&G$#
!l)K2!!!+q^;%Cs/H,VL!pK[e!<<+lriH9R!!#UgXT1ri!!#XhXTM?!!.t3P!2/i^#QfseWr`8$"p=i)
"/E!#4oG?\"oPJ&3rQ/]U];KLXf\Y+3<1Y5XeMr"5QCdpXf\\,3<2pYXe$1jXf[cc!$;8TXf\\,1]V3k
XfJQ_"+%)OT9ZO\A,lUsXf\.rX)S$>!C?ecXV@8,X8i5$Xf\S)X8r='XdfV`Xf[W_!!`P,XXsMQ!g!;^
!$V=A!!2foo)K*u!!&OiWiLXM!)!0i!)!+g!DBHkWrl/u!.k-M!1iW[#QfmaVucr!"p=i)"/)]q55bH]
"oPD$48l3"T`A`*X/DsY!%t=PTW>+Z!!$Q1X/`3]!)fkuRKO9iX/h<\!$D>UWiN)!2#q<jX/E!X"*glI
S!'hQA,lUpWiMPgW,Sd9WrYTgri6a#X/Q(!!NW8tX/Q+"X/hWn7B<JIrW!?-X/diQ!!8.[X/`3ErVup!
jo>O@jl5DVrVuu]jT=T,j7rZ`i8`t^irK,[1Zmc\NUQoL8)r+p!!8_Rk5,/VjpM1Ojl>Br!"7cJcJng'
"Qn[4k2cLA%gh=Yg?&A8!TrHn!!)-C=oA=4$f^9ujo>Aik2t%Q!!"5(k(OX[k2lpL!,CNUI-/lmhr`t]
!!)*?j`KV8rW!Gjk/$*0!!)'AH2ms-j@]@Ns5s7["An%=ioT2#%KQZ<^V@Is4'022^V@KiqZ$p(!*m:Q
^V@Kh48lnr?iU6.oDel"rkANI!!3'!!X"FrrkAFTr;[7o^V@B$!3j5QOoPJ-rkARX!<<,.rkAR[!!*'A
rkARX!!'4:r4`5,rW!!#!$qQY#9X!H(r!c"-iO)GU&Me>[NY_P!!U-O^TRVA^V@K8!!#1]^As`%!!E>)
^V?H@!!*J:rkAKF;Z6Y%!Y)oZ#6=f)0`Jfg)ZU!$!!`R!Xf\\,/k,]?!)<=j!W`9nr2fun0)_mR:&k=d
!!#goXT5I#!!<:HXfVZ,XV^p9%"k[aX;1f.Xf[$P!#tp>!#PV7!3#n!!#bb9!#PX:!uCq;T)5Vi55YB\
)ucrA(]XOLriH/@rVuqYriH4")?'U9"9,D(ScAomXTKdJ!&4DS!/:@O".ZKqNW&nY#c[g*!NSNc!!E</
XfVd+!!"AFXTB1:!q?9_!"B!(X/i8$01W(CX/i6qqZ$p'!)'AmX/i6p0E%pQ:B1Fe!!#jpWrT-s!!34F
WrB%!)#XFCJubrN(''l*X*amI*<)u=)#aL8V#ICp)u]g;)#gQ=(]XQ)Wr/mt5l:T^*<)uD)#sXMWiN0A
rVuqWri6'q)u]gH"08H&RK*JkX/[EF!&=JR!/(4M".?3jMZ*SV#c7O$!N/9`!!E</X/cF'!!"AFWr`t8
!oa1fjlYF]!!)0@k2tP$p](Z`ioB1Z!!)-Bk2Yq2!!3)]!8%)J"<QRbj6$7>#rLf*eGoT+j5_Zg!!;<D
jo#/]]&r/9qu?f\k2ZF@#(tmsj6#Laq>^TZjQ6=?!oN/&r;[!pjQ#C4!;um'k2GES!!)0DiV``YjQ>P_
r;ZqGjlT/5!!L$tk2ahb!!26CquH`YhuEcZZMqT?[D0HT^BImC!!*'#rW!$%!+!><^BhQ`^V7Ih!!!&u
!;$6k"9&9#!rN#u!W2ot"TAB%"9\W'!=/f*!!*9)qu?g"!WW9!!!!9'!!`P>^FT?h!!N,u!<EE&!!ri2
!!!$""98H*q#C^-!!!*$!!iT*"TAB$#PnE##6=f*r;Zs%!WW<(r;[$'!!!$"!<N0"!s&B%"T8<#"Qoac
!MfXr!2f[r!)*+f!W`9or2fsuriH0rm/R+frVup!p](?q!!<-"rrW0"!<iQ&!!!/u!!!&r!!!3$!!]R-
+TMWF!r2fr"T/6#"9JH$!s/H&!r2g&"onW)!!!0&!!<-"!!W3!!!W6""9AN'!Wi6"!!2cn!<<3"!!!)`
!!*+nri6*qX/c0"!)31g!s&BqWrB%&WhlbrX.en\!!<-"!!2cn!!<-"rrW0"!<iQ&!!!/u!!!&r!!!3$
!!]L)+oh`G!r2fr"T/6#"9JH$!s/H&!r2g&"onW)!!!0&!!<-"!!W3!!!W6""9AN'!Wi6"!!2`m!!<*!
!!;Nfq>^hmjlY^2k2PIaj7NBYhra(_iPF[7k+fEd!TiD7!1Elf!WE'$=MMVbrP&BI>l4R%!W<!+!<?NA
^V@Lt^;%EdmJm4frVup!q>^U!!!!)q!!33%!WE'!"7Z?t!WW3&!!p?S"U"N"!!DBa!<E0$!!2rs!!<-"
!W`9&n,NFiq#CBqgAh4Cq5jWho`+teq5jWgnc81[!s&B%!VcWp!W2ot!q?6s!<<*$!!TL,!s85t!!:sV
!!2ut!!2`mqu?]tdJsA?X/i9!Wr]4no`,:oWiN2#X/`5$9&]gQ!<<*#q>^Qs!!2ut!!;Zj#lt#+!WWD)
WriFu!!!)V!!!&t!!!&h!!!&d!9O7dk2t[cjlPX_o)K$Tk2tXbio]=6!;uotk(j!;RJaf&^0CX<!Vud!
!<<3%?i.S<RC`G'!<<-g^:sd;!1a)iKDVbN9(`/c!WYsnXTGW,KX_!a2Qa(_dK$cW!.t-L!NJfc!!33%
:A_'lK'<9^!!>0[Wrfa1df9S/j6#Ick2>b0!TW8?joOL"c2d,0!TN72!:9adYl2<;[QXEd$ip>0!!!$Y
[_KSk^TY*H"I[$>70/5F!20:m!N.XG!!!'!!!+RJrN-'k[f?M`XfXPD!2KSpSc,SiUG;KC!!3'!"tQLM
X/`4hqZ+;0"+mSS36D69!!S;Ak2YU4nGia(k2tUaKAZa^!!5%?j/rCJ!:Tsh(UO%S!L>81!!k$A^V@Lt
^U+Zf!!!&u!!EFtXff86!/pmY&u5B,!eDHop](=:KD_hPU^jm7"9OOPSu^iNVZ6`1U&:qlJ0FXe#U"`"
X/`5$Tapht_#OT>MOBp2`rNpU#,1)>k2bPVo`,1QjlG@^k,@&8gAh=GG_")@!8IPT)R0+R$`nV:%fu_A
4*dj@^AbkM^9/(K"N(6<!!!)u!!NB'!!<3%OoY4V!>D+&XU1G,0FIm]$SGtWqlKsk%KHRF!!!&q!!!)m
!0[B`'V,'$#a]'V$NU5804Y-MX/c0""KIn#!!9n8!!2lq!!:gRXT/W`j5f=ajl:@fqZ$m.D!'^;k2tZP
mJqh=b5_YH!!*(cqS*$EotLQr!!LdOjo>A_rW!!%!!/kqjo>A^rVuqLmB$GC!!9\2!!3'!!!7oU!!3'!
!.apH!35^m!eLCR\GuU1rVup"lN!=Q!&4B6$0:72io]Cak2YS&joj`)ju!-j!4Mq."9&9$=L.n?"2;Ob
^A5MJZW@,,!WW8c!7UuN!WW3$rVup![fFhV!!<-"!CigRXTYCf!!!&D!:Kmf!L3ZP!!!*"!!,W_rMp%#
X/i8rWs#+d!!!&2!!!&q!/(=QR,\D2jlYOak2H=%"m+n-k2rA#!29Gs!<<*#C9RNL!5ABG!N]l*!5SX8
!Q+oJ!!-,lorS7`;VD,&!:'XM!!-/iql9^sr2Tjb;lKbO!!<:Tk2cg/k2YU`k2cO(!HJ4$!1s6!-?Z&g
]=u%lZ_;Ifqu?d!!!;oq`;flAqu?g"!!!&@!4i.<*+4i&X0&M)UQ/\$q>^Krh#Q@5!!B"seGost@>pkX
WiN(lN*m\&!!!&:!;c`r",R$H!!rj)S^ZQ[e"KG=ScFuT!!;Wip&G'oNW?6_!!20]!!2WjJcNpn!!20]
!!1[OJcLB&JcPZJ!!2Ng!!/SiJcLB&JcLB&JcLB&l2UedrVup!o)JakrVup#YlKLY!!<-"mJm4gQ2mTY
!!;Hd!!;usJcLB&JcP*:mf3=krW!$%!!!'!!!*0&rVup#rW!$$!!!*"!!!2,!/ggW"9&9#!W<!"!!!*!
!!!)t!!!'!!!!+d!2]_r"9&9#!W)is!rW*!!rDrt!WE'!"8MqK!.k3&!8IPS!W2p,!<<U8Suo?3]X+`3
>n6]2!!0t;JcP6>$OTOaS>30eUn!<8$D7BW!!ip*Lmas9WM,^]LeJ/0!2KT"6?o3VfV<[Xk5^)6b5_MC
qZ$[#?`Wk7!ifT1qZ$TsfDpL'hZ*]Z9pt[V!gl[`[K(mZq>^Qu:6tRR!gZR_RfJZQ"E*AajlQI'"Qeb-
k%strJcN7["p=o+!<PWorkAHIrkJKIrkAHIrkAZC6NR8g!!MQeJcO4!!!<-"!Wb0QnZ;ke2$*[V!!:IH
JcP0<!!<-"!Wb3Ori6%!ri?(!ri6%!ri6*m2?EdW!!9M-K)bn;&EN!8io]Caio9%]k2PLbjHbu0UAtAs
!!o"[^B9l0!!2utJcNF`!<n,CXT=%XhZ/6.lN$;P!<n)BWr[eUXoO7X"Z5<&k2bY+k2k_'jp:)1k2tae
k2\@^!3ZA&!r)`s'=>LO^C%8s73`*F-UNHl^AP_HZQ&Z>!!;lp!Wi?&p](9qr;Zg"df9@NrVup"r;Zp#
!!!*"!!!&V!6P9A!VcWq%]0')$)2/n)?pBd1i9#bXT>12p](9ppAb0op&G'nrVus!!n.,L!r`0"!Vucr
!P\Wr!!!&p!!3Y)Wr/n)TP?G+"pQ,+D5"!-Wr\n.p](9ppAb0op&G'nr;Zg!kQ'rL!!<-"!!2or!!/kq
o`,#miVqsAjlW$CqZ$m7U#>"ojlY]tV>ue[!>Ms@^B;3bTI0X<"9SW(!rrZ.!%4\Z^V7ItZki*1!!0k8
!!Dur"9AK)!!<-"rrVinXoJJ5V>RFrN#_fs!s/H&!r`0#*L6Q)!Mg=t!5/@4!qlTq!WW9#!<3)R!6G3A
&#0'("0/DZ*W?$@!WW3%rW!3FP,kX`X/hp+ec=>&!!;io!Wi?&rW)s!^B!9o!3H1^!o`00o`,2(jQ>Ia
jJ]WiJcGiP"gIs?"LU5i!!E#s"<s/E^V0T\!jDe.nGiOjp](9srVup!qZ$Ttf)PdPr;Zp&!!!,u!1X#i
"/#Oo"JmXL!!;rr"rVunXfSY,"0J\t!q60i!VcWp!quZp!S7;O!W<!#!WW3%huL4d!<\kjWs#.K!!!)r
!!F6kWN3&tWr\^ln,NFhquHZq!!;lp!!1[O!!3#u!s/H&!lY/e!!S5AjQ>U+oDetIf]M#hjoOS!c2`Fr
mJm7hSGg2'V$d,#rrN*!!\C"YrP&?9rP&?#kl:bc!!W<$!!3#u!!CmSqZ$TsqZ$TtrW!0(!!!$"#lk+'
!!*+UrN-*a#PS3!+cQ?$!2'4l!/'G7!!Dur!!:@E!!2lq"9ni-!!&hq!<IoQWr\:epAb7=MQ6WU!1Wqf
!.t.LlMpnep](9qbQ%VDq#CI#!!;3]^An9rjSn9A>4hk'8)WOljlM3VjlY\^iW+Q1lN$MV!W`9mrP&K8
"TSN)qZ$[NUV?W?#b\96^V7HY!!2Qh!X&K-r;Zp#!!*-"!!NE(!!E9)f`2E\!!*'&!!!'#!<<*#qZ$aY
EdNlYV#UKWrN-6j!rr<&!;lft,`ql)!KEQHXT1TR!!33%"SMg!!<<*$!!:[N!s/H&!VQKr.pZb6$iU.)
!!#.[Ws"^j!!!)t!!4I,Wr&h$MO1BEWiJG_!;$6m!WWAs!!NB'!!3-%eGo[Q!!!&n!!FiZApFdE!5\^=
k2bXbD"[i<;r?]ujQ#Cb8TNnSi9&ns^An<=$R<[li;`r\!!]n2^B(_Or;[Z<!!<3LVSBm[^V@Lt[s7r^
[_BMk[0?U3nc/Xjr;Zj1T`)V2[tOe_!!A7R/*d3&!!!&t!!4(5QM:F[IK$t]#H\"&!!*5$riH3t$2ji-
!rrB&*g?H&"K>o3$)dd)!N$"c!!*OgrN-+"DuK_=!dT_Id/X.[!KVg,!!$^3XT/O%!!*4uri6'o$2ji0
!rrB&+-EV)WXZ#0WiMt,!"#F#X/huulMpqpMZ'RVV/Q>5!s3_(+jg8k'TIY<!!$^3WrN=s!3cG+]&r)9
XS2]+>iXu+k2t[a^Bjl?[,L-.ZL\(j!!Z$Wk2YU<'`A"4+[s]W!DkKF!!<YljlG+qdf9@KqZ%19^V7Ir
1&q:U"98K',br,grkAcR^U7GN!!E9Z^AbkI@J^$)!VZQo"9&9(,/1e%95+=>rW!-)^V</:!<CaP#6Fl*
!L^^;"TAB$!rN$$CVRL^!Pnd!!!#goXU;-W!!!$$!!*'=OSZ'`V+q$k!WX_KXT2/d!!!*"!!O7BXf=K_
riQ/"!s5U,2WFf/!!!'!!!@nVXTJJ%!!2ut!`uM*V#UKl&$)_2W@%ZG!<N6%!$%!!WrB%*WiMji!<<0$
.]WKK!)W.b!!<-""WOJAVEIrYX8W)$!ir@\eGoRMrW!%PX/c=$!!**#r;Zn$X/Voq"9IQAk1TM0!`A+=
roO:?k,eI\"T[QEj5pC.!!hKAa8c8$k2uUBs5qZ.!]B-&pAb6rk1Au#]Dr$8!!02#^B9r*!!<-"!?@U*
^B(W>q>^M^rkAQ:!<<2k!!*0%!l)LDrW!!W^T[V:":r8^#QiES!h[5qpAb8e^RrpSf)PmR!!&MfXTO:X
!!3'!!>U@cXT>.`q>^MIriH9l!!!&i!!E?'Xf[W_!!4XPT)J]m$a$N7!VZTL!!8(\K_GHJN3/#I!:g*l
!<<+eri6-S!!!'!!!*gfqPsXi7JZuaJc;\PQiI*enGi[n!3</ZrW!!LX.'"f":M92"TdBYpAb8NX+L'G
!f<t6V#UX?jlYS_r;cfs#WUo+jlY[ck*u/H!&=K8!-IQ-!p&K;r;ZlYKDbcNjlFbg!^l$+pAb:ak!K-H
!"9FQ^V7H+!!*'"#(sYe^B(T8p](:9rkANK&-2/!#oC@k!!!$"!5ELI!!!&t!!!&u!!!/s!!!-"!!WN*
!!*'""8;cq"o83#!<<0!!!9aH:?;Jm!!!H+XT07;!!*4>qQ0dl5PP3Y(]CH9%.4)s'!8;6!!',$>jMFj
!r)`q!rW*!!rN#u!quZp"7lKoX0"S.!:'XV!!Ne2X/`3=r;Zm%D6!K6!M2UP!!!l8Wr]4/mJm;$X/l-u
!NTMm!!!)q!!!*!!!!)u!!!)u!;lfs"7lKoVlN(Z!!D3BiT9q:!>=;pjQ>Ubk2_^!!!DBEk2GY,!TrJ@
!!23b]`8)[k554^!!!'!!!$I,^AtS<!!+OTrkAcR^V@!M!!!-%!W2p!!W]P*^Aq^A!!!&k!!i]B^V9jP
!!!-"!!FA\/eS3^!#c#(73M^G6j3Pj7RmFZ!ZFH^!!*'C68SZC!r`0/!<FW<72#Y%!!!9J-n>,p#m1;k
9J7I%^Bk&'!6"p<:]@HrUAY&m+/Je9"J7pZ!!;us!W`:priH/rmf3Up&?W&9!<<*$r;Zp9'-e"`!"f;e
2]2W+2?NpZ3&ps=!>@@=rW!*>1arD)!W2p"+#c+gr;Zp')'0pu!!r]./Nk?pXfVd/a8k,u!)WZq!2'2i
!?e*8Ws>Z*X.2HU!!;us!W`:nri6#qmf3Up&?Di5!<<*$r;Zp:'-n(a!"T/d3#Vf-2Zj$[3B@-?!>GPn
-iO)L)DrrD!!2ut"!BQ_%fHA0"WAI+qu@$)!\QY_(TXS@!j)J"!!!'!joCeH!!f:]jlYRak)&^1"I/'0
joOiL!T`C[!;-<mk2iE>$(eoH^4H=b"@0Qr^B(Z?r;cfs!!E)u!/:Ee!1rWZ"9KFT^R4p!!WrE=rkA\K
!rr?&!!A5W^B"<rrkAl&!5-(]^7t\7^V@Lcr;[3,E500%^V?HB!<BJ*^BFW<!rr=IrP&HK^V9gB!3uS)
MZ0^]C]FG:19:>T!M`$Y!!!)t!!$s:XT47O!;ca!!>DT;K)>TM!WWl4XT;9#r;Zj"GP\EB!&"8Q!dXjJ
riH6`!2KOq!1j&g!<HI'XT4C\!!&enXT\\)!WW43qQ8ENblA'+X/i7:!!!'VVu3RrTgeeX!!<#t!,qk;
!/U(D"9B1:X+C0K!Wi?7ri6&t!r`0$!!7??WrW2Rri6HP!3*$"Wf7"PX/i7gr;[''?)t$+X/h0X!!&_l
Ws&J'!WW43rMp""X/ir7kPt`Pk2tP5r;ZiCr8n!Qnc/Y(roO2Im/R4Mj>6T3roO1]qZ$^>k2kY&jq6\T
!9WD*+op3Uk2B/;U#Y:n!.=\E"pF&Mio]AqrW!%ok2YV%!!`klk2b[ak2iE>!Ns0H^V<&7!$&Yd^V7Iq
D$0b;!s/H&!r;m#!CFQ7^TR/."TeZ(!<<6$^B184"oJ?('u.Ks!!3'!&u`R[+93Lu]r4*/VOG97^:ub9
rP&G/YJ7jN!"P+*^F'%$^V<5<"9>aBY5J>%SA)`A/-$3q^Ts[9!1j+k">^#X's.A9!j#N+rW!$$!!!&s
!!WE'1p*j]Saug]!W;uu!rf;'P5k^_!!<e7XUb7/%$drs(]YASXHkQBP_K(<!A:/GXTL_XXf_O%%XY=[
*<6eUXZ-:^!2HZer;[+YXfW`H$a$P+li=Ts!1Ehe$T%h`'re77WiN+&!r`0%!<<*#q#COTX/`4go)Jak
r;Zg!ri6*_!!E-!!t_N6%f?;>PH1`%!#Vc:PVK5$K<)&QX"U1FWrkSTX/l1!%XP1V*WQnTX#U.]!2-B\
r;[+WWiI<D$`g>$d/_\s"+94kk5>8af&l,Sk19_)!!DB?ja?FqroO2cq#CHXjSJoY@cl_M!!)-phIHWJ
?8ps-ioU65k2kaf!/'Cqr;ZmFk2uXC!T`A@!!8_RI/O$H45o<#!!;6DS[JOf!!'G+^B>\[!2R@.^B:ni
!<`<$!!N6#!!<#t!$_EW!4D7q!WrEHrP&CA!!3'!$S&p+!!!'#"$OB5&cMb7^V=(WKE5HZ^B+N<KDrUn
$31aS^&n?80Yb=Y$N^;.ZG2D"!!KaFAc;Z9,eq)>!rrA:^NcRT!2fat"W7:?Ofb_hXf\K?!!<-"!!<*!
!!2rs!#bd<!2f2b!Wi?>rN-&*qu@*IXfVR'!<<0TXfW'3!!]R-9EK)3:&_6r!W[*:XVV3B%]ui7!!"@J
XXO8N!2?T@!!!)!X]#,u$QH4M)Zg!>XfZ(5!2fesUAh1r)?9btWrB%$UDs78rVup"r;ZfuqZ$U8ri6'o
!:Tsi!WX2<WrNG'!"0sNWrN,#!!4mTWt#%.#-4e!!cA!5ri6)%!,__9(C'pMX/Z4$!%+bH.00DKTW<;;
!!8ss;uQb'*36+[!WW5$X(12j_>j\BjQ>S'!!-*ZroO3hmJm@Ok2`c5!!D?Ek2ZF@r;ZlZk5,,ZiTC(=
&*;pR!##>4jlPV)!#"GUjSf,[j5Kq:!TrD?!!8YP+oVHC\E!\h!!2-Br;Zo]is<a,lN$YZ$3:,-!56.]
^BjrAqS*BO\[8WAS!8A=<#GT7$NU5-$GF3h]`8'5!VZQo"T8<%!<<N+^AnZ?!"+k'ZN(%-!!'dKT`+on
"2DSerW!Y#^V:6Y!->oi2ZNh[^UsRI"1Q%Xr;[,5^UjOI"i%egrW!#4^U*k=!l)JpV#ULsriH5+!<E#!
$a$P2UnF*1Iq`%Q'Dhb4#HY&0XRcDl!rDrt#lUk*#lO`+I''.D!WE'#Xf[T^!!<;)XV1U5'SNTj$31'4
XfX&Q!(O)l!!!)!XfVI$#cXr-!<<5(XV1U5!j&N"r;Zo$XW%*;WW37'X/`3)!<Dts$EBtsSX"kWBj*q=
qZ$a(WiN2#r;cQl!!<#t!!rP(!!rN'"FI2C!!3'!!irAZrW!$%X/cm4!#1$cWsSh,?`U4X!!#QjW;lo"
UoUKn!!oF%VuZl#X/cm4!!9.#U&=rmX/d6!!6"p?g?.DWrW!JhjlPO`k2tUAW/YOQ.h)UU!!D'>k1],$
"6S_-k552\-KLlu!!;6D8c8Vij5g.=!]B'$rW!!'jlQF@!Tqu4!!9gqf_kdO_<'5H!!23Dr;ZoMk+hkT
!TrI^!9*t[!<Bh4^B4iD"1%m?!5A-@!Obc%!!!H,^B2(K!V??l!WE'(!WW6$W5$'Lr;Zo.^O6"\"9B4O
^C:)A#qE^)!<<-#]>($<!!9=<[/L%LTYI&u!<BmL=TAF'!4'A,!!":Z^B"<7%DTY.!!*'6^V0lP!;c`r
XT#=(#QOq#n>u_i55bH]$3%%,XR6&g!WE'$Q*%0Zr;ZnuX_7S4!tVN9$2so++K_dE!!94'NW&nZSZS^e
!!8+]MZ*ScXfY(n!!*(oXb$NQ)m-7A!!<P0XW[TC!tVN9"/PttWW&q##QOq!rMopuq5aIp!Mi!Z!!!?)
WrT-e!!!'!!!AFcWg`kd!i;r1r;Zp1X/cR+!!4=EX8N#"W2kgT!!8RhU&G#nMQ;R4!"Q'18H8_k!2-BD
!!"">X8W)$$*1*MrW!$2X/Z9o!3uS,g#hGYrVuqfrT4RKk2bXdk2YRck2YUd\GH7.k2YUWo`4[c"(LBO
If06J^Z5e#!!20Cqu?c[jo#/\eE0@%!!7Q.W;Zbu8*3/;!!26Dqu?efjtlu:!TrMB!!20@qu?cZin+7Z
!!!&u!!'J,^B>VY!$AND^Au"A^B@mG!!"8C^At_@!!!&p!!!&p!"$!H^An?9!PcAnr;Zgc&&5jZ!rr=j
^UO7E!!L'O*W?$K^V<&8!!'dK7K<E,^V:-S!#NDbI/j7q^UF1E!#r\f!!N?&K>5)"!!0k8kPtU\riH;>
!!!h0n#Z^e!WW3=riH0ukl;$cXfVR)!!'.')>sOA2Qa(]!WW4TXf;:"!s5U,(B+:8XfXDY!<9/*2uipl
XfVj,!#2Q;BE/$GXf)4#!#2Q;!!<3$D69n8!!/jq#-4dA!!!k/ql9^sp8\<k!WW3?ri6$okl;$`X/c4%
!!'(#)uTaC2litZ!WW4RX/5dq!s5O((B+:8X/e)V!!oX+3<0$nX/cL(!"Z-2BE/$GX/#^r!#2K7!!<?(
!,\d9U]:M(jQ,J%!"#.TjQ>Uck2GIaroO7Cj8J-?!<)s#k2ta3kl:d[j6$:?!T`D?!<;3[!!5.?_u0Q9
k2lOAs5s7[!T`A@!!23Dqu?uaj9u"g%->/#!!2-Br;Zm3k1T&#\c;`3rkAG#rW!*'98fdW]_]AC^AP_K
VZQo"6N4_"XR?,i!<E&u!fOh.rW!$A^V9sO!!<7B^UO1B*!O*lJHGlR/&/h!!!3VD^Baf>%_oah!WZK?
^'"?7%Mump,Q[tS^Q8Eq!G&s[r;Zu8^R"p'dK%et!1Wti!&a`U"T^`/Q_geUXTXmj!!"kTXT4jT!!7>G
Xo8;&(9O\@r;Zn)Xf;:"!X#R,)/K?S!?eMH!!!$+XfVa,!",j1$NU6"XfV[(!!j4>XW%9@W3(FG!!6$"
Xo/5&Xf[0T!k/1!!!&DcWrP'W!!NBdFHrT"qPsUrr2Ts`!WW3Xri6$dkl:d,X/l4"!uJ#="8r3$?E9q%
!$)0BX)%h;!?nME!!!$+WiH:'!",d-$NU6#X/Z4$$31&=X/d3@!2QZ@rW!!tX/l1!"KSSS!!9"t!-J5&
qZ$d>BWTeIjSn9CjlYS%joXZ)@/U'-jlY]Ikl:c)j5p4>!TW8=!!3>c^AS$5jlR-Q!<;3[!!2*Ar;ZlZ
j8ArYk2?.;s5s:\!kRJ<rW!!#k2uUB!p8W"rW'#"!!3'!!<\kk^B9/i!!3#u$NU5/'.GV+Apght^AbkM
H2n'JL&SgfS-/`j!!2cn!s;rG#5nN-HG?ok!W[/R\,64-EkepZ!!BF>^-MYt!eJ+qrW!3m^V0^K!*R(J
rW!">^VBaJ(BLDJ^'4Q?^V;,r!s!>U])Vg5Tte?&!TX6u!!*.VriH0=p](O"%Nd#Y;eMa#XTW28!W[0<
XT=1Ync/an:9=Zt!!?f7W<*2'!*cS)qu?e(XeYjq".lWs1B%7TCos]9!!5*]Xo8;%8$/ik!!6H.Xo/57
PHCqi!!9:)*<6-@?*11.!!81_XXqNnlN$PW!<RuSWrR)5!!rZ9+=90LB:Q$&ri605!!3.=ri6'R!qH<n
!`,j"r;[+7X/,ju!*lS$qu?e)X.]Fl".H9j1]@@UCoaE3!!5-\Wr;u"8ZScg!!6H,X8N"uOVFjr"98M(
Wu_6B!*uY(!!!(ZX/dhJ!!GCGj5q'O!;ca%!=O\CiTB1_$N:#.'^"N>47<.Lj88lY$KSr#!!38b^\e'5
"m2BT!!7f8iV``X&EUY)!!26@r;Zl\dJa+I"Q\_D!!6Efir/oYjlZLA!X.Q6rW!!nk2uL?WrNA*?ba=i
YlFq'!!WN,!!<3JTDZG-[L!!8!4)U=!FGm,!;$6mT"eD,!!<8:^QAEp&Ttk'!4@L\!.DVs"9=Ot^V:E\
!!p*LNrT.\QG9d*!!mPY^AtX&)o'/e!"p6c^K^a="M_\k+27i"^V9jNH2bP]%Mc_^!TX7"!!#amXTG-q
!r;m$!W`9&!$$sqXTbX-!<<+oriH/pn,NNIX[`6h!j/SOrVuq+%'?W3VJlM8BW\B<!.4^I!"Su.!i`;J
rW!"NXeYjq#[FL6!2Y#VXf_R&&eqIM8cShmXfW<SXT2e3XTAK5riH80&?Q&U!8mh]:91CqSH&`f!!WK*
!!3-@M>XCXU]pi"!2'7k!)E"`!f3mJr;Zo"X*XaF&Rh`@!2FK5!,/F6!W[PHX/ca0!!9!tGl@[CJ,u^E
rW!40X/c5pH5*E\rW!QFX/ekn!!94%'c<tO@B6F1!+c)0!t#U?"0DS"!!DBCk)Jp3#"@\8k2b[9r;Zqc
jlY^o!!,FKqu?f\jsC!,&-h4X!4!=>!"A#P!!">&k2uUB!l<tBrW!!Rk+VbS#R'5N!3.=Fk2uUBs5s7[
!p8VF%KPVk#3OqG!"%cLjo>DDV>pc5^;%Fs+T;?K!<<*'!!!$"':HMJrP&BB+T;?@*WEeS^(^#:!!3)6
-[Z_6^V@D]!!3.H^V@@p6NI0,^;%Cs^S/EW!!!*'^V2i2!!BdHIf9<XHG@5,^-_q9^TIrB^V?BBrW!DA
^ULqi!=ccX]XPV$])KGE]Cc00!!!N-XT048!!!-"!!3X`XSf1$W>PU7!#GO8!"SZ%quH_u&n_hKXf\Z)
!!*(2Xf\Y+2#mUkr2gKiXfVR'!WoL+0E;(SWi^"7!"WYCXfJQ]!3NAo#XPSpMZNeW%BZb3XfML/Xf\\(
X_"R4XT5EU!6kKI%]ZS1WYt[6!!E0"!Y0g]r2Tjp)?'U9(B1?8WXeLuri6ZE&k]4*W;lo!!+i43VlM]U
!#63JX/`5$N2ruZ!!35&W\FJR!iE#4rW!I?X/i2!2?9eYR0Z-[X,$fU!"Gs/V5gKp$*(&*V5e+)ri6$t
^B!Es"5r>(iUd*T2;%'PjQ>L:quH`Y!9!;G#j141$NL1hjOX80":F;RcK5!)#NFn)k2]4sj8ArYjl64=
!m'L5rW!!,k2Zp"i;`l>jEpq-jlSr/!"n/O^Z*iF!9*(k^YoOIk2tdTX8i5$qZ$W!&&5inR/d3h!!!*$
!WX%$^AGYHWXo=4!!&Gd^AtG6!!!&q!!NB'!2$p<rP&_e!!3-#!?8bf^E*FT!#14&^V;$\^U+(C!#!#\
$31&,^V;#m!!jX\^V)#r!!p%4^C%VL!!!$"!3O#NU&G#lB`>aM9ECWs^S.G'!1j+k$\JEZ!WW3%!!*'4
J,68MQja#r!!*(QriH0kmf3BHXSf1%AcMl2!!!`4XT0.8!!%'=XU6"(XeZ!u!"Q-5#Q=])XfWN@!!j@B
XfNQD!!T>#XT>Lfqu?hhXf[W_!!$!tXT^ifL97S<li=Qr&=TZ"X+C<O!WW3%!!*'4I]E:G!gX5rrVuqM
ri6$fmf3EFWN,ot!bME5rW!'8WiN0:r;[=IWiN0?263DP!!!M/WsAV(!ir@ArW!3?X/i6B!!!1uri6(!
62U]bRB*BIrVupuri62d!/.AQMpVOS!!Ic4ioW)l!!4\.j8S0BjPt(S!!"nUjT'bu!!bmDhrX"^jU:qc
!o`5&qu?s<io]A'!9U-V!!2*Ar;Zl\jno)[j6#4s!!Kmpk2t:m!!@Q/k"PaS#m'/LirB'=i9!Y?!:Kmf
>lMJ=^,5]e!ZmcDrkAZO^V@9c!!<-"!AD1d^AqO-!!NE("9J`.r;[!*!!!$""o\K8%DTXZ!!3-#\@uk]
!!<3$!<<*$r;Zg!r;[**!rr<&!!!6*!!;rr!=&`+!!<6%!!3#u!!T(s!)!3l!%ImIrVus7K_heQWD*?n
rVupDrN-&lmf3Ll!!30'!W;uu"T8<#"9&90$*C<1!!*'"WNBA)!!<&u!!3#u!!3#u#m(/.!!*'""T\Z"
!!*6)p&G'pr;`\p!)*<l!NIUG!!3sgWrB%'WiN1s:&k=o!!+CGri6)n!!)Nh"T\T)!<WB$!!!0#!!!-#
!"B78WrW2$!!&jq>Q=a*qu?]tr;Zfur;[-*!WW3$!!!0'!Vl]r"TnAt!!D3\^]4JujlYIr!!kI@j5oF^
jQ=AV!!D3Bj6#A%p](?Wj88lY_;YQ^!:'XU!!*>4rkAKA#lXf*,FlLF^B1l^"o\K("9Ab9rkAKA#Oh]n
"8`&u"T8<#!Vuct\%dXq!!a=T^C1)D!!2or!!2ut!!N9$!!<&u!Wi?%!<</t!!!,r!!33%!M]Vq"fD:$
!Mou!!!+!nqQ0gu=p+a(!s/H+VuEe!V?QGh!!<#t!!;fn!i`;@r;[!6XfVm0!V-3j!r`0"!W2ot!VZQo
!r)`q!Vl_p!!*7tri6'o"o\K'*/1EiWrf,%"9&9&!WWD!ri6'p"oJAn!!!)t!!!)n!!9!tE;]b?'!&&>
!!2Wj!!<-"!!2ut!!2fo!!;oq!!1pV_Z0hDk2ka,qu@$bi9'+_jlY^?"8W!#[cZ]6ZJY`\!!9pt(&S(3
k)fZ)!!!)u!!#^k^BCP<.A=HP^B1lY!r`0+!WW3$WkZ9_^J+P*!!;`l!!<-"!!2ip"p4i*"1#[=r;Zo1
^T$l+"TSN'!<</o!!!)n!!!&r!!E<&!<<2'!!3-#!W2ot4oMJcQiS:hXS]+$WDruu!!!'!!!&DbXT1N^
!!!&k!!!&l!!WK)!!8ms5lCZaX0%`L!!!&p!:g*i!NQ2#!W2ot55hMbPlW"dWr&guV,dWr!!!'!!!S[h
WiN0aqu?]to)JakoDf's!!!(mX$Q[a!iN)`j8]/\kl:\ap&M8r&E`*:k%Xkr9]"pmk2YUc^&n*1"Dm5[
jlZ+6kl:aMk552\dH"o8!6P9AR/Xi$^9.7H!ju_Fq>^O$W;XI2RGIoD!r`0$SA2fCH7EL?^UjN'!9F1\
K)MeOSGK>hVH!]o!!*7hrN-'Ph>dNVrW!4ZXfZ.W;Q[(%li;V;!<@]MWr]5gqPs[m<W`*t!<n_dWrRb.
!!!'!!!n:ZX(<GQWiN)G!1X$!1Z[]\hg"5EjQ,Icj0Aa]!!-Wk"6Sb,1thp846,H1!!2*Ae$]7c!!*8.
rP&?ErP&E?@g)c2!!W<$#<0$)^;%Ff"mQ*^!!iZ,!!<3&!+iY=^B(ZGRK1b9!<]"nXT5F#XTG7o!r`0"
"8r3#.]!$F!MBPQ!!iW+!!3-$!)ffqXT>1hrW%NMm/R.hT)G\iW;WauThtmj!!!-"!!b$JX/`5$SHIdM
#Qau+!WW6$;l0Jo!MN0H!/LUYOQ5Kbk0jLrjQ>Ns!VZQtW93+%k)J!n"Tc?tjlW8W!2BMs'=GTi^AbkL
Zr[8/rVup!rVusBTDZG)[Li?:i;`iYqZ$U!WW9a5!=l"(XT>7ep](=4Mu9[XV[VMao`+snNr\JGmf3J#
U8t>pri6'o8,*&b)Mn<l!M^(R!!!)V!/^a]Y3+m+k2YU(p&G:ak2bUck-gKSVZ6f"!#Ms<^Bq2u73DsF
*(tphr4`ELZ5*E?!rDu\!!NE(!rr<'qZ$Zu!!TD'^]4BJUAM&!Tku_*#R;),D4pd."JQJ.!!2$Y!!*3&
!WW3%q#CBsO9"#8!>;%%WsPD83#Mu,'g6E*r2U"$T+M&'!T="^!<<0$!!;rr!!DinJcPHD!LDjHjoa`*
PS3in#SN6]k2kadig?SCPQ1ge!!!=poY:7;"IfW"!!1aQ!!2ut!!9h6X8i8*L@))EL'7\K!9*tY!MTS7
!!*:WmAg;A"U!9Tr;ZfuLB-95"$#E'jo+<Aj8J*Gj6#LajlYXd34Js?!!3-##Q=](6F-F%!5ABG"MVXV
49F4:!!N9$!!<&u!!LUJRfEElrVusUU@G>eU+ZQ$!!!*"!!!&t!!!)-!4Dk-"o\K&24s]F!35st"KJMp
0EL;9o`+snrVup!qu?]uR/kG2&X__CjQ5Odj6#@`k2b[eiT?NL!.k49!!!3%!!6H,^AbkI^A>SIX]Y]*
"O6uI"loZ<!!!-#!!,`\orS@d7f`Skc2[hHaT/"7!!E3#!_er\ri6%!qPsad8HAemq#JtG!!BA([f?kV
iTB4`iTB:`k2YLaG1lqJ!:'XJ!"0<LSZT<5]XFl5AI\V=!Wi?&h#IEWqu?]urW!!#!!1sWK)blZ$<)bN
V6$brR>XrLrVup!gAh3Tqu?]t^&X`)$O]pgRA-[[UR$^7$2so)!VHHU!!!)u!!!%p!4W"8!Bkb1g"3TK
6NP^;JcO:#!!0;(JcLB&JcLB&JcLB&aT)DE!!!&u!!!)<!.k43!!!&r!!!%u!.k1P!!!&r!!!%Z!.k3&
!4W"/!WE'!!r`0%"98E'o`+snr;Zg"kl?;8cN!qGrW!$%!!!&m!!!&u!!!)G!.k49!!!'!!!<9&!!2`m
!!3#u!!9J,JcLB&UAt8pqZ$^"!!!&l!!!&q!.k3[!!!&E!.k4:!9aC_!Ls.A!.k3K!!<<'!!<-"!!;lp
!!<*!!s&B%!VZSG!5\^<!WW3$rVup!pAb0oe,Y(#h#INY!!!'!!!!&o!!!&1!.k3&!0[E_!W2p(-ZPle
]YD1l[@mnJ-NF,I!!*'"!K7#V!"0fQO//kZXfJ:Y?6/50JcNXf$Q`T4TrG)mVkT,W*mF\:!8IP\"AY`C
k2FUe9Eh[$JcH/Y!!<3%!!-Z7^V@JZ^BhQg^92&J!WW7l!1Nrg!rW*%;P("mXSAn$SPoLh!!%TN[K$:/
r;Zt!R]EKhql9q$X/_Re!!2-\JcO!p%fq=Ck2,7_j5f@`hr`mF!QP1l!:9ai"98E&;mc>7!5ABG#JRQC
!WW6$!j_l`!!!*"!!5K_Xn&RqV*P.]!!!%e!2KSp!r`0#7%sCV!35st"0/(^!WE'!!W2qL!4i.BV<-k%
jlY^ck2tXbk2kafiMtW4JcP*:nGiOirVuqdmCrgi!rr?%!O2W]!!%]LXn/XqJ-(l6U]:CHmAg8:!qlVG
!5AL62>lS=jlPRbroOLHk2tdfk2bSTg&Q^)j8]Je!!<3$"98N<Yl)6F^8uQC%fcV@5]j-C^V9]^!O!3R
!.k4L!!`Q*!!3-%&"ia$$(GHZ$NL/711-OJXT>"(V?!"a#6Fl*!WW94SG]DoWgI<P$NL/71LL<PX/i9"
Wr\Y"MZBjZ#`7U&jlY^aF9qaD#R,D6k2GIbjb)t$JcO4!#m1//!!!*$!#2a:^B'TLrVup!rW!''!!":3
r4`?>(]XWh!.k4<!!r],!<<*$!!!P)r2g!M+Sl'@!WW3>K)D_QU([M-]E!cg"p+c*!!!'#!WWb(r2TjJ
+o20A!WW3?Jc)PNT+_2*T`CP^!hJE6roO25o`,%Lk2lU)!1&6;[f?E4rkAZOYrMgb!!2rs!!3'!!BRLa
^B:Y>!!;HdJcO4!!2'4l!MD"8!!+[ErN-0n!!!&H!.k4<!!&PgWrf;l/b8rC/tMsA".B2i!OVoa!!\;@
k2tW^!:g*nNTT<`k(B!#WrN>*!!3-$!1Ei$!kt?1oDf!p!!!1srkAKJS,<8<!6,!?!<<0"!!%]NXT=F`
nGiRlO8Z0\LZ&5b!:'XZ!!30$!WE'!K)VePWf$rK!!*1\ri6("KWkH9!!P7?jlYPpquH?h"]"+?jl/=d
!3ZA&!W2ot;Z=EH^7bQ-!!*'?OLDm:W.ReJ!!3-$!!&\k^B)&Nq>c*I_uKd'rN-'[qu@'>H`4'JQ#/Yd
!!3#u!0-rZ!(PiGJcO[.!(-[c!NM(U!"'KfUoLDXD*J+&!W;uuMZ0XWW^t&.JcPTH"Qne-iC`tI"XUb;
fjYTi!!#UijoFD>!1*Zd!OMd?!O2b+!!3k*^&,PF^:F`-(B=F9!!'==^V7&UNrZEb!2TUr!MBMn!!3[f
XST%#X)SdM!!&_lXT50f!.k3p!!&_lWr\amrW!!1L8t-O"0/8<')V_4T;nrlU"99r!9X=bUZU\#NVibW
52Q;$"m"h,im&>:!!JPGk2N>P!/(=QA\\5Z!'1#Y!A_7]^BhQg^6g)E!!,+Y^Aqc<!1s5k;Z3]t/H,VM
-`cpB!J23g!!"SKXT21Q!4i.1;uN`s/cG_N-`?a?"KJN&JK+Rg!%n/M!)`%^JcO=$"9IWGk2uRA"juGo
jlYY&joaW*i%t92"Qne-joNg/JcPEC"9\],!3cC:"df8i!?\rE^AsGr!!&>a^AtJ*!"8r0!<<*WZG4,g
^U"sT!!!,q!!WH(!!*'"!r)`q!W<!!!WW3&r;ZfuQ2h$h!!3.lriH0PrVus8X7E@mIf9<IJc;bOT'cRY
!rW*".\cmD!M^G)!!!)j!!!&k!!30$!p9Qa!!E?'!W\\gWrR_M!!*q8nuDb<rVuqKri6$frW)Hg!!<*!
#:c@HWiN1o(A@e/!q?6j!V69m!<<2F!5\^=KB;7V1]7:SeE-\l"6JS*jo4BFj5oC`.K0;M0]qKWKBN:<
R-*DjjT)!,!:'XY!!30$-N1[^+92EL[f*rF\nD1"H)\OU^As2k!!";C^Ao\M!"]/2!49MUQU\Eu^N';S
!<<2u!!!,u!!EH,!!!)o!!!0#!!30$"8i/u!!<<'!!iK'!!<&u!!8ho!$(s>";h+=#H.O&"fbN'-=iJ?
XT3PD!!!u:XT0F.!!oC&Xb&O2XfYn-!!!&s!!!)t!!EB)!!!&n!!!)t!!!)r!!<9&!!W?%!!2ut!!2fo
WrN,?rMp&=!!!8!rMp."<<=LXQ)ab_!-J2?!$(s<!$D+=n,N`fX/ge3UoUP&r;ZfuqZ$TtqZ$a$!<<*#
p&G'oqZ$Ttq#CKu!!!3%!!!&t!!!&T!6"p?jlY[er;[87j5oFcb5hSC$#&8YroO7A*;oj>k2YUal2V-e
jlS8t]&VoV!.k44!!!*"!!mV[^;$ZL"9>%m^B;3G$jHS0"q,"H^;%>jr;ZhurkAGQmJm[t!4T_X-3+,J
]"\pZ!VQKn!rDru"9SK$!!<*!!!<-"!!E)u!!W3!!a!-irVup"TE"um!WE'!?2gr/QiR6gMZ'XYOU2-g
!!W^,T<55s$2ji(RJs;g?1%\#!<B+$XW.<B!3<44oDejlqZ$Wu!W2ot!W;uu!WE'!!rDrt"8W!"7BLG-
!WW3$T)\ilrW!41X/`4c!<N7Wri6.$NsPpe!!*@("IuKmW<rM'!1*Vb!+#!m$NU7(X/d6@!W].!&+fi%
!W)it!Wi3!!!3#u!!3'!!!<#t!!E&t!_9;/rVup!klA$i"9mrIjD+Yo!(-\I!T-uT!!E=XioJej!!I3%
jlQ^<!;QTr^?">Q!!1L0bQ%\('?U=&!"/l/!2@3B^O-"]0>@G#"cr]e!!!0$!!E?'2m7u6!!%0@^Astt
!!!'!!!@kg^+0*^"p(++!WW3&qu?]t#QOo+!<<*#!!W<$!!<#t!!2cn!!Dur"hhZ6!!!&t!!!&0!:0[f
!WW4]riH98!!";CXTa%O!WW3%rW!'%!%OR[qu?_)riH0\m/R6*XfW`E!!RtV!<<*$q>^KrqZ$Tur;Zfu
oDndh!!;oq!j&LXRK*Km!!&"YWs,P:!!"=Fri63J!!3-#!r`0&!<=X=E;T\9@K*;-N9pTID6'Z[r;["P
WrW2#!r;ls!W)is"8r3"!Ug!g!r)`sWiIlL!2';p:uCEs$iU,/i8`t^,PD*<K,4Cc"TSbhj5`o$!!3eq
iVWZV1Zlp^!SZSh!5/@6!<BJ*^B6Cp!1a&'!2]Yp"9JQ*!!<*!!X/Q)r;ZgXrkAH?mf3Ci"ht8VWW<2%
!Wi9#!!<*!$6Vf,&-)_2!!>\XrW!!<7k=B8%iRr.0FRp_!<<<f9d^)O8,WDr>ee$B%1idF"98E&!QtJo
!!&enXTL$Q!/LQU!0dB^"9AK(!!3#u!!E)u!%e,O!2T#_#6V*1QiI0f!W;uu!W<!#(cXG_r;Zp$3&L[=
!!!Zm+Sc!J'0/'"#lju+!!Fu=*<QO,r;[*qXfXMg$j?V4X8qbj!29Cm""O?OL&S+QOT#4_!<<0$!W;uu
"8`&u/cMdNU$_mc"08Jg!!3-$r;Zfur;Zp;3B.HG!!33^2Z<[X'KRE5!"BW'3[P.5!<<*&1-Zf^!=([a
!!l5uX#LCo"TSUo!!AqWk2lRB"$>Z-j8`BN!!D<Ek,%GF!p/KZ`W-&#jmN2O!!NE(!!*)3rkA^M!!'RD
^V;`2rVup!r;ZfurW!-'!!<3%":b@F!kSF4oDejmrW!7N^V:0W!!<3$"9&9%!W[6<^B:52!'C1p#*&\m
^V7IWr;Zj"=T,u8^;'XI"+n;&^AYeJ!!*r5^B[1/!!!'#!!1sWa8c2@r;Zi!riH82!!'%uXT9pRo)Jmp
!!!',riH1$nc/XjrW!79XfVm0!!3-#!r`0$!<?F'XTOXb!&"8Q!dOdFriH0]r;Zj!7f0=e!!$j3XTAJ&
'Deg62ZWmY!Pnd%!;QTp!W;uuW;`h'$ig:)WiN0O!qQBp!WW3%$3$t*W:Bog!WE'*AZMj<!!!'#!!<-"
!W`:,r2Tp[!!"\OWs3eKV5pVsN;W_W!D*0i!NN4"!!@&<X/c-!!!!$"'Dea42us!Z!M08ne`PrTrW!&>
iTB;%!:Kmik2k[RmJm:qk2u=:!<hN`joOL@rW!8ek2d`d^?4G;:AY"pk2taeioC"<#8-([i9'1_j8K&W
joXT'k3i;N!<0_8^&S99rP&F<!!!*"!!r],!!*'%!!!$#rW!6,^V7Is!!!$"!;6Bs!WW58^UaLA!#5Tm
^V;<"'>M7M2nu5Y^V@Cq8@6+CrW!T8KYP8F"BrR.!!&J&^FB<k^V@8W!!a:S^:>4,+ThTB!!1dR`W5t>
!WW9%rN-/(!!!'!!!!&u!!!)s!!!*!XmlAq!<<,%XfDKt!#5QWXfW`H%]uil.]nqhXf\Y+3i/sZrW!T6
DQU#Y!_KMH!!%_TXWRZKXf\T%!!a+<Xf<*R)$.;Ki;ikX"0)>&!<&r#!rr<%rVup!r;Zg!q>^X"X/`5#
nGiao!!'(#VZHPm'`rHWX!.NRX/\-0X-&%8X/N'\U8k0k!!*1>&Z_rN!_TMF!!%YPX!%NJX/i)r!!a+:
WhpLL)?HH1qu?i]j6#A#!!DBEk2kq0"6SV*iU-[Ik2sq^!!4&#jo,5ik264>k$C"/k0r>jWo;J+!!3hr
jo,5ajtm&<2s00"!!;<E^\n-8k2OG^!13`d^AbkK!<<6#^Anc<!;QTq"T\M9"98E&!!2]l!trA`8,N>e
!r`0&!AD4&0E(qUZG2D)K)f0U^Dd@WJA8c"!<=7W^E`g[&&1[9+MYZ<!!!&/^PMjh!s5pGD>XA6!W;uu
!Ug#p!<'#$!!!*!XT/^s!!*0%rN5\lqu?g/XfXV]!!!&u!!=LKXX*lG#,A;F"`463riHn<!,AX;!WW3;
XfWNB!"5nj!#Vi?*<#p>WNC7@!!<8"X]`aGc2[jEri6)#!!<,"!"//p!<W?#X7$#j%]cWkqu?]tr;ZpG
X/dQG!!&YqX*4_a!)*<l'a+MOX/Z4$!#_i<)uosHX#pA"X/d9?!!9!tErH%@!Mc]!XoR\d!9*q>rW!&\
jQ>Uk!!DBDk2u(3!TW>8!<;3[!"PR^*rloR!9WD*!!!PlhYdETk2cI@!p'C^!W_BCr;Zo6jV[pr!k.4n
Q2gut^V0ic&HDg?rkAY1!!!'#!!;cm"q\P`^UjIHo)Jpp!*$\I&,Q>2!<<-#[_KEP!$8Va]Dqp4R_QTW
!!%)T[f?C/ZG3[F!<<*&!!'UFY5J>&^V;?$rW!#7^EN=OTE"tmriH83!!'"tXTglf!!*'"!VHEn!"Ak/
!3>Pg"%02m$hjW&Vld#u!!9+$XSr2*KrqHl!!$?-WVul!Trk*g!!NE(!3<5mr;Zo$XWm]D!j/RBg]4qd
#H+W&Wso%/V>dM"4TGH_!!!&l!!E_2WiN)e!!5ThWrNP%!!8prVu6SsUoUKo!!n4XWtbU7?`U%&!!8dn
T`"io!WW4uX-rnd!ir@Hr;Zo"WuAeSec5g!k2PJ$!!Bstk2Ye."6SS)e*[2:io]q7!jq+;r;Zo3jOaA2
!]T3&rW!!'k.glq!gMi<q>^TEk'[+-!TrJ@!!26CV#^#c!4Dg@#WVncT>&(TV#pJn!!<-"!<OeL!!#+[
^AtY=!!!&m!!I,Q^An?4!"8r0"M_]Q!!!$"ZbMq-!!9dIU&G#tZbMCu!"-KU+T)3B!Y)oZ.fKDK&AJ4[
r;[!N^:sXJ!girfV>dS!/-#[/riH3a!Vucr!WE'"!?h:?!&"8Q!2T&`"B_e.!!2rs"TeZ*XfY%j!!8pt
KDkiPX0%E]!!oC&FoVLIXfWH<!!E</XfW`F!!3S2Xo/5'+K_aG!!2TiVuQglri6;V!!%kUX/h9^q>^Kr
rVus"+oD<?0E/!RT`>)_!!HH*WrN1t!!NE(!ir@lr;ZnmX+L<N!iW/XrW!4tX)n=A#HOmCqu?j#$*1*M
rW!!.X/l1!"X0nH!!!&N!5ed=XQ8O+rW!'iiTB9*m/R7Lk2`K0!!35aj7r]S!<;3Z!!8eT2#[IVeE0C&
!!8qV*<#p=k2c=<!TrMA!<;3Z!!2*A\,bgpoDf,i^;%F&!<>Oe^B)&>rVup"r;[!&!!#m0Pl1R^G5f5V
UAOuk!qcNqOhSR2qu@oA!<<*<^V:6Y!<<,7^N]_]!5H8_"98V>^EW^Y-GR:q!!3#u$QHjp!<N6&Hb[,l
!!E9%Ge^hT!!&&YXTMi/!&jeX!BL2^!!!&u!!NB'!'mW8r;Zh+riH0]qu?]to`,&@Xf_<t!u%f=$N0r<
XfZ(5!W]@)%fu_5XfWKA!$&,Cq>^g9XfVR(!!-]6X8N#"A$)cs!36))N2iqZ>lXj`ri6("48o3[!W<!%
!<<*cWdamH!+Gl-!0-mV!!2`m!dgrJpAb:0X/cU+!#)E6@fQQ1X/ca4!!B7%)uosZX/l's#o'G?!!*'#
Auhj.!!6Z2VU,=_!!H!Qk2caF!<2*\iq*3OgFN4&":!rLk"tLH![cmgp&P-Squ?f\jTthcs5j1Z!TE2>
!!26Cq#CHXi;EWW$g,h7!!3GfbI%?0!!*.BrkAH6rVur%rkB8[(]aU:"98H&!"G4-^V?-:!!0.8^;"^f
!!30$!VZQt!<B%4Ylak()?g0B!<?39^An?9!$&bg/HYu'^V9mO!$AtjrW!">^V'IE$j-K;^V9aK"9?3O
SH8]i"1,b"!Lj)f!!*+,riH0grVuqjriH4$'E.t3!rW*"$%W#W!.t1M!1Ehg!+#$n"-p!^!W<!!!s/B$
'h,7,!!3-#'s4S^!WX@FXTAJ&(Tjh=!!6H.XS`&+!WYutXT/>&!3NAZr;ZnpX`aUCR/d6g?iI)+Qi6sb
S,TGhVA&q/!!<*!"UT[YX/ggN!!JXhWiKIp!!ACbScSci!<WB%!#8#)WrN2$!#;Q8,6@igX/c:%!#Vc;
rW!"*X/Z!s$N^<(X/c4#!W]:%LA_)RTrW:q!4)Y*"odWaE;fh?L#qIZaS,Z;0&l$S1]@@WE9?-A"nVfm
!!6QjP4ekVk2Z@>s5s7[!TrMB!!2-BrW!!&k1BD/!TiJB!!;<F4oG?^UZNN:!6tQF-bfSp"<[^G1;<b&
$G)sa6k'>@3et>]rkA`P0*!H9^;%E-mf3K7^UsOJrW!5$^BFT;FhbZnrVuu!^Au%J!!7nh\GcI6FhbKf
!!I,Q[Jg.1!=Jl-Ekf9d!!B(3^HMMq"i%f4!!!Y9!9jI`*W<)B(]XO`rN-C,O)6c]";WS0X8T.&X<[cf
rN-&<mf3K"XfML'rW!4gXTJP'@'-O4rW!"eXf_R&!cb?ArW!43XfDF%!a)S%r;Zp*!!$:*XfVL%"-Tdg
0`:tTXfX,S!"P@r!ZnAB#-4dB!!"CHri6C(NGUT\";WV0W2fit#c]0N+KMNCWuUR."CeF2!!3'!#a).i
!!$H.Wri8#!gTgerW!"=Who[p#[sd3!!!('X.oOm"UG).?E:()!!A:^X"jPQ"fn[U!!!N)!1s5nio]@a
r;[&[k2bUK:_N[+#T(tLk2tdZ!!!-%jl,@_mJm:nk19G1!FFgc!!3Adk5>8]C?F[X!!3qq_u9W;#3O>4
!!35aYke>$"m4D8!!6<_jSSuYk2b4r\c;`5rkAT(!WW:Go"PLF]hAD+Q+t)IYODMp"TUEp^AoDU!!5m0
]D_d:*5B5g!WX:U^0^d=)n3SB!!<4n^OlNu;,=sA!WW6X^O-$'^V9pPErNf]#TLM`"2DT3""h9+_uS<f
!1j+k"G6^T!FkT$#cp/h!._2RXInt^"Tn`SXfWH>!!5<cXSr2+'s4S<!<<n;X\A]o"0&DI!#G\:N3-ps
X$AnOXT8D%.BR4_?`gF4!+#T+$O%6H"Tkg./HR,u>H%Vl!!&JeWs""T!!-R"WsPf+4obS3X/i7in,NUo
!%P%M)?'U;5HCa^!!sC@WrN/#(TOK0rW!n6X*4OF!/[an!2r1LX/c7$!%Fs]!+;k.!ru[,Ws](FWs&R*
X"FGuX'D"l"FfLoju!&;!=.`tjlYXdk2YUck2tdfjlPFVrW!'Qk2tEPm/R1KjSSuYk10D1s5s7[!TN):
!!9mr+8u6G7HP3_e,TL2k5>8mj9kqkk2QFA"m4n.!!)-]!9NAB!!23anc5Qf!G9(F^B?@q!!&Gb^Au"D
^BqG,!!#3t^;%EnrVup!nGrR'"^XB\^V?H?!"QcYXpJ1E^S1].!<BmK4oPE^U;$WA!@J0P^C?aF^V:*V
%_ock[_I4$rP/@4rkAN;^Ur%s_>jR7rN-2O!WW4Ro;r.q-ia6$rN-&sm/[-f##$_'Xf[N^rW!2*Xe#_c
Xf[Z_!!9:)0`D%PO8Z0]*<lGE%>_'eXTnh5Xf\\&X_4^5XoAD#XTG&qX1JAt!:p0k<3#qu"=XBP!.t-L
!35jq$)T*N!&CUTX/f.c!<0#&9eq=$X,?iU#HOno#"P_pNVrhYX/[oR!!/%Yri6&@"obP3L8V)Q#65+3
X/VkpB;b^/rrE&!!h$*fQN.$eir8*=!!>+?k2cd/k2>C`jSn9CjlXP\!!MHDk2l^3!!q`Jjo>B<k2Su1
!!hZKJ,fT3k"u!V!Tr;<!"D]\k2bY)!9<2$4jN3PrW!/_k17!'$dSb6#iksck2YTOk1&f!WrN2%!4;a?
#-n40!!8(lq7d3L^V??R!!!)*rkAH>r;Zm"!!)Qi!29>*'XK7j!WW3*\\>hm\kW5*!<<YF^C'r?#;X'/
]c7"P/cEEaNr8qXAH'=M6i`^k^Sh,7!&snl!La&<!5nj;V>dRsU&G#n!HtR<XTaRl!!!%mriH0rlMppF
r2g-t+9;KC!!*8'riH4%55bH`$a$N9rW!0NXf\Z>!!"5AXT3VE!!#mqXU-lcLTR\E!!3-MriH0S[fG:c
!2BIn!2'5j!WdDCq5Xe$X/h$d!!!%kri6$mlMppCr2U7"+TVTD!!T7"X/`'_r;Zp-X/cL)!!jsQX/Zm7
!$eQDWrRAB!!#prWsL]bKWD/<!!3-Nri6$OS,iBc"KLMEk*5fE"!$.ZjSn9GjlY^bk2\l-!!JDGk2W6&
!!,^QroF1CU&+fm`T$%>d/*eDjQ?@?!p8Y%r;ZiYroO2&r;[-)k2bY)!'93'AGlK2k2bS^!1Nrl!WW6$
!`K!3!2BDl#nLjFYID9\\?Mb1EuG)Y!!&bl^Aq0s!!**%p&P*ol2^hbblG0P!!3'!!<GLbXT4F\!"00:
N1QuMXf7qT?5*8;!0@)\!($/Up](9pp&P*nR/kV7!!3'!!<GOcWrS+W!"00;MOL?AWhl5G?PNG=!0-rX
!(,oM!!2cnrrN&uJcOp5!9F.A!)EFl#m*VL]]8"fM,a`W!!H-ZjQ>U:!/1CS!<<02Q+k#J^7YN-!<<*$
!rrAs!!&bl^B'W$T`CYa!<I`LXT=@]r;Zj!!qlTqO0,McXf[/.!4`(7!Iq,MX/_$Xr;Zj!!qlToNW#mX
JE[&c!7LoO0&l$Ui(*59"]4:Bk2\5A!.k4B!!WH(!!*'&Y5Q*:Z8Vma!!!&s!!<9&5-b($!3NO,M?!YY
Sc,YkU+--Ep&G0q!&1,FXT4lX!2TYr!h0(g!h_%Fp&G0q!&C/EWrSRb!.k3c!!Ri6k2bZonGi`UjQ>Lb
HJedT!:'XX!!WH(!!*'8ZMqTL^;#dY"TeZ)!!!$"!WX=/r4`?@)?9fC!/pmY&Yf3*!du*l!!2rs!s&B<
K)D_OU_AsmVZ6`0TDkkpWiLLh!s/9!!s&B=Jc)PLTbR8%JcNUe!1*WH!oW2go`,1Nk2taek,@&8JcOa0
!!3#u!>r!:^C7,`4qI\r'0UH:^V@M^^B(GT_#T&epAb4-SboMqQsMHT!!3Wa?^LYl!Lsh#!0[B`':Sg!
#aJaP$ig>=0jk*JX/i9"Wr\V&MZBjZ!Ij,.joXRX"oA9*"_QoZiTB:`HL:cb!7:cH"8r3"!rW*"S%eI.
!5AHI!1)%5JcP-;!!<*!!!3#u!/BmC!.hTZL]@DVr;Zfur;ZkOWq*1jWrB%!J=HV-!!G:@j6#G%joFNA
jpC)1jQ>I_jQ8,rJcN:\#m().!!$-.^V@M]^Au"D^BCoA!<</`!.k4"!!WH(!<<*hV"(PfUd<*&JcP3=
#lt#,!!#Q`X/i9!WrT0qWr\n\XoO+T!N>,kk2PF`j6#@`k2k[ck2b['OoV9X#6Fl*!WW43YP#X2Y%7>.
!!3'!JcNOc#6=f)!<<*tTCo;eSPe)@JcP*:n,N[o!!!$"!)oB[Wr\YeW;qYQ!s+,<joFNBjoFH@joa],
IK>H/T)]6IEM9bO^;%:dU2qLI!.k3^!"0iRNhi_XXfJ4X?5_8nJcO=$$QiZ5Tr=ulW1f2X)S,p#!:Kmo
"AGZAiTAX`:^*EjJcGlR!!!%S!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4/!<3)r!!!,'!.k4A!!!(`
!0.$Z!qlVG!.k3&!:'X@!!!%t!.k3&!.k3&!.k3&!7(WF!OVoZ!.k3&!.k3&!.k3^!!30&!R(Oq!7UuK
!O)QU!:Kmf!L3Y:!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!:'W:!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4:!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!4;fW~>

%%EndBinary
grestore
np
grestore
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.systemdict beginIDXBWH+CambriaMath dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g24 <1C60D8A8C9B78AC36D27CB2CBDB650FB70B318EE4E9F756B2BB49FADC6FA38EEDB0175716757E182234A85474AC6C2DB37C1B8CB0A1240C8DE27D39BAAF06612FFBEEA48E1136300EC961E3E3C3F38BD50839D52F07BE6F2E3ED72280283F98831ED461FF369B5C99BDBDC846A37162455EB1C2EAECD35E1324E294AD9D9BE6749CC4747FEA3B7E8AB6960DFA574098591AF56EE9134D46F48D9AFD696FBAB84A9174F8CA36397C649F589E7E4610BF2E2FE7F5AEE83CB9D415C394AE3A0E153C20F04057570873C1C674363C4BA7315BD2C4A467ED8C231C98A2E0A0D7F2208169A00BABEBA2C04E432E2E60BF1D52E10> |-/g47 <1C60D8A8C9B7FD8495C2DF65A5463AD534371DAE94C19CB86356D209C7D6C1E226D289204650AEDC0C5DB933EA280BEF51E97D849F1D5AF17B5B5A3A495A50A69D266F27B86A6C00E37FC7C75C2E9ADBE84B2E554091790BF45661B778D414A218CE7B14F95A941C3351727FFE2E7C37B56851444B6E535ED91CE045164F8264127EDE5263296CE4B3E47AC8A40B88B856C086036B746885C441FE513E68AB75270EBD613EBF95A8E7700FB7D6828BC6B365E6F759D8BED90123CE2648EE61DFBF74B91E56740920EEC047BD0DB799767B1F102E1BCBFE004D3AB2BA8DCA736F1D34ED421EBE07BEEB0941A329645B621B14B49923B1821102EC07873AC85D43C3A412FF800FC4711DDE9EC07F10DCED37C661823FC19D8F6907> |-/g46 <1C60D8A8C9B730312D06925FC3E316998582E073D2AED498E58DF994C139E0633A35DDB51C0CE5513E55A383FCD32BD691C4AD1A14513F46BD9C1CC557A94AF2E9E53390B7BB475095B52324F63288A8415446317AB1445DDB3F2AD3C4F252D232AC22BB24F30A42A20CD28D93C86311707FA6850C9C87441E5FB601C2B08BD963D05CBACFD0E6E609> |-/g37 <1C60D8A8C9B82F05F6C813768BD5D002ABF1B23C4A74FEED94B5201E7FA9D45CD16059D7B8FAF1B06B6006C6C257BE6BB002400E3C46CA4726561227D353BF39F0691C5D40C5AE49D2A8AC6D95C7C7E8A1C0F34696397AEC3BC2C8205CED4FA0C1B1BFE00ED33912E4B00A76B772C268411B0BC5DDD61A3481233095BC1AA237FA93AC24C58ABD28> |-/g19 <1C60D8A8C9B686F7DD1E34B949843A0717C49DEF01E7F63307DC6EDF9189F9E1C7E243304BCB9CC528CBA9FE4A2AFA5EBB0F5CC557B504DFB2A1AAA0741241B06D47A1B589A63447119A90316F8883047262C5459AF14ECE3CF3CD633D0C1D744CE5A3B0F62A4A42DBE36BBF8BE52B641E847C37454F7B8E79FFB4C393D18703E06791B3041B7FC1203C80CA3A602BE69199F4AED392E1085B9B43D0E8E2293AC908D0D400D6D72A7164D30BCBB2AC1085777605E68FCA44FA7EE61F1F94DFBA38970CCE8EBEAB869B5DEEBE9EC620E3DD8893ED332EED885F79C34142DC2367BC7988D093F3A3846C523B579089012C731FC4053AD1DF9335193008243B520AE5D0B24299D010EB433820F1F9> |-/g31 <1C60D8A8C9B74F366DF1E770CA3E494094D4E642446DA20E6F84ACE5E7F844900EA6B95E236DD7C64831B36F8EEA3D3304CEBCA4341CD75D33F5BA8AEAD36FFA3CE25ECC0DD3620CA5C7C0F321D387FD019B740A0281F3BAA7002993ADEA529CE213E7010BCC3579D4254D836CCAC683318FEEB419D9D7F0F18C5597065EE857D0B3AD5EF35537610674490632FA763F07E9BA04E83A1F87C1BD4F> |-/g35 <1C60D8A8C9B7D7E8FB996D074986BF26D373F1D7F73FA534936AB5DF9573EA221DF8A11B569934389D9990AD3D8378E7C9BF213C5F6C0E36D6FF86AEC4100260F5837D9C00E1857FCF069E50BAECE93D43FEFFDF7F5191529DCA3E5151892437B68597EFBADE24BE7B5D621BCEE606577A3339AF72F9882F0739E1914B207B4826B31025245D6E4FAD32E93C01DA8ABEDEE152BC02735B49BDECCDF33522E2A3E72017C5D46206C3FA5AAE15842CC1439CF4C95183213F39A45586A1A8C86D73A5C05A42FFE4D20C72055029FA44FBE59ED8CE1280B2623DC1189DC2869A651715161E5FCD26078BEEBDD2CD64B9217B6D477873D4691D494ED70100FF132CA454E4EBE32F186B6AE6A0184BF46AE11A08FC3DF2F3CB966826EA30B3ECEDF9563805403FA5C5819D> |-/g32 <1C60D8A8C9B7F7BF9570FBB742D272A1DB04B6286D40FEAC55522A4C20CCADD483BA0BFC1818D8D0A744F7194199C3D4CFAFF04D16908AC30FAB792A5E18348B36E87CEB47F87CD3AB28D0E570A72E2E6BF9B496D8AB06E7401D7C756C683A54DF00C64BD40C5CD441B160916C57700FD48ACED3A38862B27A17665880436D0F952BD9F15E608C8E3216E4C95763214465F3762C1258CBB1F1C075F0564AEDCF8C621AFC5675A318186EEB217F26A1D29C8680976834D70BE4FB1DEECD0DF9F94B5EC4A77BEBD681A6AEC5ABBA6B30727DB0A2773ABCC919E5C74C1678A6A26A9DF2E441304E913B49F1AF2FBD649534FAEB8DA36EE0EFF4841F723A6E2449716FD660CCD998900E5A138CD1F1300A0766F2B1363FD2F8CB0A17D6C0CCC6FD274C940675652B8E31A82BB9FEB9781C0CD35621> |-systemdict /gcheck known {setglobal} if end {end} ifendIDXBWH+CambriaMath /Encoding getdup 60 /g24 putdup 61 /g47 putdup 62 /g46 putdup 63 /g37 putdup 64 /g19 putdup 65 /g31 putdup 66 /g35 putdup 67 /g32 putpop%ADOEndSubsetFont
/IDXBWH+CambriaMath*1 [33{/.notdef}rp /g22 /g42 /g39 /g60 /g26 /g43 /g45 /g29 /g40 /g33 /g17 /g57 /g58 /g59 /g56 /g27 /g28 /g15 /g41 /g48 /g6 /g62 /g8 /g18 /g38 /g50 /g23 /g24 /g47 /g46 /g37 /g19 /g31 /g35 /g32 188{/.notdef}rp]IDXBWH+CambriaMath nfIDXBWH+CambriaMath*1 [14 0 0 -14 0 0 ]msf675.164 42.9575 mo(<=\)\)\(>?"3)[7.37524 8.00531 11.7571 11.7571 7.7533 5.49927 4.37921 7.50128 0 ]xsh674.191 62.6375 mo(@=#>?&#?A\(>?"3)[11.8748 7.99683 4.37073 5.50488 4.37079 7.74481 4.37073 4.37079 6.4989 7.74493 5.50482 4.37085 7.50684 0 ]xsh675.086 82.3175 mo(<?B\)"?C)[7.37524 4.37921 8.62122 11.7571 7.50128 4.50525 0 ]xsh674.937 101.997 mo(2"3A\(>)[8.37476 7.5069 7.99683 6.4989 7.74493 0 ]xsh[4 3 ] 0 dsh
466.095 27.3186 mo
466.095 17.4281 474.113 9.41031 484.003 9.41031 cv
755.007 9.41031 li
764.897 9.41031 772.915 17.4281 772.915 27.3186 cv
772.915 98.9497 li
772.915 108.84 764.897 116.858 755.007 116.858 cv
484.003 116.858 li
474.113 116.858 466.095 108.84 466.095 98.9497 cv
cp
.675593 .606348 .595972 .467292 cmyk
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/IDXBWI+TimesNewRomanPSMT*1 uf/IDXBWI+TimesNewRomanPSMT uf/MAAAAA+TimesNewRomanPSMT uf/IDXBWH+CambriaMath*1 uf/IDXBWH+CambriaMath uf/KAAAAA+CambriaMath ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
