%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (\346\274\224\347\244\272\346\226\207\347\250\2776.pdf)
%%Creator: (Adobe Acrobat 19.12.0)
%%For: raincuoh
%%CreationDate: 2020/5/24, 下午12:02
%%BoundingBox: 0 0 832 431
%%HiResBoundingBox: 0 0 831.5433 430.2081
%%CropBox: 0 0 831.5433 430.2081
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 552 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-05-24T03:58:40Z"
   xmp:ModifyDate="2020-05-24T03:58:40Z"
   pdf:Producer="Mac OS X 10.13.6 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 5 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -430.208 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05176e-05 0 mo
3.05176e-05 430.208 li
831.543 430.208 li
831.543 0 li
cp
clp
-30.3167 479.366 mo
929.443 479.366 li
929.443 -60.6335 li
-30.3167 -60.6335 li
-30.3167 479.366 li
false sop
0 0 0 0 cmyk
f
-30.3167 479.366 mo
929.683 479.366 li
929.683 -60.6335 li
-30.3167 -60.6335 li
-30.3167 479.366 li
f
78.018 231.003 mo
93.9441 231.003 li
93.9441 166.038 li
78.018 166.038 li
cp
.441352 .329351 .127382 0 cmyk
f
93.944 166.037 mo
112.034 147.948 li
112.034 212.913 li
93.944 231.003 li
cp
.597314 .476936 .27628 .0295415 cmyk
f
78.018 166.037 mo
96.1075 147.948 li
112.034 147.948 li
93.944 166.037 li
cp
.338109 .248936 .0951858 0 cmyk
f
1 lw
0 lc
0 lj
8 ml
[] 0 dsh
true sadj
78.018 166.037 mo
96.1075 147.948 li
112.034 147.948 li
112.034 212.913 li
93.9441 231.003 li
78.018 231.003 li
cp
78.018 166.037 mo
93.9441 166.037 li
112.034 147.948 li
93.9441 166.037 mo
93.9441 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
448.877 139.48 mo
448.877 133.799 453.482 129.193 459.163 129.193 cv
500.309 129.193 li
505.99 129.193 510.595 133.799 510.595 139.48 cv
510.595 247.392 li
510.595 253.073 505.99 257.678 500.309 257.678 cv
459.163 257.678 li
453.482 257.678 448.877 253.073 448.877 247.392 cv
cp
.128695 .0653391 .00103761 0 cmyk
f
125.557 150.608 mo
125.557 138.781 135.144 129.193 146.971 129.193 cv
262.408 129.193 li
274.235 129.193 283.823 138.781 283.823 150.608 cv
283.823 236.264 li
283.823 248.091 274.235 257.678 262.408 257.678 cv
146.971 257.678 li
135.144 257.678 125.557 248.091 125.557 236.264 cv
cp
f
133.981 231.003 mo
149.907 231.003 li
149.907 166.038 li
133.981 166.038 li
cp
.452888 .102724 .652125 0 cmyk
f
149.907 166.037 mo
167.997 147.948 li
167.997 212.913 li
149.907 231.003 li
cp
.579492 .258854 .746456 .060029 cmyk
f
133.981 166.037 mo
152.07 147.948 li
167.997 147.948 li
149.907 166.037 li
cp
.359045 .070985 .501427 0 cmyk
f
133.981 166.037 mo
152.071 147.948 li
167.997 147.948 li
167.997 212.913 li
149.907 231.003 li
133.981 231.003 li
cp
133.981 166.037 mo
149.907 166.037 li
167.997 147.948 li
149.907 166.037 mo
149.907 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
186.544 231.003 mo
202.47 231.003 li
202.47 166.038 li
186.544 166.038 li
cp
.0750439 .336156 .370306 0 cmyk
f
202.47 166.037 mo
220.56 147.948 li
220.56 212.913 li
202.47 231.003 li
cp
.270817 .460182 .518425 .0242313 cmyk
f
186.544 166.037 mo
204.634 147.948 li
220.56 147.948 li
202.47 166.037 li
cp
.0588388 .267033 .285466 0 cmyk
f
186.544 166.037 mo
204.634 147.948 li
220.56 147.948 li
220.56 212.913 li
202.47 231.003 li
186.544 231.003 li
cp
186.544 166.037 mo
202.47 166.037 li
220.56 147.948 li
202.47 166.037 mo
202.47 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
241.067 231.003 mo
256.993 231.003 li
256.993 166.038 li
241.067 166.038 li
cp
.112551 .134554 .616968 0 cmyk
f
256.993 166.037 mo
275.082 147.948 li
275.082 212.913 li
256.993 231.003 li
cp
.306981 .29102 .741237 .015259 cmyk
f
241.067 166.037 mo
259.156 147.948 li
275.082 147.948 li
256.993 166.037 li
cp
.0886549 .10309 .479072 0 cmyk
f
241.067 166.037 mo
259.156 147.948 li
275.082 147.948 li
275.082 212.913 li
256.993 231.003 li
241.067 231.003 li
cp
241.067 166.037 mo
256.993 166.037 li
275.082 147.948 li
256.993 166.037 mo
256.993 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
158.871 194.124 mo
179.382 194.124 li
179.382 195.624 li
158.871 195.624 li
cp
178.382 191.874 mo
184.382 194.874 li
178.382 197.874 li
cp
.697566 .635523 .625452 .606073 cmyk
f
105.036 194.118 mo
128.382 194.118 li
128.382 195.618 li
105.036 195.618 li
cp
127.382 191.868 mo
133.382 194.868 li
127.382 197.868 li
cp
f
287.065 150.608 mo
287.065 138.781 296.653 129.193 308.48 129.193 cv
423.917 129.193 li
435.744 129.193 445.331 138.781 445.331 150.608 cv
445.331 236.264 li
445.331 248.091 435.744 257.678 423.917 257.678 cv
308.48 257.678 li
296.653 257.678 287.065 248.091 287.065 236.264 cv
cp
.128695 .0653391 .00103761 0 cmyk
f
295.489 231.003 mo
311.416 231.003 li
311.416 166.038 li
295.489 166.038 li
cp
.452888 .102724 .652125 0 cmyk
f
311.415 166.037 mo
329.505 147.948 li
329.505 212.913 li
311.415 231.003 li
cp
.579492 .258854 .746456 .060029 cmyk
f
295.489 166.037 mo
313.579 147.948 li
329.505 147.948 li
311.415 166.037 li
cp
.359045 .070985 .501427 0 cmyk
f
295.489 166.037 mo
313.579 147.948 li
329.505 147.948 li
329.505 212.913 li
311.415 231.003 li
295.489 231.003 li
cp
295.489 166.037 mo
311.415 166.037 li
329.505 147.948 li
311.415 166.037 mo
311.415 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
348.638 231.003 mo
364.564 231.003 li
364.564 166.038 li
348.638 166.038 li
cp
.0750439 .336156 .370306 0 cmyk
f
364.564 166.037 mo
382.654 147.948 li
382.654 212.913 li
364.564 231.003 li
cp
.270817 .460182 .518425 .0242313 cmyk
f
348.638 166.037 mo
366.727 147.948 li
382.654 147.948 li
364.564 166.037 li
cp
.0588388 .267033 .285466 0 cmyk
f
348.638 166.037 mo
366.727 147.948 li
382.654 147.948 li
382.654 212.913 li
364.564 231.003 li
348.638 231.003 li
cp
348.638 166.037 mo
364.564 166.037 li
382.654 147.948 li
364.564 166.037 mo
364.564 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
402.575 231.003 mo
418.501 231.003 li
418.501 166.038 li
402.575 166.038 li
cp
.112551 .134554 .616968 0 cmyk
f
418.501 166.037 mo
436.591 147.948 li
436.591 212.913 li
418.501 231.003 li
cp
.306981 .29102 .741237 .015259 cmyk
f
402.575 166.037 mo
420.665 147.948 li
436.591 147.948 li
418.501 166.037 li
cp
.0886549 .10309 .479072 0 cmyk
f
402.575 166.037 mo
420.665 147.948 li
436.591 147.948 li
436.591 212.913 li
418.501 231.003 li
402.575 231.003 li
cp
402.575 166.037 mo
418.501 166.037 li
436.591 147.948 li
418.501 166.037 mo
418.501 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
266.544 194.118 mo
289.89 194.118 li
289.89 195.618 li
266.544 195.618 li
cp
288.89 191.868 mo
294.89 194.868 li
288.89 197.868 li
cp
.697566 .635523 .625452 .606073 cmyk
f
520.272 150.608 mo
520.272 138.781 529.86 129.193 541.687 129.193 cv
657.124 129.193 li
668.951 129.193 678.539 138.781 678.539 150.608 cv
678.539 236.264 li
678.539 248.091 668.951 257.678 657.124 257.678 cv
541.687 257.678 li
529.86 257.678 520.272 248.091 520.272 236.264 cv
cp
.128695 .0653391 .00103761 0 cmyk
f
528.697 231.003 mo
544.623 231.003 li
544.623 166.038 li
528.697 166.038 li
cp
.452888 .102724 .652125 0 cmyk
f
544.623 166.037 mo
562.712 147.948 li
562.712 212.913 li
544.623 231.003 li
cp
.579492 .258854 .746456 .060029 cmyk
f
528.697 166.037 mo
546.786 147.948 li
562.712 147.948 li
544.623 166.037 li
cp
.359045 .070985 .501427 0 cmyk
f
528.697 166.037 mo
546.786 147.948 li
562.712 147.948 li
562.712 212.913 li
544.623 231.003 li
528.697 231.003 li
cp
528.697 166.037 mo
544.623 166.037 li
562.712 147.948 li
544.623 166.037 mo
544.623 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
582.095 231.003 mo
598.021 231.003 li
598.021 166.038 li
582.095 166.038 li
cp
.0750439 .336156 .370306 0 cmyk
f
598.021 166.037 mo
616.111 147.948 li
616.111 212.913 li
598.021 231.003 li
cp
.270817 .460182 .518425 .0242313 cmyk
f
582.095 166.037 mo
600.185 147.948 li
616.111 147.948 li
598.021 166.037 li
cp
.0588388 .267033 .285466 0 cmyk
f
582.095 166.037 mo
600.185 147.948 li
616.111 147.948 li
616.111 212.913 li
598.021 231.003 li
582.095 231.003 li
cp
582.095 166.037 mo
598.021 166.037 li
616.111 147.948 li
598.021 166.037 mo
598.021 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
635.782 231.003 mo
651.709 231.003 li
651.709 166.038 li
635.782 166.038 li
cp
.112551 .134554 .616968 0 cmyk
f
651.709 166.037 mo
669.798 147.948 li
669.798 212.913 li
651.709 231.003 li
cp
.306981 .29102 .741237 .015259 cmyk
f
635.782 166.037 mo
653.872 147.948 li
669.798 147.948 li
651.709 166.037 li
cp
.0886549 .10309 .479072 0 cmyk
f
635.782 166.037 mo
653.872 147.948 li
669.798 147.948 li
669.798 212.913 li
651.709 231.003 li
635.782 231.003 li
cp
635.782 166.037 mo
651.709 166.037 li
669.798 147.948 li
651.709 166.037 mo
651.709 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
499.751 194.118 mo
523.098 194.118 li
523.098 195.618 li
499.751 195.618 li
cp
522.098 191.868 mo
528.098 194.868 li
522.098 197.868 li
cp
.697566 .635523 .625452 .606073 cmyk
f
428.921 194.118 mo
452.267 194.118 li
452.267 195.618 li
428.921 195.618 li
cp
451.267 191.868 mo
457.267 194.868 li
451.267 197.868 li
cp
f
660.99 194.118 mo
684.336 194.118 li
684.336 195.618 li
660.99 195.618 li
cp
683.336 191.868 mo
689.336 194.868 li
683.336 197.868 li
cp
f
116.662 194.048 mo
118.291 186.534 li
119.949 179.076 li
121.665 171.731 li
123.467 164.558 li
125.384 157.616 li
127.443 150.965 li
128.537 147.762 li
129.678 144.655 li
130.869 141.649 li
132.114 138.751 li
133.418 135.969 li
134.785 133.309 li
136.217 130.78 li
137.72 128.387 li
139.298 126.139 li
140.955 124.044 li
142.695 122.109 li
144.522 120.341 li
146.44 118.751 li
148.454 117.345 li
150.566 116.134 li
152.778 115.126 li
155.094 114.329 li
157.514 113.753 li
160.041 113.405 li
162.674 113.291 li
165.414 113.416 li
168.256 113.774 li
171.196 114.354 li
174.233 115.149 li
177.362 116.151 li
180.582 117.352 li
183.89 118.743 li
187.283 120.318 li
190.757 122.069 li
194.31 123.989 li
197.938 126.07 li
201.639 128.304 li
205.409 130.685 li
209.245 133.205 li
213.143 135.857 li
217.1 138.634 li
221.112 141.527 li
225.177 144.531 li
229.29 147.637 li
233.45 150.839 li
241.888 157.497 li
250.467 164.449 li
259.157 171.634 li
267.93 178.995 li
276.757 186.472 li
282.567 191.416 li
281.595 192.558 li
275.788 187.617 li
266.962 180.141 li
266.964 180.143 li
258.195 172.785 li
258.199 172.789 li
249.514 165.607 li
249.519 165.612 li
240.948 158.665 li
240.955 158.671 li
232.525 152.019 li
232.532 152.025 li
228.378 148.828 li
228.384 148.832 li
224.276 145.73 li
224.282 145.735 li
220.224 142.736 li
220.231 142.741 li
216.226 139.853 li
216.234 139.859 li
212.286 137.088 li
212.294 137.094 li
208.406 134.449 li
208.416 134.455 li
204.591 131.942 li
204.602 131.95 li
200.845 129.576 li
200.857 129.584 li
197.17 127.358 li
197.185 127.367 li
193.572 125.295 li
193.588 125.304 li
190.053 123.394 li
190.072 123.404 li
186.618 121.663 li
186.64 121.674 li
183.271 120.11 li
183.296 120.121 li
180.015 118.741 li
180.044 118.752 li
176.855 117.563 li
176.888 117.575 li
173.794 116.584 li
173.833 116.595 li
170.838 115.811 li
170.883 115.821 li
167.991 115.25 li
168.043 115.259 li
165.256 114.908 li
165.316 114.913 li
162.639 114.791 li
162.705 114.791 li
160.14 114.902 li
160.211 114.895 li
157.755 115.234 li
157.827 115.221 li
155.477 115.78 li
155.547 115.76 li
153.3 116.533 li
153.367 116.506 li
151.219 117.484 li
151.282 117.453 li
149.229 118.63 li
149.285 118.594 li
147.324 119.963 li
147.374 119.925 li
145.501 121.478 li
145.544 121.44 li
143.756 123.169 li
143.793 123.131 li
142.086 125.029 li
142.117 124.993 li
140.488 127.053 li
140.514 127.019 li
138.959 129.233 li
138.98 129.201 li
137.497 131.563 li
137.514 131.534 li
136.097 134.035 li
136.112 134.008 li
134.759 136.642 li
134.771 136.618 li
133.478 139.377 li
133.488 139.355 li
132.251 142.231 li
132.259 142.211 li
131.076 145.198 li
131.083 145.18 li
129.949 148.27 li
129.954 148.255 li
128.866 151.44 li
128.873 151.42 li
126.82 158.048 li
126.827 158.026 li
124.915 164.949 li
124.92 164.932 li
123.121 172.09 li
123.124 172.078 li
121.411 179.413 li
121.413 179.405 li
119.756 186.858 li
119.756 186.854 li
118.128 194.366 li
cp
282.081 191.987 mo
282.502 188.406 li
285.127 194.58 li
278.614 192.976 li
cp
.57644 .380835 .0576486 0 cmyk
f
.648737 .571832 .564172 .346532 cmyk
%ADOBeginSubsetFont: MAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2.043 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /MAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000010846670
676d000000000000114000000a59676c79660000000000002bec00000190
686561640000000000001b9c00000036686865610000000000001bd40000
0024686d74780000000000001bf80000000c6c6f63610000000000001c04
000000086d6178700000000000001c0c000000206e616d65000000000000
1c2c0000002c707265700000000000001c5800000f936764697200000000
0000000000000000058e0000054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe00313000000ad000000ad0000
000000250096009f002400f0013100c200c0004a00a60041005000940047
00cf00af000e007901cb00040023004400a80025011f0002004600170105
009900d9005c007200e500e00028004b00de011200240045007000160039
ffe90016004b0088ffb900d9000a004300ae00ba016c0153002f00430048
022c012b0025008fffc000170028ffcdffd80025009d00e50124ffb10048
009d00e600110027007f00910012006a00cafffc00000024006200a7017c
01e900210060008b0434048aff6b003b00b500d5014bff6b004d007905d8
09b5006c009100a3011701c0ffdfffe700be04010065007f008200880099
00b200c0022e034305a000200026003d004e00610065007b00d901130131
0340ff27ff42ff99004e00a700f2022b02c603070011002b0049005f008d
00a100af00d600e400f5010b0135019d01ab01ab01d101ee05d80000004b
0075007a0080009d00a600a700ac00b90131013102170217000200170029
00550080008f00a500b200b300d0014b015901c001c103a50530fe3fff14
ff15ffe7ffff002a00580099009f00c100e400f40130015901ab01ab0322
0374041e04740532fd81004d0064009c00d000d100d600de00e500f500f8
012a012a01e1027e027fff57ffa8ffe500000008001f00380051005a006f
0076007700a200c000c200c400f101fb0209027e02cf04c5057a05f0ff92
001200260042004b004f005100530064008b00ae00b200b800b800d600f5
0111012001310138014e01520167018f019601b801d901d9020602210271
02ea03b003cb03dc04360505ff3a00120016001e001f002300570068006c
007e0088009200a500a800c500c901150126012d013001d601d901f6023b
0244024402a302cf02de0385038f04fc0586fee0feebfefbff8a00070044
00470058007500aa00e400ef011601200129016a017301e3027e029002b4
030e0310032303350341035403590388039403c803ce047204ab04da0549
056105ab0761fe6efed1ff4bff84000000010006001e0027002c00340037
00620066006a006b006c007000700072007c0081008a008e0091009200a0
00ab00b800bf00c900d500dd00ec00f40100012101300169016a016d017c
0185018e018e019901ac01c101c501c901e101f601f601f6022202220228
0236023f02430246026702850285029402d002d602e8031c0363037f0380
0380039e03b603d90400040404ff053205320548058b05a706cb07280748
076208ccfcedfd2afd59fddefe00fe1afe5bfe96fec1fee7ff56ff790001
0025002d002e007c00870091009900a100a500a500aa00af00b600c600cc
00d700dd00ec00f201020105011701180123012a012c0131013f01470149
0149014d01510151015501550157015a015a0161016201680168017f0180
018201830184018d0195019501950198019901a501a901b601b601b701ba
01ba01d501df01e601ea01f2020002000203021702250227022f02390243
02430247024f025202520267026f026f027002720276027e02a702b302b9
02d603130325032d03610371039903ae03c203d403f90402042c042f043c
04560467048304cf04d104d804fb051f05450568059e05c2061b06340655
066a069806af06e806fc070607500762077c07d407ff082500ad00c700aa
00b5000000000000000000000000002f06cf01730514047802df009c0018
037005870155002500060254036c038e03d2056601f0032001da018a0369
036bffa3034602f8036f015602bf0122031f053a0366008c00ff01ab02e1
02f402e70415015402e90128049101b7026f034302060000000005d30415
048305e8000002d7003a027d01c002c503830383ffbd003a059e01df059e
02d1002004e0021300df01c001870297000000ce0269028b0058043405fb
0069015a01a905780182013e0288012a03d4049e00e5032302f301f00196
007a00cd014a0424025e023901ab00cf00fd011e00ed0171007001950040
01bb01dd01b8000101a803a7014c020c018d01b0020d0137010000cd0321
01d4030a00590000000001260215015002f0025503bc06d00335010100d0
00d2007a01030130007c000000000000000000fe006e006600940227002b
0045004d00d3013200180097004100f4febcffe9001605d8058b009100a1
032c00520030005d02cb003a009200e500e500580086003200ba00990088
00300298007cff8001640028004d0065000200b8016a002f010b00110017
0100007f00040016022200a6005f000000f8000a00ca0043004b01ee0077
012000f401c00028045f0000008c044500c20060007b008b008b0064005d
00c2009c009206b505d3004f011700000420fe9e00cc00dc005e004600e3
0032001a003c0091005a00a1042c0041002000490071009c009cfe480040
0040008600cb0102007d003a003e006a0050044800290096ff6a00970069
00e0004c001b00c90069ff970043ffbd0052ff83ff8b005fffa1ff5c0067
0053ffa8002a0076ffb20036008705590256052b043400de00c901c40048
00db018b00b3004800da01160125011800ea00ea00ae0000003e05bb008a
04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5
004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c
004f00bc00a5070500ab0080001e05a50025008b04660230006900290016
012f0080005c059f03d703f1047000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000160016001700180018001a
001b00210029002a002a002c002d002e002f003200340036003700380039
003a003b003c003d003e004200460046004a004c004d004f004f00530053
005500570059005c005c005d005d005e005f006100640065006700680069
0069006b006e006f00710076007600770077007d007e007f008000810082
008600870087008a008d008e0096009600970097009c00a000a200a300a6
00ac00b300b300b600b800b900be00bf00c100c200c400c500c600c700ca
00ca00cb00cc00cc00ce00d100d200d300d700da00db00dc00de00df00e0
00e000e300e640578574737271706f6e6d6c6b6a6968676665625d55544f
4e403f3e3d3c3b3a393837363534333231302f2e2d2c2b2a292827262524
232221201f1e1d1c1b1a1918171614131211100f0e0d0c0b0a0908070605
04030201002c4523466020b02660b004262348482d2c452346236120b026
61b004262348482d2c45234660b0206120b04660b004262348482d2c4523
462361b0206020b02661b02061b004262348482d2c45234660b0406120b0
6660b004262348482d2c4523462361b0406020b02661b04061b004262348
482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44
235920b0ed51582320b04d44235920b09051582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217
453ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b0
50515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177a
e4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177a
e41b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177a
e41b21b0177ae45959182d2cb0022546608a46b040618c482d2c4b53205c
58b002855958b00185592d2c20b0032545b019234445b01a234445652345
20b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a40
b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b3194020
1945208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f43
23430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343
650b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b00325
2349b04060b0206320b000525823b002253823b002256538008a63381b21
2121212159012d2c4bb06451584569b00943608a103a1b212110592d2c01
b005251023208af500b0016023edec2d2c01b005251023208af500b00161
23edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0
01610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb0
2a2a2d2c352d2c76b802b023701020b802b04520b0005058b00161593a2f
182d2c21210c6423648bb84000622d2c21b08051580c6423648bb8200062
1bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb20080
2f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b0
0826b00826b00826b008260f10161345683ab001162d2cb4000100000015
b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b51
5a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b5323
4b515a58381b2121592d2c4b5458381b2121592d2c014b53234b515ab002
25b00425b006254923451869525a58b00225b00225b00525462345696048
592121212d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012
435c5a58381b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b01060482046b0106048590a21211b21
21592d2cb012435c580cb00425b00425060c6423646164b807085158b004
25b00425012046b8fff060482046b8fff06048590a21211b2121592d2c4b
53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d
2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b
545a8a8a0ab012435c5a58381b2121592d2c462346608a8a462320468a60
8a61b8ff8062232010238ab9035803588a70456020b0005058b00161b8ff
ba8b1bb0468c59b0106068013a2d2c2320b000508a8a64b10003255458b0
401bb10103255458b037438b59b04f2b5923b0622b2321235865592d2cb1
3a000c215460432d2cb1020042b123018851b1400188535a58b910000020
885458b202010243604259b12401885158b920000040885458b202020243
6042b12401885458b2022002436042004b014b5258b2020802436042591b
b940000080885458b202040243604259b94000008063b80100885458b202
080243604259b94000010063b80200885458b202100243604259b1260188
5158b94000020063b80400885458b202400243604259b94000040063b808
00885458b202800243604259b12801885158b94000080063b81000885458
ba00020100000243604259595959595959b10002435458400a37403a403b
403e023f021bb10102435458b237403aba0100003b0100b33e013f011bb1
8002435258b237403ab80180b13b401bb901000002435258b237403aba01
80003b01401bb901800002435258b237403ab80200b13b401bb237403aba
0100003b0100595959b9400000808855b94000020063b8040088555a58b3
3e003f011bb33e003f0159595942424242422d2cb0024354584b53234b51
5a58381b2121591b21212121592d2c012d2cb0022563b0206066b00225b8
2000626023622d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564
b0022564b002256164b03543525821206459b1024e2b23b000505865592d
2c238a4a234564b0022564b002256164b03543525821206459b1014e2b23
b000505865592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e
2b8a103b2d2cb00325b003258ab0672b8a103b2d2cb00325b003258ab068
2b8a103b2d2cb0032546b003254660b004252eb00425b00425b0042620b0
00505821b06a1bb06c592bb0032546b00325466061b08062208a2010233a
232010233a2d2cb0032547b003254760b0052547b0806361b00225b00625
496323b005254ab080632058621b2159b0042646608a468a4660b0206361
2d2cb00426b00425b00425b00426b06e2b208a2010233a232010233a2d2c
2320b001545821b00225b1024e2bb0805020605920606020b00151582121
1b20b005515821206661b0402361b100032550b00325b00325505a5820b0
0325618a535821b000591b21591bb00754582066616523211b2121b00059
5959b1024e2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b0
04254620666120b00526b0062649b00526b00526b0702b236165b0206020
6661b02061652d2cb0022546208a20b000505821b1024e2b1b4523215961
65b00225103b2d2cb0042620b802006220b80200638a236120b05d602bb0
0525118a128a20398a58ba005d10000004266356602b23212010204620b1
024e2b23611b2321208a201049b1024e2b593b2d2cba005d100000092563
56602bb00525b00525b00526b06d2bb15d0725602bb00525b00525b00525
b00525b06f2bba005d10000008266356602b20b0005258b0502bb00525b0
0525b00725b00725b00525b0712bb0021738b00052b00225b001525a58b0
0425b0062549b00325b00525496020b0405258211bb000525820b0025458
b00425b00425b00725b0072549b00217381bb00425b00425b00425b00625
49b0021738595959595921212121212d2cb12501885058b94000020063b8
040088545cb0134b525b1bb001592d00000000010000000700006927fdb2
5f0f3cf50819080000000000a2e31dc200000000d684d860fb74fd8c105e
0851000000090001000000000000000100000721fe4500001000fb74f9d2
105e0001000000000000000000000000000000030639011c023900b002aa
00ec0000004b009f00c800010000000302b5003c00d10007000200100040
0086000005e904eb00050002000000010012000100000000000600180000
44424d42484a2b54696d65734e6577526f6d616e50534d540000410a0054
03ef02ad001d001f03ee03ed003c001f03edb2061d1fb803ecb3032a1f3f
411503e4006003e9009f03e500df03e50004001003e4001003e5003f03e5
007003e400ff03e40005ffc003e1b345453240b803e1b32b2e3240b803e1
b2282932b9ffc003e1b21a1c32bd03e102ac0027001fffc003dfb2161b32
b9ffc003deb2424232b9ffc003deb2363832b9ffc003deb32a2d32df410a
03de00ef03de000203de03df0028001fffc003dfb3282e32f0410d03df00
01037e000f0101001f00a003dd00b003dd0002004003dab32426329fbf03
cc000103ca03c90064001fffc003c9b20d1132410a03c703b70012001f03
b603b50064001fffc003b5b30e1132004173038d000100c0038d00d0038d
00e0038d00f0038d0004006f03a7007f03a7008f03a700af03a70004000f
03a7001f03a7002f03a7004f03a7000403ab03ab00ef03a50001000f03a5
002f03a5006f03a5008f03a50004005403aa0001006b03aa000103a8036a
0022001f038c03940015001f038b03930015001f03a40393001a001f03a2
0394001e001f03a10393001e001f039f0394001e001f039b0394001a001f
039a0393001e001f039903940016001f039803940016001f03970393001b
001f03960394001b001f03950393001b001f03760375001a001f03740375
001a001f03a00373b21e1f10411e03930020039300300393000300200394
003003940040039400030000039400010383036c001e001f03b1036c0032
001f036d036c0032001fffc0037db2212332b9ffc0037db3171932a0410a
037d00b0037d00c0037d00d0037d0004ffc0037cb2212332b9ffc0037cb3
171932a0412d037c00b0037c00c0037c00d0037c00040030037300400373
0002000003730010037300200373000300e0037300f00373000200b00373
00c0037300d003730003008403730090037300a0037300030377036a0029
001f0389036ab2281f40b80367b33940323fbb0366000100400366b3191d
328fbb0366000100400366b3090a3240b80366b3090e3240b80366b3090f
323fbb0365000100400365b3090c3240b80365b31a1d3240b80365b3090e
326b410e0363007b03630002001403630024036300340363004403630004
0363b2242f1fba034e006d0800400e1f7f027f037f047f050430440112bf
033200500800001f0012032d003c0800b61f5f3c013785a0418503620001
00000362001003620070036200900362000400f0035f00010020035e0020
035f0030035f0040035e00040000035e0000035f0010035f00d0035e00e0
035f00050010030f0020030f0030030f00d0030f00e0030f00050000030f
0010030f0050030f0060030f0070030f00d0030f00060000030f0010030f
0020030f0030030f00e0030f00f0030f0006030f00270000030e0030030e
000200e0030e00f0030e0002030e004a00e0030d00f0030d0002030d0027
00d002fc0001001002fc002002fc005002fc000300d002fc00e002fc0002
000002fc001002fc002002fc003002fc005002fc006002fc000600e002fc
00f002fc0002002002fc003002fc004002fc000302fc402c27c02901b029
01a02901902901403c3f413240223f4132121212858f4caf4cbf4ccf4c04
5f4c6f4c7f4c0337b8ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b219
1a32370f413b02af0001005f02af009f02af00df02af0003001f02af002f
02af003f02af006f02af000402af02af001f02ad002f02ad003f02ad004f
02ad005f02ad000500df02ad0001000f02ad001f02ad003f02ad005f02ad
009f02ad0005005f02ad00df02ad0002000f02ad001f02ad003f02ad0003
004002acb23a334f414d02ac005f02ac009f02ac0003002f02ac003f02ac
0002000f02ac003f02ac00af02ac000300b002ac00e002ac0002004f02ac
005f02ac00a002ac0003001f02ac002f02ac003f02ac0003000f02ac0001
000f035a0001000f035a001f035a003f035a005f035a0070035a000500cf
035700df03570002000f0357001f03570070035700af03570004035a035a
0357035702ad02ad02ac02ac032c400d31151f0016160000001211081041
10020c004a000d01a8004a000d0198004a000d0189004a000d013f004a00
0d0124400e4a0df64a0dbe4a0d864a0d274a0dbe02280041000d01940041
000d0121400b410db4410d4f410d29410d411002170021000d0215002100
0d02060021000d01eb0021000d014e0021000d012c4014210df9210df321
0df1210d9d210d71210d3d210d4110021c001f000d0214001f000d020b00
1f000d0196001f000d014a001f000d0126400b1f0dc61f0d571f0d371f0d
410d019e0141000d00420141000d001e0141000d001b0141000d01f2b40f
440f0009bb01f20044000d0201b23c291fb80200b23c291fb801ffb23c41
1fb801feb23c471fb801fdb23c9e1fb801fab23c931fbc01f9010f010100
1f01f6b224e41f411501f401490401001f01f301490401001f01f1014900
ab001f01f001490067001f01a6003c0125001f01a4b23c811f411501a301
0f019a001f01a200220801001f01a100500401001f019f0149019a001f01
9d01490067001f019cb22c621fb8019bb22c791fbc019a002c0101001f01
97b22ce41fb80193b22c891fb80192b22c6c1fb8018fb2259e1fb8016ab2
3c2a1f4111016700240201001f0163002502ab001f014c010f019a001f01
480149006c001f0147b22c891fb80145b22c9e1fb80144b22c791fb80143
b223311fb80127b23c811fbc012300500101001f011fb223e41f4115011d
0023019a001f011c00230801001f011b00250801001f010e010f0401001f
010d00220401001f0108b223811fb80106b425e41ff73cbb0125001f00f5
010fb29e1fe3bc01490156001f00e20149b2ab1fd1b901490401b21fcf2c
b80125b61fce23bb1fc524b80156b21fc02cb80801b21fbf2cb80201b51f
b124e41fb0b901490201b61faf2c671fad23b80801b21fa523b80201400b
1f9f3c2d1f9b235a1f9925b80201b21f812cbc0401001f006d010f015640
0b1f592c3e1f4c3cab1f4625b80101b21f403cb80125400a1f3a23721f39
3cab1f38b80149b3ab1f3124b80401b21f3025b802abb61f2a24e41f2623
b80156b41f35555537ba023500070175402c0774076207560751073b0733
072d0720071d071c071408120810080e080c080a08080806080408020800
0814b8ffe0402b0000010014061000000100060400000100041000000100
1002000001000200000001000002010802004a00b013034b024b534201b0
124b004b5442b0372b4bb807ff52b0382b4bb008505b58b101018e59b038
2bb00288b801005458b801ffb101018e851bb0124358b90001012f858d1b
b90001017c858d5959014bb0c063004b6220b0f65323b8010a515ab00523
42180016763f183f123e113946443e113946443e113946443e113946443e
11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b
2b2b2b2b2b2b181d42b0964b5358b235aaaa1d4259b0324b5358b235ffff
1d42594bb04753205c58b90271026f4544b90270026f45445958b9017a02
71455258b90271017a4459594bb04753205c58b9002202704544b9003c02
7045445958b901b30022455258b9002201b34459594bb04c53205c58b901
4900224544b1222245445958b901c20149455258b9014901c24459594bb0
6753205c58b9002402714544b90050027145445958b9021e0024455258b9
0024021e4459594bb8020153205c58b9010f00224544b1222245445958b9
0c00010f455258b9010f0c004459594bb01c53205c58b125254544b12c25
45445958b13725455258b125374459594bb0ab53205c58b125254544b123
2545445958b901590025455258b9002501594459594bb8010153205c58b1
25254544b1282545445958b902080025455258b9002502084459592b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01
b361dc6463456523456023456560234560b08b766818b080622020b164dc
4565234520b003266062636820b003266165b0dc236544b064234420b161
634565234520b003266062636820b003266165b063236544b0612344b100
63455458b163406544b26140614523614459b3a67f434b45652345602345
6560234560b089766818b080622020b1437f4565234520b0032660626368
20b003266165b07f236544b043234420b1a64b4565234520b00326606263
6820b003266165b04b236544b0a62344b1004b455458b14b406544b2a640
a645236144594b5242014b5058b108004259435c58b108004259b3020b0a
124358601b2159421610703eb0124358b93b21187e1bba040001a8000b2b
59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e
2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0
112342002b00184569444569444569444569447373737473737373747575
2b7373747475184569447373742b4bb021534bb046515a58b03cb03c45b0
40604459012b2b2b2b75752b5840365f235f255f285fa5046f236f256f28
6fa5044f234f254f284fa5043f233f253f283fa5042f232f252f282fa504
1f231f251f281fa5047575757575755943584010bf3ccf3c026f3c7f3c8f
3c9f3caf3c0575755943584012bf22cf22025f226f227f228f229f22af22
06757559435c58b6403c9f22ef220375592b2b0174747474454473737474
757545447345447374454473747573737373732b58402460097009800903
10092009300940095009056f037f038f03031f032f033f034f035f0305b8
ffc0b2073a33b8ffc04046063a33900ba00bb00bc00bd00b05b006c006d0
06e006f0060520063006400650066006700680069006a006099006900702
600b700b800b03100b200b300b400b500b051f070100757575737575752b
2b757575751b40100706441f0b0a441f0302441f0908441f2b2b2b2b592b
752b435841220063032d00010003032d0013032d0023032d0033032d0053
032d000500c3032d00d3032d00e3032d00f3032d00040083032d0093032d
00a3032d00b3032d0004032d032d4518694474747575592b4358b9001803
32b330353238b80332b361663238b80332b3535a3238b80332b3454e3238
b80332b33c413218b80332b23f330a410f0332000100ba033200ca033200
da033200ea033200fa03320005033203324518694474752b2b2b2b2b2b59
7300732b012b7575002b2b2b74002b2b2b732b74012b002b2b0173737374
74732b2b00732b2b002b2b2b017374732b012b2b012b2b2b2b2b2b2b2b2b
2b2b2b2b2b00017375007373004569440073730173742b2b2b2b2b732b00
732b752b2b732b2b2b2b2b2b2b2b2b73742b002b2b2b2b0000>
[401 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 318 2 <000100ec025601be0328000b0025b0852b58b6036d4009010900b9034e00
06002fed012f5ded31301bb1000600182f33303159013216151406232226
35343601552c3d3e2b2b3e3d03283d2c2b3e3e2b2c3d>MAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007006cb0852b58b10201bb02be00060007
02bfb2000504b802beb403000a0704b802beb5010019080605bf02be0002
000301290009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c
10fc3cfd3c31301bb10004b807d7b36c000107b807d7b16c0100182f2b2f
2b3031592111211125211121011c0400fc2003c0fc400500fb002004c000
>MAAAAA+TimesNewRomanPSMT AddT42Char 
MAAAAA+TimesNewRomanPSMT /CharStrings get begin
/g2 2 def
end
MAAAAA+TimesNewRomanPSMT /Encoding get
dup 34 /g2 put
pop
end
%ADOEndSubsetFont
/RVWWHM+TimesNewRomanPSMT /MAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut/RVWWHM+TimesNewRomanPSMT*1 [34{/.notdef}rp /g2 221{/.notdef}rp]RVWWHM+TimesNewRomanPSMT nfRVWWHM+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf471.443 202.407 mo(""")[5.99924 5.99927 0 ]xsh116.267 194.345 mo
118.634 184.54 li
121.063 174.805 li
123.618 165.218 li
126.36 155.857 li
127.821 151.281 li
129.353 146.791 li
130.962 142.395 li
132.658 138.103 li
134.447 133.924 li
136.339 129.867 li
138.341 125.942 li
140.461 122.159 li
142.707 118.528 li
145.087 115.058 li
147.61 111.759 li
150.283 108.641 li
153.114 105.714 li
156.112 102.989 li
159.283 100.476 li
162.636 98.1851 li
166.177 96.127 li
169.913 94.3118 li
173.851 92.7497 li
177.999 91.4505 li
182.362 90.424 li
186.947 89.6794 li
191.762 89.2261 li
196.813 89.0731 li
202.104 89.2263 li
207.63 89.6785 li
213.382 90.4195 li
219.355 91.4391 li
225.539 92.7274 li
231.929 94.2748 li
238.518 96.0713 li
245.296 98.1074 li
252.258 100.373 li
259.396 102.859 li
266.702 105.556 li
274.168 108.454 li
281.788 111.544 li
289.553 114.815 li
297.456 118.258 li
305.49 121.864 li
313.646 125.624 li
321.917 129.527 li
330.296 133.563 li
338.774 137.725 li
347.345 142.001 li
356 146.382 li
364.731 150.859 li
373.532 155.422 li
391.309 164.768 li
409.27 174.343 li
427.353 184.071 li
441.978 191.974 li
441.265 193.293 li
426.642 185.392 li
408.561 175.665 li
408.563 175.666 li
390.605 166.092 li
390.609 166.094 li
372.836 156.751 li
372.84 156.753 li
364.042 152.191 li
364.045 152.193 li
355.317 147.718 li
355.32 147.719 li
346.669 143.34 li
346.673 143.342 li
338.107 139.068 li
338.111 139.07 li
329.637 134.911 li
329.642 134.913 li
321.269 130.879 li
321.274 130.882 li
313.009 126.982 li
313.015 126.985 li
304.865 123.228 li
304.872 123.231 li
296.846 119.628 li
296.853 119.632 li
288.958 116.192 li
288.967 116.195 li
281.21 112.928 li
281.22 112.932 li
273.61 109.846 li
273.62 109.851 li
266.165 106.957 li
266.176 106.961 li
258.883 104.269 li
258.896 104.274 li
251.772 101.792 li
251.787 101.797 li
244.84 99.5364 li
244.856 99.5415 li
238.095 97.5107 li
238.114 97.516 li
231.545 95.7248 li
231.566 95.7301 li
225.198 94.1881 li
225.222 94.1935 li
219.062 92.9103 li
219.089 92.9154 li
213.145 91.9006 li
213.176 91.9052 li
207.456 91.1685 li
207.49 91.1721 li
202.002 90.7229 li
202.041 90.7251 li
196.792 90.5731 li
196.836 90.5731 li
191.831 90.7247 li
191.879 90.7217 li
187.113 91.1704 li
187.163 91.1641 li
182.628 91.9004 li
182.68 91.8901 li
178.369 92.9044 li
178.421 92.8901 li
174.326 94.1728 li
174.379 94.1542 li
170.492 95.6958 li
170.543 95.6732 li
166.857 97.464 li
166.906 97.4378 li
163.413 99.4682 li
163.459 99.4391 li
160.151 101.699 li
160.194 101.668 li
157.063 104.149 li
157.102 104.116 li
154.141 106.808 li
154.175 106.775 li
151.376 109.668 li
151.407 109.634 li
148.762 112.719 li
148.789 112.687 li
146.29 115.954 li
146.313 115.922 li
143.954 119.362 li
143.973 119.332 li
141.745 122.935 li
141.761 122.907 li
139.657 126.663 li
139.67 126.637 li
137.681 130.537 li
137.693 130.513 li
135.812 134.547 li
135.822 134.525 li
134.041 138.684 li
134.049 138.664 li
132.361 142.937 li
132.368 142.92 li
130.764 147.299 li
130.77 147.283 li
129.244 151.758 li
129.248 151.744 li
127.791 156.305 li
127.797 156.288 li
125.06 165.63 li
125.065 165.613 li
122.514 175.186 li
122.517 175.174 li
120.09 184.9 li
120.091 184.895 li
117.725 194.697 li
cp
441.621 192.633 mo
441.288 189.043 li
445.14 194.535 li
438.436 194.322 li
cp
.57644 .380835 .0576486 0 cmyk
f
275.741 194.4 mo
277.37 186.886 li
279.028 179.428 li
280.744 172.083 li
282.546 164.91 li
284.463 157.968 li
286.522 151.318 li
287.617 148.114 li
288.757 145.007 li
289.948 142.001 li
291.194 139.103 li
292.498 136.321 li
293.864 133.661 li
295.297 131.132 li
296.8 128.739 li
298.378 126.491 li
300.034 124.396 li
301.774 122.461 li
303.601 120.693 li
305.52 119.103 li
307.533 117.697 li
309.645 116.486 li
311.858 115.478 li
314.173 114.681 li
316.594 114.105 li
319.12 113.757 li
321.753 113.643 li
324.493 113.768 li
327.335 114.126 li
330.275 114.706 li
333.312 115.502 li
336.441 116.503 li
339.662 117.704 li
342.969 119.095 li
346.362 120.67 li
349.836 122.421 li
353.389 124.341 li
357.018 126.422 li
360.718 128.656 li
364.488 131.037 li
368.324 133.557 li
372.222 136.209 li
376.179 138.986 li
380.192 141.879 li
384.256 144.883 li
388.37 147.989 li
392.529 151.191 li
400.967 157.849 li
409.546 164.801 li
418.236 171.986 li
427.009 179.347 li
435.837 186.825 li
441.646 191.768 li
440.674 192.911 li
434.867 187.969 li
426.041 180.493 li
426.044 180.495 li
417.274 173.137 li
417.278 173.141 li
408.593 165.959 li
408.599 165.964 li
400.027 159.017 li
400.034 159.024 li
391.604 152.371 li
391.611 152.377 li
387.457 149.18 li
387.463 149.184 li
383.355 146.082 li
383.362 146.087 li
379.304 143.088 li
379.311 143.093 li
375.306 140.205 li
375.313 140.211 li
371.365 137.44 li
371.374 137.446 li
367.485 134.801 li
367.495 134.808 li
363.67 132.294 li
363.682 132.302 li
359.924 129.928 li
359.937 129.936 li
356.25 127.71 li
356.264 127.719 li
352.651 125.647 li
352.668 125.656 li
349.133 123.746 li
349.151 123.756 li
345.698 122.015 li
345.719 122.026 li
342.35 120.462 li
342.375 120.473 li
339.094 119.093 li
339.123 119.104 li
335.934 117.915 li
335.967 117.927 li
332.874 116.936 li
332.912 116.947 li
329.918 116.163 li
329.962 116.173 li
327.07 115.602 li
327.122 115.611 li
324.336 115.26 li
324.395 115.265 li
321.718 115.143 li
321.785 115.143 li
319.22 115.254 li
319.29 115.247 li
316.835 115.586 li
316.906 115.573 li
314.556 116.132 li
314.627 116.112 li
312.38 116.885 li
312.447 116.858 li
310.299 117.837 li
310.361 117.805 li
308.308 118.982 li
308.364 118.946 li
306.404 120.315 li
306.453 120.277 li
304.581 121.83 li
304.623 121.792 li
302.836 123.521 li
302.872 123.483 li
301.166 125.381 li
301.196 125.345 li
299.567 127.405 li
299.593 127.371 li
298.039 129.585 li
298.06 129.553 li
296.576 131.915 li
296.593 131.886 li
295.177 134.387 li
295.191 134.36 li
293.838 136.994 li
293.85 136.97 li
292.557 139.729 li
292.567 139.707 li
291.33 142.583 li
291.339 142.563 li
290.155 145.55 li
290.162 145.533 li
289.028 148.623 li
289.033 148.607 li
287.945 151.792 li
287.952 151.772 li
285.899 158.4 li
285.906 158.378 li
283.994 165.301 li
283.999 165.284 li
282.201 172.443 li
282.204 172.43 li
280.49 179.765 li
280.492 179.757 li
278.835 187.21 li
278.836 187.206 li
277.207 194.718 li
cp
441.16 192.339 mo
441.581 188.758 li
444.207 194.932 li
437.693 193.328 li
cp
f
1.5 lw
116.483 193.902 mo
132.028 132.345 147.574 70.7888 212.821 70.6906 cv
278.067 70.5924 393.014 131.952 507.96 193.313 cv
@
275.409 194.915 mo
277.277 185.377 li
279.188 175.909 li
281.185 166.586 li
283.309 157.483 li
284.433 153.033 li
285.605 148.667 li
286.831 144.393 li
288.115 140.219 li
289.464 136.155 li
290.882 132.21 li
292.376 128.393 li
293.951 124.713 li
295.612 121.18 li
297.366 117.802 li
299.218 114.589 li
301.174 111.55 li
303.239 108.695 li
305.42 106.033 li
307.724 103.574 li
310.154 101.329 li
312.717 99.3084 li
315.418 97.5217 li
318.262 95.9803 li
321.253 94.6946 li
324.395 93.675 li
327.69 92.9313 li
331.143 92.4728 li
334.757 92.3084 li
338.532 92.4432 li
342.465 92.8696 li
346.55 93.5771 li
350.781 94.5553 li
355.156 95.7944 li
359.669 97.2846 li
364.315 99.0163 li
369.091 100.98 li
373.99 103.167 li
379.009 105.566 li
384.141 108.17 li
389.383 110.968 li
394.729 113.952 li
400.175 117.112 li
405.714 120.439 li
411.342 123.924 li
417.053 127.556 li
422.843 131.328 li
428.706 135.23 li
434.637 139.252 li
440.631 143.385 li
446.683 147.62 li
452.787 151.948 li
458.939 156.36 li
471.36 165.394 li
483.907 174.652 li
496.537 184.056 li
506.006 191.139 li
505.108 192.34 li
495.641 185.259 li
483.013 175.856 li
483.016 175.858 li
470.471 166.603 li
470.476 166.606 li
458.058 157.574 li
458.062 157.577 li
451.914 153.168 li
451.918 153.17 li
445.817 148.845 li
445.821 148.848 li
439.774 144.615 li
439.778 144.618 li
433.788 140.488 li
433.793 140.492 li
427.867 136.473 li
427.873 136.477 li
422.015 132.579 li
422.021 132.583 li
416.238 128.815 li
416.245 128.82 li
410.54 125.192 li
410.548 125.197 li
404.928 121.717 li
404.937 121.722 li
399.407 118.401 li
399.417 118.407 li
393.982 115.253 li
393.993 115.259 li
388.658 112.282 li
388.671 112.288 li
383.442 109.497 li
383.456 109.504 li
378.338 106.908 li
378.354 106.916 li
373.352 104.524 li
373.37 104.532 li
368.489 102.354 li
368.51 102.363 li
363.756 100.408 li
363.78 100.417 li
359.158 98.6951 li
359.185 98.7045 li
354.701 97.2238 li
354.732 97.2332 li
350.39 96.0035 li
350.426 96.0126 li
346.232 95.0432 li
346.273 95.0515 li
342.232 94.3517 li
342.28 94.3583 li
338.398 93.9374 li
338.452 93.9412 li
334.734 93.8085 li
334.794 93.8082 li
331.243 93.9698 li
331.308 93.964 li
327.921 94.4138 li
327.987 94.402 li
324.758 95.1306 li
324.825 95.1124 li
321.749 96.1107 li
321.814 96.0863 li
318.886 97.3449 li
318.947 97.3152 li
316.162 98.8248 li
316.219 98.791 li
313.571 100.542 li
313.621 100.506 li
311.106 102.489 li
311.15 102.451 li
308.761 104.658 li
308.8 104.62 li
306.532 107.04 li
306.565 107.003 li
304.414 109.628 li
304.441 109.592 li
302.401 112.413 li
302.424 112.379 li
300.489 115.385 li
300.508 115.354 li
298.674 118.537 li
298.69 118.508 li
296.95 121.858 li
296.964 121.831 li
295.314 125.34 li
295.325 125.316 li
293.76 128.972 li
293.769 128.951 li
292.283 132.747 li
292.29 132.728 li
290.878 136.654 li
290.885 136.637 li
289.541 140.684 li
289.546 140.668 li
288.267 144.827 li
288.271 144.813 li
287.049 149.075 li
287.052 149.062 li
285.884 153.416 li
285.886 153.406 li
284.765 157.844 li
284.768 157.83 li
282.647 166.92 li
282.65 166.906 li
280.656 176.219 li
280.658 176.21 li
278.748 185.672 li
278.749 185.667 li
276.881 195.203 li
cp
505.557 191.74 mo
505.753 188.14 li
508.76 194.136 li
502.159 192.944 li
cp
f
116.407 194.48 mo
119.116 179.381 li
121.889 164.367 li
124.793 149.525 li
127.89 134.946 li
129.532 127.779 li
131.247 120.712 li
133.043 113.754 li
134.928 106.916 li
136.91 100.21 li
138.997 93.6448 li
141.198 87.2329 li
143.521 80.985 li
145.974 74.912 li
148.566 69.025 li
151.304 63.3348 li
154.197 57.8526 li
157.253 52.5894 li
160.481 47.5564 li
163.89 42.7649 li
167.486 38.2262 li
171.28 33.9517 li
175.279 29.953 li
179.49 26.2418 li
183.923 22.8297 li
188.585 19.7286 li
193.483 16.9502 li
198.625 14.5062 li
204.014 12.4099 li
206.833 11.4975 li
209.741 10.6892 li
212.741 9.98108 li
215.83 9.37088 li
219.005 8.85638 li
222.263 8.43536 li
225.603 8.10559 li
229.026 7.86447 li
236.084 7.64157 li
243.432 7.74878 li
251.043 8.16937 li
258.9 8.88647 li
266.98 9.88339 li
275.264 11.1435 li
283.731 12.6501 li
292.361 14.3868 li
301.133 16.337 li
310.028 18.4843 li
319.024 20.8122 li
328.1 23.3041 li
337.237 25.9438 li
346.414 28.7146 li
355.61 31.6003 li
364.805 34.5847 li
383.104 40.7808 li
392.171 43.9616 li
401.152 47.1743 li
410.029 50.4032 li
418.78 53.6318 li
427.383 56.8431 li
435.821 60.0217 li
444.071 63.1507 li
452.113 66.2134 li
459.926 69.1936 li
467.491 72.0756 li
474.893 74.9492 li
482.228 77.9122 li
496.686 84.0863 li
510.888 90.577 li
524.849 97.3608 li
538.587 104.415 li
552.122 111.717 li
565.471 119.243 li
578.653 126.973 li
591.687 134.882 li
604.59 142.948 li
617.382 151.149 li
630.081 159.462 li
642.704 167.865 li
655.271 176.334 li
677.003 191.131 li
676.158 192.371 li
654.429 177.575 li
654.432 177.577 li
641.868 169.11 li
641.871 169.112 li
629.252 160.712 li
629.257 160.716 li
616.564 152.406 li
616.57 152.41 li
603.784 144.213 li
603.792 144.218 li
590.896 136.156 li
590.905 136.162 li
577.88 128.258 li
577.89 128.264 li
564.718 120.541 li
564.729 120.547 li
551.391 113.027 li
551.404 113.033 li
537.882 105.739 li
537.895 105.746 li
524.171 98.699 li
524.186 98.7063 li
510.24 91.9301 li
510.256 91.9376 li
496.072 85.4545 li
496.089 85.4621 li
481.646 79.2946 li
481.66 79.3003 li
474.336 76.3419 li
474.345 76.3457 li
466.95 73.4747 li
466.955 73.4764 li
459.391 70.5951 li
451.579 67.6152 li
443.54 64.5532 li
435.292 61.4255 li
426.859 58.2484 li
418.256 55.0376 li
418.259 55.0386 li
409.511 51.8111 li
409.514 51.8123 li
400.641 48.5847 li
400.645 48.586 li
391.668 45.3747 li
391.672 45.3762 li
382.611 42.1976 li
382.619 42.2003 li
364.329 36.007 li
364.338 36.0099 li
355.15 33.0281 li
355.157 33.0304 li
345.969 30.1471 li
345.977 30.1494 li
336.808 27.3811 li
336.817 27.3836 li
327.689 24.7466 li
327.698 24.7493 li
318.632 22.2601 li
318.642 22.2629 li
309.658 19.938 li
309.67 19.941 li
300.788 17.7967 li
300.801 17.7998 li
292.043 15.8527 li
292.057 15.8558 li
283.443 14.1223 li
283.46 14.1254 li
275.01 12.6219 li
275.029 12.625 li
266.765 11.3679 li
266.786 11.3708 li
258.728 10.3767 li
258.751 10.3792 li
250.92 9.66437 li
250.947 9.66638 li
243.364 9.24738 li
243.394 9.24838 li
236.079 9.14166 li
236.114 9.14139 li
229.088 9.36328 li
229.117 9.36179 li
225.719 9.60107 li
225.74 9.59927 li
222.422 9.92697 li
222.444 9.92447 li
219.209 10.3425 li
219.233 10.339 li
216.083 10.8495 li
216.108 10.845 li
213.045 11.45 li
213.072 11.4441 li
210.1 12.1457 li
210.129 12.1384 li
207.25 12.9385 li
207.28 12.9295 li
204.496 13.8303 li
204.537 13.8157 li
199.195 15.8942 li
199.245 15.8726 li
194.152 18.2933 li
194.2 18.2683 li
189.348 21.0202 li
189.394 20.9923 li
184.776 24.0643 li
184.818 24.0341 li
180.425 27.4152 li
180.463 27.3836 li
176.288 31.0628 li
176.322 31.0304 li
172.356 34.9966 li
172.387 34.9641 li
168.622 39.2062 li
168.649 39.1742 li
165.077 43.6813 li
165.101 43.6502 li
161.714 48.4112 li
161.734 48.3814 li
158.525 53.3853 li
158.542 53.357 li
155.502 58.5927 li
155.516 58.5661 li
152.637 64.0225 li
152.649 63.9977 li
149.923 69.6639 li
149.933 69.6409 li
147.352 75.5058 li
147.361 75.4845 li
144.916 81.5371 li
144.924 81.5176 li
142.608 87.7468 li
142.614 87.7289 li
140.419 94.1237 li
140.424 94.1075 li
138.341 100.657 li
138.346 100.642 li
136.368 107.335 li
136.372 107.322 li
134.49 114.147 li
134.494 114.135 li
132.701 121.082 li
132.703 121.071 li
130.991 128.128 li
130.993 128.119 li
129.353 135.276 li
129.356 135.264 li
126.261 149.831 li
126.264 149.819 li
123.362 164.651 li
123.364 164.643 li
120.591 179.652 li
120.592 179.648 li
117.883 194.744 li
cp
676.581 191.751 mo
676.616 188.146 li
679.887 194.002 li
673.239 193.105 li
cp
f
276.523 193.404 mo
283.372 144.838 290.221 96.2723 324.07 77.9326 cv
357.919 59.593 420.9 64.4854 479.617 83.3666 cv
538.334 102.248 607.353 146.734 676.371 191.22 cv
@
444.26 193.79 mo
445.212 147.722 446.164 101.655 485.106 101.367 cv
524.049 101.078 600.981 146.569 677.914 192.059 cv
@
516.433 194.117 mo
517.871 164.846 519.308 135.575 546.183 135.367 cv
573.058 135.158 625.371 164.012 677.683 192.867 cv
@
444.433 193.867 mo
449.788 164.492 455.142 135.117 465.433 134.867 cv
475.725 134.617 490.954 163.492 506.183 192.367 cv
@
gsave
8.9519 231.003 mo
24.8781 231.003 li
24.8781 166.038 li
8.9519 166.038 li
8.9519 231.003 li
clp
gsave
1.68324 235.367 mo
9.68345 235.367 li
9.68345 227.367 li
1.68324 227.367 li
1.68324 235.367 li
clp
9.68345 231.003 mo
8.9519 231.003 li
8.9519 227.367 li
9.68345 227.367 li
9.68345 231.003 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 3.875 -21.5083 199.092 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 31 
/M[8 0 0 -31 0 31 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;
L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;
L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;
L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;~>
<~>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9~>
<~2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS~>
<~!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
9.68345 235.367 mo
17.6834 235.367 li
17.6834 227.367 li
9.68345 227.367 li
9.68345 235.367 li
clp
17.6834 231.003 mo
9.68345 231.003 li
9.68345 227.367 li
17.6834 227.367 li
17.6834 231.003 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 3.875 -20.7583 199.092 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 31 
/M[66 0 0 -31 0 31 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0J0b"+*$ihukQHTnLn:U-8i7LUfHIP29@V"Nc21O3uGjsY-K*Mo.4F$AR_1Mt'*^"]:i5($N%j!iX
nDN7g%j!jg$4[cQ+T~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 235.367 mo
25.6834 235.367 li
25.6834 227.367 li
17.6834 227.367 li
17.6834 235.367 li
clp
24.8781 231.003 mo
17.6834 231.003 li
17.6834 227.367 li
24.8781 227.367 li
24.8781 231.003 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 3.875 -12.7583 199.092 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 31 
/M[60 0 0 -31 0 31 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0IYmCCQ$iiSqKIl1<mc3(T+BXB>(#T&1(bHfr2>]&?XLtt$jir88jlPUcjlNTb05pP/0/"t30/%82
G^6V;H$O](*MZ?fkP~>

%%EndBinary
grestore
np
grestore
gsave
1.68324 227.367 mo
9.68345 227.367 li
9.68345 219.367 li
1.68324 219.367 li
1.68324 227.367 li
clp
9.68345 227.367 mo
9.68345 227.367 li
8.9519 227.367 li
8.9519 219.367 li
9.68345 219.367 li
9.68345 227.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -21.5083 202.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GarQ-2J6hF`M7YlO5a#!MF[1b-342K.-<n#~>

%%EndBinary
grestore
np
grestore
gsave
9.68345 227.367 mo
17.6834 227.367 li
17.6834 219.367 li
9.68345 219.367 li
9.68345 227.367 li
clp
17.6834 227.367 mo
17.6834 227.367 li
9.68345 227.367 li
9.68345 219.367 li
17.6834 219.367 li
17.6834 227.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -20.7583 202.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$iiS\888Dbpd$hO3`=$.Dr<h!BT][Rm(\l)E8\N_!s];U3,mfkJHH,e*&qoq^juRm%NIHI
i5"<#*&qoq^nH3@E8\N_!s];U3,mfkJHH,e*&qoq^juTC$?>">JHH,e*&qoqn@HL<SJ->q~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 227.367 mo
25.6834 227.367 li
25.6834 219.367 li
17.6834 219.367 li
17.6834 227.367 li
clp
24.8781 227.367 mo
17.6834 227.367 li
17.6834 219.367 li
24.8781 219.367 li
24.8781 227.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 8.25 -12.7583 202.717 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 66 
/M[60 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0JYn;L?&-G4S4QD/EL46(j&f`XPb8X]heK!V:Mk9f,;d*=LHcO<6]oeYJQ^=&*[s,KteJidZH$O[\
H$dTT>J6/cQ^;ndmiU9NDdM:rG^5M4j\:W!2^r(iUj.0KioNmlQT$@"hP>CAPN)PdqZ9OUaBA~>

%%EndBinary
grestore
np
grestore
gsave
1.68324 219.367 mo
9.68345 219.367 li
9.68345 211.366 li
1.68324 211.366 li
1.68324 219.367 li
clp
9.68345 219.367 mo
9.68345 219.367 li
8.9519 219.367 li
8.9519 211.366 li
9.68345 211.366 li
9.68345 219.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -21.5083 210.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GarQ-2J6hF`M7YlO5a#!MF[1b-342K.-<n#~>

%%EndBinary
grestore
np
grestore
gsave
9.68345 219.367 mo
17.6834 219.367 li
17.6834 211.366 li
9.68345 211.366 li
9.68345 219.367 li
clp
17.6834 219.367 mo
17.6834 219.367 li
9.68345 219.367 li
9.68345 211.366 li
17.6834 211.366 li
17.6834 219.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -20.7583 210.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$iiS\888Dbpd$hO3`=$.Dr<h!BT][Rm(\l)E8\N_!s];U3,mfkJHH,e*&qoq^juRm%NIHI
i5"<#*&qoq^nH3@E8\N_!s];U3,mfkJHH,e*&qoq^juTC$?>">JHH,e*&qoqn@HL<SJ->q~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 219.367 mo
25.6834 219.367 li
25.6834 211.366 li
17.6834 211.366 li
17.6834 219.367 li
clp
24.8781 219.367 mo
17.6834 219.367 li
17.6834 211.366 li
24.8781 211.366 li
24.8781 219.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 8.25 -12.7583 210.717 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 66 
/M[60 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0JYn;L?&-G4S4QD/EL46(j&f`XPb8X]heK!V:Mk9f,;d*=LHcO<6]oeYJQ^=&*[s,KteJidZH$O[\
H$dTT>J6/cQ^;ndmiU9NDdM:rG^5M4j\:W!2^r(iUj.0KioNmlQT$@"hP>CAPN)PdqZ9OUaBA~>

%%EndBinary
grestore
np
grestore
gsave
1.68324 211.366 mo
9.68345 211.366 li
9.68345 203.367 li
1.68324 203.367 li
1.68324 211.366 li
clp
9.68345 211.366 mo
9.68345 211.366 li
8.9519 211.366 li
8.9519 203.367 li
9.68345 203.367 li
9.68345 211.366 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -21.5083 218.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GarQ-2J6hF`M7YlO5a#!MF[1b-342K.-<n#~>

%%EndBinary
grestore
np
grestore
gsave
9.68345 211.366 mo
17.6834 211.366 li
17.6834 203.367 li
9.68345 203.367 li
9.68345 211.366 li
clp
17.6834 211.366 mo
17.6834 211.366 li
9.68345 211.366 li
9.68345 203.367 li
17.6834 203.367 li
17.6834 211.366 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -20.7583 218.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$iiS\888Dbpd$hO3`=$.Dr<h!BT][Rm(\l)E8\N_!s];U3,mfkJHH,e*&qoq^juRm%NIHI
i5"<#*&qoq^nH3@E8\N_!s];U3,mfkJHH,e*&qoq^juTC$?>">JHH,e*&qoqn@HL<SJ->q~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 211.366 mo
25.6834 211.366 li
25.6834 203.367 li
17.6834 203.367 li
17.6834 211.366 li
clp
24.8781 211.366 mo
17.6834 211.366 li
17.6834 203.367 li
24.8781 203.367 li
24.8781 211.366 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 8.25 -12.7583 218.717 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 66 
/M[60 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0JYn;L?&-G4S4QD/EL46(j&f`XPb8X]heK!V:Mk9f,;d*=LHcO<6]oeYJQ^=&*[s,KteJidZH$O[\
H$dTT>J6/cQ^;ndmiU9NDdM:rG^5M4j\:W!2^r(iUj.0KioNmlQT$@"hP>CAPN)PdqZ9OUaBA~>

%%EndBinary
grestore
np
grestore
gsave
1.68324 203.367 mo
9.68345 203.367 li
9.68345 195.367 li
1.68324 195.367 li
1.68324 203.367 li
clp
9.68345 203.367 mo
9.68345 203.367 li
8.9519 203.367 li
8.9519 195.367 li
9.68345 195.367 li
9.68345 203.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -21.5083 226.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GarQ-2J6hF`M7YlO5a#!MF[1b-342K.-<n#~>

%%EndBinary
grestore
np
grestore
gsave
9.68345 203.367 mo
17.6834 203.367 li
17.6834 195.367 li
9.68345 195.367 li
9.68345 203.367 li
clp
17.6834 203.367 mo
17.6834 203.367 li
9.68345 203.367 li
9.68345 195.367 li
17.6834 195.367 li
17.6834 203.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -20.7583 226.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$iiS\888Dbpd$hO3`=$.Dr<h!BT][Rm(\l)E8\N_!s];U3,mfkJHH,e*&qoq^juRm%NIHI
i5"<#*&qoq^nH3@E8\N_!s];U3,mfkJHH,e*&qoq^juTC$?>">JHH,e*&qoqn@HL<SJ->q~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 203.367 mo
25.6834 203.367 li
25.6834 195.367 li
17.6834 195.367 li
17.6834 203.367 li
clp
24.8781 203.367 mo
17.6834 203.367 li
17.6834 195.367 li
24.8781 195.367 li
24.8781 203.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 8.25 -12.7583 226.717 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 66 
/M[60 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0JYn;L?&-G4S4QD/EL46(j&f`XPb8X]heK!V:Mk9f,;d*=LHcO<6]oeYJQ^=&*[s,KteJidZH$O[\
H$dTT>J6/cQ^;ndmiU9NDdM:rG^5M4j\:W!2^r(iUj.0KioNmlQT$@"hP>CAPN)PdqZ9OUaBA~>

%%EndBinary
grestore
np
grestore
gsave
1.68324 195.367 mo
9.68345 195.367 li
9.68345 187.367 li
1.68324 187.367 li
1.68324 195.367 li
clp
9.68345 195.367 mo
9.68345 195.367 li
8.9519 195.367 li
8.9519 187.367 li
9.68345 187.367 li
9.68345 195.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -21.5083 234.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GarQ-2J6hF`M7YlO5a#!MF[1b-342K.-<n#~>

%%EndBinary
grestore
np
grestore
gsave
9.68345 195.367 mo
17.6834 195.367 li
17.6834 187.367 li
9.68345 187.367 li
9.68345 195.367 li
clp
17.6834 195.367 mo
17.6834 195.367 li
9.68345 195.367 li
9.68345 187.367 li
17.6834 187.367 li
17.6834 195.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -20.7583 234.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$iiS\888Dbpd$hO3`=$.Dr<h!BT][Rm(\l)E8\N_!s];U3,mfkJHH,e*&qoq^juRm%NIHI
i5"<#*&qoq^nH3@E8\N_!s];U3,mfkJHH,e*&qoq^juTC$?>">JHH,e*&qoqn@HL<SJ->q~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 195.367 mo
25.6834 195.367 li
25.6834 187.367 li
17.6834 187.367 li
17.6834 195.367 li
clp
24.8781 195.367 mo
17.6834 195.367 li
17.6834 187.367 li
24.8781 187.367 li
24.8781 195.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 8.25 -12.7583 234.717 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 66 
/M[60 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0JYn;L?&-G4S4QD/EL46(j&f`XPb8X]heK!V:Mk9f,;d*=LHcO<6]oeYJQ^=&*[s,KteJidZH$O[\
H$dTT>J6/cQ^;ndmiU9NDdM:rG^5M4j\:W!2^r(iUj.0KioNmlQT$@"hP>CAPN)PdqZ9OUaBA~>

%%EndBinary
grestore
np
grestore
gsave
1.68324 187.367 mo
9.68345 187.367 li
9.68345 179.367 li
1.68324 179.367 li
1.68324 187.367 li
clp
9.68345 187.367 mo
9.68345 187.367 li
8.9519 187.367 li
8.9519 179.367 li
9.68345 179.367 li
9.68345 187.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -21.5083 242.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GarQ-2J6hF`M7YlO5a#!MF[1b-342K.-<n#~>

%%EndBinary
grestore
np
grestore
gsave
9.68345 187.367 mo
17.6834 187.367 li
17.6834 179.367 li
9.68345 179.367 li
9.68345 187.367 li
clp
17.6834 187.367 mo
17.6834 187.367 li
9.68345 187.367 li
9.68345 179.367 li
17.6834 179.367 li
17.6834 187.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -20.7583 242.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$iiS\888Dbpd$hO3`=$.Dr<h!BT][Rm(\l)E8\N_!s];U3,mfkJHH,e*&qoq^juRm%NIHI
i5"<#*&qoq^nH3@E8\N_!s];U3,mfkJHH,e*&qoq^juTC$?>">JHH,e*&qoqn@HL<SJ->q~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 187.367 mo
25.6834 187.367 li
25.6834 179.367 li
17.6834 179.367 li
17.6834 187.367 li
clp
24.8781 187.367 mo
17.6834 187.367 li
17.6834 179.367 li
24.8781 179.367 li
24.8781 187.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 8.25 -12.7583 242.717 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 66 
/M[60 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0JYn;L?&-G4S4QD/EL46(j&f`XPb8X]heK!V:Mk9f,;d*=LHcO<6]oeYJQ^=&*[s,KteJidZH$O[\
H$dTT>J6/cQ^;ndmiU9NDdM:rG^5M4j\:W!2^r(iUj.0KioNmlQT$@"hP>CAPN)PdqZ9OUaBA~>

%%EndBinary
grestore
np
grestore
gsave
1.68324 179.367 mo
9.68345 179.367 li
9.68345 171.367 li
1.68324 171.367 li
1.68324 179.367 li
clp
9.68345 179.367 mo
9.68345 179.367 li
8.9519 179.367 li
8.9519 171.367 li
9.68345 171.367 li
9.68345 179.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -21.5083 250.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
GarQ-2J6hF`M7YlO5a#!MF[1b-342K.-<n#~>

%%EndBinary
grestore
np
grestore
gsave
9.68345 179.367 mo
17.6834 179.367 li
17.6834 171.367 li
9.68345 171.367 li
9.68345 179.367 li
clp
17.6834 179.367 mo
17.6834 179.367 li
9.68345 179.367 li
9.68345 171.367 li
17.6834 171.367 li
17.6834 179.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -20.7583 250.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$iiS\888Dbpd$hO3`=$.Dr<h!BT][Rm(\l)E8\N_!s];U3,mfkJHH,e*&qoq^juRm%NIHI
i5"<#*&qoq^nH3@E8\N_!s];U3,mfkJHH,e*&qoq^juTC$?>">JHH,e*&qoqn@HL<SJ->q~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 179.367 mo
25.6834 179.367 li
25.6834 171.367 li
17.6834 171.367 li
17.6834 179.367 li
clp
24.8781 179.367 mo
17.6834 179.367 li
17.6834 171.367 li
24.8781 171.367 li
24.8781 179.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 8.25 -12.7583 250.717 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 66 
/M[60 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0JYn;L?&-G4S4QD/EL46(j&f`XPb8X]heK!V:Mk9f,;d*=LHcO<6]oeYJQ^=&*[s,KteJidZH$O[\
H$dTT>J6/cQ^;ndmiU9NDdM:rG^5M4j\:W!2^r(iUj.0KioNmlQT$@"hP>CAPN)PdqZ9OUaBA~>

%%EndBinary
grestore
np
grestore
gsave
1.68324 171.367 mo
9.68345 171.367 li
9.68345 163.367 li
1.68324 163.367 li
1.68324 171.367 li
clp
9.68345 171.367 mo
9.68345 171.367 li
8.9519 171.367 li
8.9519 166.038 li
9.68345 166.038 li
9.68345 171.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 5.625 -21.5083 258.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 45 
/M[8 0 0 -45 0 45 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;
L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;
L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;
L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;
L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;
L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;L5(G;~>
<~>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9
>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9>?b<9~>
<~2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS
2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS2`EZS~>
<~!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
9.68345 171.367 mo
17.6834 171.367 li
17.6834 163.367 li
9.68345 163.367 li
9.68345 171.367 li
clp
17.6834 171.367 mo
17.6834 171.367 li
9.68345 171.367 li
9.68345 166.038 li
17.6834 166.038 li
17.6834 171.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 5.625 -20.7583 258.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 45 
/M[66 0 0 -45 0 45 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$iiS\Ra_mXn:PU(FJ\&Q2fPB$,E'iRoCj^:%NIHIi4smG#7__5oZ.7I*&qoq^juRm%NIHI
i4smG#7__5E8^4P*&qoq^juRm%NIHMGIZtY7m$~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 171.367 mo
25.6834 171.367 li
25.6834 163.367 li
17.6834 163.367 li
17.6834 171.367 li
clp
24.8781 171.367 mo
17.6834 171.367 li
17.6834 166.038 li
24.8781 166.038 li
24.8781 171.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[7.5 0 0 5.625 -12.7583 258.717 ]ct
snap_to_device
<<
/T 1
/W 60 
/H 45 
/M[60 0 0 -45 0 45 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0J0b&Xu!!GTd8DXnen:PU(HprQsMX>>"Ctg]lS]AHFRTXpN*A?m1)gQ^SH$T;D2tXSoH$N'Qns8:s
/]Gn;MO1dd05i:GhGV#!V0I8Yna`"*^!D$+?'ZPX~>

%%EndBinary
grestore
np
grestore
grestore
gsave
24.8781 166.037 mo
42.9676 147.948 li
42.9676 212.913 li
24.8781 231.003 li
24.8781 166.037 li
clp
gsave
24.8781 231.003 mo
42.9676 231.003 li
42.9676 147.948 li
24.8781 147.948 li
24.8781 231.003 li
clp
gsave
17.6834 235.367 mo
25.6834 235.367 li
25.6834 227.367 li
17.6834 227.367 li
17.6834 235.367 li
clp
24.8781 231.003 mo
24.8781 227.367 li
25.6834 227.367 li
25.6834 230.198 li
24.8781 231.003 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 3.875 -5.5083 199.092 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 31 
/M[8 0 0 -31 0 31 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV~>
<~H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`~>
<~<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%~>
<~&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
25.6834 235.367 mo
33.6834 235.367 li
33.6834 227.367 li
25.6834 227.367 li
25.6834 235.367 li
clp
25.6834 230.198 mo
25.6834 227.367 li
28.5144 227.367 li
25.6834 230.198 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[3.125 0 0 3.125 -4.7583 199.842 ]ct
snap_to_device
<<
/T 1
/W 25 
/H 25 
/M[25 0 0 -25 0 25 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>#uH3[R6PH,W#_XVN7p"$a/C#RG)Y-0C'SGi!72bHH2~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 227.367 mo
25.6834 227.367 li
25.6834 219.367 li
17.6834 219.367 li
17.6834 227.367 li
clp
25.6834 227.367 mo
25.6834 227.367 li
24.8781 227.367 li
24.8781 219.367 li
25.6834 219.367 li
25.6834 227.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -5.5083 202.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gaqu;'dg.u'T_6N4GlZ!-m$@&Qimft6c^6B~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 227.367 mo
33.6834 227.367 li
33.6834 219.367 li
25.6834 219.367 li
25.6834 227.367 li
clp
28.5144 227.367 mo
25.6834 227.367 li
25.6834 219.367 li
33.6834 219.367 li
33.6834 222.198 li
28.5144 227.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 202.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 227.367 mo
41.6833 227.367 li
41.6833 219.367 li
33.6834 219.367 li
33.6834 227.367 li
clp
33.6834 222.198 mo
33.6834 219.367 li
36.5144 219.367 li
33.6834 222.198 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[3.125 0 0 3.125 3.2417 207.842 ]ct
snap_to_device
<<
/T 1
/W 25 
/H 25 
/M[25 0 0 -25 0 25 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>#uH3[R6PH,W#_XVN7p"$a/C#RG)Y-0C'SGi!72bHH2~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 219.367 mo
25.6834 219.367 li
25.6834 211.366 li
17.6834 211.366 li
17.6834 219.367 li
clp
25.6834 219.367 mo
25.6834 219.367 li
24.8781 219.367 li
24.8781 211.366 li
25.6834 211.366 li
25.6834 219.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -5.5083 210.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gaqu;'dg.u'T_6N4GlZ!-m$@&Qimft6c^6B~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 219.367 mo
33.6834 219.367 li
33.6834 211.366 li
25.6834 211.366 li
25.6834 219.367 li
clp
33.6834 219.367 mo
33.6834 219.367 li
25.6834 219.367 li
25.6834 211.366 li
33.6834 211.366 li
33.6834 219.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 210.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 219.367 mo
41.6833 219.367 li
41.6833 211.366 li
33.6834 211.366 li
33.6834 219.367 li
clp
36.5144 219.367 mo
33.6834 219.367 li
33.6834 211.366 li
41.6833 211.366 li
41.6833 214.198 li
36.5144 219.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 3.2417 210.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 219.367 mo
49.6833 219.367 li
49.6833 211.366 li
41.6833 211.366 li
41.6833 219.367 li
clp
41.6833 214.198 mo
41.6833 211.366 li
42.9676 211.366 li
42.9676 212.913 li
41.6833 214.198 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 3.125 11.2417 215.842 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 25 
/M[12 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g
4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g
4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE
4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g
4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE4?P_g4?P_g4JJRE~>
<~0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t3
0/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t3
07%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj
0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t3
0/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj0/"t30/"t307%qj~>
<~0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG17
0JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG17
0NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T
0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG17
0JG170NM4T0JG170JG170NM4T0JG170JG170NM4T0JG170JG170NM4T~>
<~!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!
!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!
!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q
!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!
!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q!!!!!!!!!!!"]\Q~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
17.6834 211.366 mo
25.6834 211.366 li
25.6834 203.367 li
17.6834 203.367 li
17.6834 211.366 li
clp
25.6834 211.366 mo
25.6834 211.366 li
24.8781 211.366 li
24.8781 203.367 li
25.6834 203.367 li
25.6834 211.366 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -5.5083 218.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gaqu;'dg.u'T_6N4GlZ!-m$@&Qimft6c^6B~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 211.366 mo
33.6834 211.366 li
33.6834 203.367 li
25.6834 203.367 li
25.6834 211.366 li
clp
33.6834 211.366 mo
33.6834 211.366 li
25.6834 211.366 li
25.6834 203.367 li
33.6834 203.367 li
33.6834 211.366 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 218.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 211.366 mo
41.6833 211.366 li
41.6833 203.367 li
33.6834 203.367 li
33.6834 211.366 li
clp
41.6833 211.366 mo
41.6833 211.366 li
33.6834 211.366 li
33.6834 203.367 li
41.6833 203.367 li
41.6833 211.366 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 3.2417 218.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 211.366 mo
49.6833 211.366 li
49.6833 203.367 li
41.6833 203.367 li
41.6833 211.366 li
clp
42.9676 211.366 mo
41.6833 211.366 li
41.6833 203.367 li
42.9676 203.367 li
42.9676 211.366 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 8.25 11.2417 218.717 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 66 
/M[12 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>$,A5<[A3"WeW6^P<BmL4GcDk)UNdK6i__gqM891Xqjq-~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 203.367 mo
25.6834 203.367 li
25.6834 195.367 li
17.6834 195.367 li
17.6834 203.367 li
clp
25.6834 203.367 mo
25.6834 203.367 li
24.8781 203.367 li
24.8781 195.367 li
25.6834 195.367 li
25.6834 203.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -5.5083 226.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gaqu;'dg.u'T_6N4GlZ!-m$@&Qimft6c^6B~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 203.367 mo
33.6834 203.367 li
33.6834 195.367 li
25.6834 195.367 li
25.6834 203.367 li
clp
33.6834 203.367 mo
33.6834 203.367 li
25.6834 203.367 li
25.6834 195.367 li
33.6834 195.367 li
33.6834 203.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 226.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 203.367 mo
41.6833 203.367 li
41.6833 195.367 li
33.6834 195.367 li
33.6834 203.367 li
clp
41.6833 203.367 mo
41.6833 203.367 li
33.6834 203.367 li
33.6834 195.367 li
41.6833 195.367 li
41.6833 203.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 3.2417 226.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 203.367 mo
49.6833 203.367 li
49.6833 195.367 li
41.6833 195.367 li
41.6833 203.367 li
clp
42.9676 203.367 mo
41.6833 203.367 li
41.6833 195.367 li
42.9676 195.367 li
42.9676 203.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 8.25 11.2417 226.717 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 66 
/M[12 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>$,A5<[A3"WeW6^P<BmL4GcDk)UNdK6i__gqM891Xqjq-~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 195.367 mo
25.6834 195.367 li
25.6834 187.367 li
17.6834 187.367 li
17.6834 195.367 li
clp
25.6834 195.367 mo
25.6834 195.367 li
24.8781 195.367 li
24.8781 187.367 li
25.6834 187.367 li
25.6834 195.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -5.5083 234.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gaqu;'dg.u'T_6N4GlZ!-m$@&Qimft6c^6B~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 195.367 mo
33.6834 195.367 li
33.6834 187.367 li
25.6834 187.367 li
25.6834 195.367 li
clp
33.6834 195.367 mo
33.6834 195.367 li
25.6834 195.367 li
25.6834 187.367 li
33.6834 187.367 li
33.6834 195.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 234.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 195.367 mo
41.6833 195.367 li
41.6833 187.367 li
33.6834 187.367 li
33.6834 195.367 li
clp
41.6833 195.367 mo
41.6833 195.367 li
33.6834 195.367 li
33.6834 187.367 li
41.6833 187.367 li
41.6833 195.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 3.2417 234.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 195.367 mo
49.6833 195.367 li
49.6833 187.367 li
41.6833 187.367 li
41.6833 195.367 li
clp
42.9676 195.367 mo
41.6833 195.367 li
41.6833 187.367 li
42.9676 187.367 li
42.9676 195.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 8.25 11.2417 234.717 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 66 
/M[12 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>$,A5<[A3"WeW6^P<BmL4GcDk)UNdK6i__gqM891Xqjq-~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 187.367 mo
25.6834 187.367 li
25.6834 179.367 li
17.6834 179.367 li
17.6834 187.367 li
clp
25.6834 187.367 mo
25.6834 187.367 li
24.8781 187.367 li
24.8781 179.367 li
25.6834 179.367 li
25.6834 187.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -5.5083 242.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gaqu;'dg.u'T_6N4GlZ!-m$@&Qimft6c^6B~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 187.367 mo
33.6834 187.367 li
33.6834 179.367 li
25.6834 179.367 li
25.6834 187.367 li
clp
33.6834 187.367 mo
33.6834 187.367 li
25.6834 187.367 li
25.6834 179.367 li
33.6834 179.367 li
33.6834 187.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 242.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 187.367 mo
41.6833 187.367 li
41.6833 179.367 li
33.6834 179.367 li
33.6834 187.367 li
clp
41.6833 187.367 mo
41.6833 187.367 li
33.6834 187.367 li
33.6834 179.367 li
41.6833 179.367 li
41.6833 187.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 3.2417 242.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 187.367 mo
49.6833 187.367 li
49.6833 179.367 li
41.6833 179.367 li
41.6833 187.367 li
clp
42.9676 187.367 mo
41.6833 187.367 li
41.6833 179.367 li
42.9676 179.367 li
42.9676 187.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 8.25 11.2417 242.717 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 66 
/M[12 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>$,A5<[A3"WeW6^P<BmL4GcDk)UNdK6i__gqM891Xqjq-~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 179.367 mo
25.6834 179.367 li
25.6834 171.367 li
17.6834 171.367 li
17.6834 179.367 li
clp
25.6834 179.367 mo
25.6834 179.367 li
24.8781 179.367 li
24.8781 171.367 li
25.6834 171.367 li
25.6834 179.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 8.25 -5.5083 250.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 66 
/M[8 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gaqu;'dg.u'T_6N4GlZ!-m$@&Qimft6c^6B~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 179.367 mo
33.6834 179.367 li
33.6834 171.367 li
25.6834 171.367 li
25.6834 179.367 li
clp
33.6834 179.367 mo
33.6834 179.367 li
25.6834 179.367 li
25.6834 171.367 li
33.6834 171.367 li
33.6834 179.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 250.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 179.367 mo
41.6833 179.367 li
41.6833 171.367 li
33.6834 171.367 li
33.6834 179.367 li
clp
41.6833 179.367 mo
41.6833 179.367 li
33.6834 179.367 li
33.6834 171.367 li
41.6833 171.367 li
41.6833 179.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 3.2417 250.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 179.367 mo
49.6833 179.367 li
49.6833 171.367 li
41.6833 171.367 li
41.6833 179.367 li
clp
42.9676 179.367 mo
41.6833 179.367 li
41.6833 171.367 li
42.9676 171.367 li
42.9676 179.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 8.25 11.2417 250.717 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 66 
/M[12 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>$,A5<[A3"WeW6^P<BmL4GcDk)UNdK6i__gqM891Xqjq-~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 171.367 mo
25.6834 171.367 li
25.6834 163.367 li
17.6834 163.367 li
17.6834 171.367 li
clp
25.6834 171.367 mo
25.6834 171.367 li
24.8781 171.367 li
24.8781 166.037 li
25.6834 165.232 li
25.6834 171.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 6.375 -5.5083 258.717 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 51 
/M[8 0 0 -51 0 51 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BV~>
<~H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`~>
<~<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%
<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%~>
<~&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa
&.fBa&.fBa&.fBa&.fBa&.fBa&.fBa~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
25.6834 171.367 mo
33.6834 171.367 li
33.6834 163.367 li
25.6834 163.367 li
25.6834 171.367 li
clp
33.6834 171.367 mo
33.6834 171.367 li
25.6834 171.367 li
25.6834 165.232 li
27.5488 163.367 li
33.6834 163.367 li
33.6834 171.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 258.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 171.367 mo
41.6833 171.367 li
41.6833 163.367 li
33.6834 163.367 li
33.6834 171.367 li
clp
41.6833 171.367 mo
41.6833 171.367 li
33.6834 171.367 li
33.6834 163.367 li
41.6833 163.367 li
41.6833 171.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 3.2417 258.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 171.367 mo
49.6833 171.367 li
49.6833 163.367 li
41.6833 163.367 li
41.6833 171.367 li
clp
42.9676 171.367 mo
41.6833 171.367 li
41.6833 163.367 li
42.9676 163.367 li
42.9676 171.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 8.25 11.2417 258.717 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 66 
/M[12 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>$,A5<[A3"WeW6^P<BmL4GcDk)UNdK6i__gqM891Xqjq-~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 163.367 mo
33.6834 163.367 li
33.6834 155.367 li
25.6834 155.367 li
25.6834 163.367 li
clp
33.6834 163.367 mo
33.6834 163.367 li
27.5488 163.367 li
33.6834 157.232 li
33.6834 163.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[6.375 0 0 6.375 -2.8833 266.717 ]ct
snap_to_device
<<
/T 1
/W 51 
/H 51 
/M[51 0 0 -51 0 51 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0I0`ceY!5L96bR"QB%`BK&9':_K4`]V%fCt:/!!!"Sc25'NSF6".V8Q#jQR4@[?CJM`H"litjJBsk
PF!UL9jX:$1jNdb]PJ6aA8M~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 163.367 mo
41.6833 163.367 li
41.6833 155.367 li
33.6834 155.367 li
33.6834 163.367 li
clp
41.6833 163.367 mo
41.6833 163.367 li
33.6834 163.367 li
33.6834 157.232 li
35.5488 155.367 li
41.6833 155.367 li
41.6833 163.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 3.2417 266.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K3=u66&AUOVhuj1Q%`BIpV+A+ZB=<VI9se4NC!BM)0/MP%JHH,e*&qoq^juRm%NIHIi4smG#7__5
E8\N__tc92i4so]rV=6[!s];U3,mfkJHH,e*&qoq^juRm%NKAB!s];U3,mfkJHL\Z*B(X/Y:B~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 163.367 mo
49.6833 163.367 li
49.6833 155.367 li
41.6833 155.367 li
41.6833 163.367 li
clp
42.9676 163.367 mo
41.6833 163.367 li
41.6833 155.367 li
42.9676 155.367 li
42.9676 163.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 8.25 11.2417 266.717 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 66 
/M[12 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>$,A5<[A3"WeW6^P<BmL4GcDk)UNdK6i__gqM891Xqjq-~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 155.367 mo
41.6833 155.367 li
41.6833 147.366 li
33.6834 147.366 li
33.6834 155.367 li
clp
41.6833 155.367 mo
41.6833 155.367 li
35.5488 155.367 li
41.6833 149.232 li
41.6833 155.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[6.375 0 0 6.375 5.1167 274.717 ]ct
snap_to_device
<<
/T 1
/W 51 
/H 51 
/M[51 0 0 -51 0 51 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0I0`ceY!5L96bR"QB%`BK&9':_K4`]V%fCt:/!!!"Sc25'NSF6".V8Q#jQR4@[?CJM`H"litjJBsk
PF!UL9jX:$1jNdb]PJ6aA8M~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 155.367 mo
49.6833 155.367 li
49.6833 147.366 li
41.6833 147.366 li
41.6833 155.367 li
clp
42.9676 155.367 mo
41.6833 155.367 li
41.6833 149.232 li
42.9676 147.948 li
42.9676 147.948 li
42.9676 155.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 7.625 11.2417 274.717 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 61 
/M[12 0 0 -61 0 61 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gau+f2dij5J/;4>$,A5<[A3"WeW6^P<BjC2O5a#!MF[1b*lZ'*!.c#(Jc~>

%%EndBinary
grestore
np
grestore
grestore
grestore
gsave
8.9519 166.037 mo
27.0415 147.948 li
42.9676 147.948 li
24.8781 166.037 li
8.9519 166.037 li
clp
gsave
8.9519 166.037 mo
42.9676 166.037 li
42.9676 147.948 li
8.9519 147.948 li
8.9519 166.037 li
clp
gsave
1.68324 171.367 mo
9.68345 171.367 li
9.68345 163.367 li
1.68324 163.367 li
1.68324 171.367 li
clp
9.68345 166.037 mo
8.9519 166.037 li
9.68345 165.306 li
9.68345 166.037 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1 0 0 .875 -21.5083 264.092 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 7 
/M[8 0 0 -7 0 7 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~BP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'mBP;'m~>
<~77BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX677BX6~>
<~/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'/1`>'~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
9.68345 171.367 mo
17.6834 171.367 li
17.6834 163.367 li
9.68345 163.367 li
9.68345 171.367 li
clp
17.6834 166.037 mo
9.68345 166.037 li
9.68345 165.306 li
11.6226 163.367 li
17.6834 163.367 li
17.6834 166.037 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 2.875 -20.7583 264.092 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 23 
/M[66 0 0 -23 0 23 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0J0b"+:#QV(l">e\tQha]:$%*_g7h%:":,^t2ost59*^"]:i5($N%j!iXnDM-8#7hk<GjsX"_?\6;
AO?~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 171.367 mo
25.6834 171.367 li
25.6834 163.367 li
17.6834 163.367 li
17.6834 171.367 li
clp
24.8781 166.037 mo
17.6834 166.037 li
17.6834 163.367 li
25.6834 163.367 li
25.6834 165.232 li
24.8781 166.037 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 2.875 -12.7583 264.092 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 23 
/M[66 0 0 -23 0 23 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0J0b"+:#QV(l">e\tQha]:$%*_g7h%:":,^t2ost59*^"]:i5($N%j!iXnDM-8#7hk<GjsX"_?\6;
AO?~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 171.367 mo
33.6834 171.367 li
33.6834 163.367 li
25.6834 163.367 li
25.6834 171.367 li
clp
25.6834 165.232 mo
25.6834 163.367 li
27.5488 163.367 li
25.6834 165.232 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[2.125 0 0 2.125 -4.7583 264.842 ]ct
snap_to_device
<<
/T 1
/W 17 
/H 17 
/M[17 0 0 -17 0 17 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~#6tJ=#6tJ=#A@daBP;'mBEnbI#6tJ=#7"pUBP;'mBP7VU#6tJ=#6tKIBP;'mBP;&a#6tJ=#6tJ=BP;'m
BP;'m#6tJ=#6tJ=#A@daBP;'mBEnbI#6tJ=#7"pUBP;'mBP7VU#6tJ=#6tKIBP;'mBP;&a#6tJ=#6tJ=
BP;'mBP;'m#6tJ=#6tJ=#A@daBP;'mBEnbI#6tJ=#7"pUBP;'mBP7VU#6tJ=#6tKIBP;'mBP;&a#6tJ=
#6tJ=BP;'mBP;'m#6tJ=#6tJ=#A@daBP;'mBEnbI#6tJ=#7"pUBP;'mBP7VU#6tJ=#6tKIBP;'mBP;&a
#6tJ=#6tJ=BP;'mBP;'m#6tJ=#6tJ=#A@daBP;'mBE~>
<~"U,&5"U,&5"[tjK77BX670Nhu"U,&5"U.=`77BX677@@`"U,&5"U,&u77BX677BWK"U,&5"U,&577BX6
77BX6"U,&5"U,&5"[tjK77BX670Nhu"U,&5"U.=`77BX677@@`"U,&5"U,&u77BX677BWK"U,&5"U,&5
77BX677BX6"U,&5"U,&5"[tjK77BX670Nhu"U,&5"U.=`77BX677@@`"U,&5"U,&u77BX677BWK"U,&5
"U,&577BX677BX6"U,&5"U,&5"[tjK77BX670Nhu"U,&5"U.=`77BX677@@`"U,&5"U,&u77BX677BWK
"U,&5"U,&577BX677BX6"U,&5"U,&5"[tjK77BX670~>
<~"U,&5"U,&5"Y;2U/1`>'/-Q1\"U,&5"U-G./1`>'/1^r."U,&5"U,&\/1`>'/1`=U"U,&5"U,&5/1`>'
/1`>'"U,&5"U,&5"Y;2U/1`>'/-Q1\"U,&5"U-G./1`>'/1^r."U,&5"U,&\/1`>'/1`=U"U,&5"U,&5
/1`>'/1`>'"U,&5"U,&5"Y;2U/1`>'/-Q1\"U,&5"U-G./1`>'/1^r."U,&5"U,&\/1`>'/1`=U"U,&5
"U,&5/1`>'/1`>'"U,&5"U,&5"Y;2U/1`>'/-Q1\"U,&5"U-G./1`>'/1^r."U,&5"U,&\/1`>'/1`=U
"U,&5"U,&5/1`>'/1`>'"U,&5"U,&5"Y;2U/1`>'/-~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
9.68345 163.367 mo
17.6834 163.367 li
17.6834 155.367 li
9.68345 155.367 li
9.68345 163.367 li
clp
17.6834 163.367 mo
17.6834 163.367 li
11.6226 163.367 li
17.6834 157.306 li
17.6834 163.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[6.25 0 0 6.25 -18.7583 266.717 ]ct
snap_to_device
<<
/T 1
/W 50 
/H 50 
/M[50 0 0 -50 0 50 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0I0bM2D!5Li8%PtLi0DJUF#E1LW&&0LhIDuHk!8sk7kL&185(*.piM4LbMiSVq/O!?c[.n>)dGgq?
7uNED+"]Z[$6L@,jEXK~>

%%EndBinary
grestore
np
grestore
gsave
17.6834 163.367 mo
25.6834 163.367 li
25.6834 155.367 li
17.6834 155.367 li
17.6834 163.367 li
clp
25.6834 163.367 mo
25.6834 163.367 li
17.6834 163.367 li
17.6834 157.306 li
19.6226 155.367 li
25.6834 155.367 li
25.6834 163.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -12.7583 266.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0bFC.$ii#J?Hlj[0DJV!KT6a!_]-[0`5n[dk4_j[*&qoq^juRm%NIHIi4smG#7__5E8\N_!s];U
3,lAL#7__5E9No)*&qoq^juRm%NIHIi4smG#7__5E8\O*6QA()i4smG#7__5]^B_=r`-DS~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 163.367 mo
33.6834 163.367 li
33.6834 155.367 li
25.6834 155.367 li
25.6834 163.367 li
clp
27.5488 163.367 mo
25.6834 163.367 li
25.6834 155.367 li
33.6834 155.367 li
33.6834 157.232 li
27.5488 163.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 8.25 -4.7583 266.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 66 
/M[66 0 0 -66 0 66 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0bFC.$ii#J?Hlj[0DJV!KT6a!_]-[0`5n[dk4_j[*&qoq^juRm%NIHIi4smG#7__5E8\N_!s];U
3,lAL#7__5E9No)*&qoq^juRm%NIHIi4smG#7__5E8\O*6QA()i4smG#7__5]^B_=r`-DS~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 163.367 mo
41.6833 163.367 li
41.6833 155.367 li
33.6834 155.367 li
33.6834 163.367 li
clp
33.6834 157.232 mo
33.6834 155.367 li
35.5488 155.367 li
33.6834 157.232 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[2.125 0 0 2.125 3.2417 272.842 ]ct
snap_to_device
<<
/T 1
/W 17 
/H 17 
/M[17 0 0 -17 0 17 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~#6tJ=#6tJ=#A@daBP;'mBEnbI#6tJ=#7"pUBP;'mBP7VU#6tJ=#6tKIBP;'mBP;&a#6tJ=#6tJ=BP;'m
BP;'m#6tJ=#6tJ=#A@daBP;'mBEnbI#6tJ=#7"pUBP;'mBP7VU#6tJ=#6tKIBP;'mBP;&a#6tJ=#6tJ=
BP;'mBP;'m#6tJ=#6tJ=#A@daBP;'mBEnbI#6tJ=#7"pUBP;'mBP7VU#6tJ=#6tKIBP;'mBP;&a#6tJ=
#6tJ=BP;'mBP;'m#6tJ=#6tJ=#A@daBP;'mBEnbI#6tJ=#7"pUBP;'mBP7VU#6tJ=#6tKIBP;'mBP;&a
#6tJ=#6tJ=BP;'mBP;'m#6tJ=#6tJ=#A@daBP;'mBE~>
<~"U,&5"U,&5"[tjK77BX670Nhu"U,&5"U.=`77BX677@@`"U,&5"U,&u77BX677BWK"U,&5"U,&577BX6
77BX6"U,&5"U,&5"[tjK77BX670Nhu"U,&5"U.=`77BX677@@`"U,&5"U,&u77BX677BWK"U,&5"U,&5
77BX677BX6"U,&5"U,&5"[tjK77BX670Nhu"U,&5"U.=`77BX677@@`"U,&5"U,&u77BX677BWK"U,&5
"U,&577BX677BX6"U,&5"U,&5"[tjK77BX670Nhu"U,&5"U.=`77BX677@@`"U,&5"U,&u77BX677BWK
"U,&5"U,&577BX677BX6"U,&5"U,&5"[tjK77BX670~>
<~"U,&5"U,&5"Y;2U/1`>'/-Q1\"U,&5"U-G./1`>'/1^r."U,&5"U,&\/1`>'/1`=U"U,&5"U,&5/1`>'
/1`>'"U,&5"U,&5"Y;2U/1`>'/-Q1\"U,&5"U-G./1`>'/1^r."U,&5"U,&\/1`>'/1`=U"U,&5"U,&5
/1`>'/1`>'"U,&5"U,&5"Y;2U/1`>'/-Q1\"U,&5"U-G./1`>'/1^r."U,&5"U,&\/1`>'/1`=U"U,&5
"U,&5/1`>'/1`>'"U,&5"U,&5"Y;2U/1`>'/-Q1\"U,&5"U-G./1`>'/1^r."U,&5"U,&\/1`>'/1`=U
"U,&5"U,&5/1`>'/1`>'"U,&5"U,&5"Y;2U/1`>'/-~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
17.6834 155.367 mo
25.6834 155.367 li
25.6834 147.366 li
17.6834 147.366 li
17.6834 155.367 li
clp
25.6834 155.367 mo
25.6834 155.367 li
19.6226 155.367 li
25.6834 149.306 li
25.6834 155.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[6.25 0 0 6.25 -10.7583 274.717 ]ct
snap_to_device
<<
/T 1
/W 50 
/H 50 
/M[50 0 0 -50 0 50 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0I0bM2D!5Li8%PtLi0DJUF#E1LW&&0LhIDuHk!8sk7kL&185(*.piM4LbMiSVq/O!?c[.n>)dGgq?
7uNED+"]Z[$6L@,jEXK~>

%%EndBinary
grestore
np
grestore
gsave
25.6834 155.367 mo
33.6834 155.367 li
33.6834 147.366 li
25.6834 147.366 li
25.6834 155.367 li
clp
33.6834 155.367 mo
33.6834 155.367 li
25.6834 155.367 li
25.6834 149.306 li
27.0415 147.948 li
33.6834 147.948 li
33.6834 155.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 7.625 -4.7583 274.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 61 
/M[66 0 0 -61 0 61 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$q*sY"uFoI$iUk`TknSe)ub;32^?=93dZ9^B#&s"#7__5E8\N_!s];U3,mfkJHH,e*&qoq
^juRm]mN\jNroUs*3/&7JHH,e*&qoq^juRm%NIHIi4smG#7__7`.8!q%NP=,>W1!H0E~>

%%EndBinary
grestore
np
grestore
gsave
33.6834 155.367 mo
41.6833 155.367 li
41.6833 147.366 li
33.6834 147.366 li
33.6834 155.367 li
clp
35.5488 155.367 mo
33.6834 155.367 li
33.6834 147.948 li
41.6833 147.948 li
41.6833 149.232 li
35.5488 155.367 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[8.25 0 0 7.625 3.2417 274.717 ]ct
snap_to_device
<<
/T 1
/W 66 
/H 61 
/M[66 0 0 -61 0 61 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"0K0b"+*$q*sY"uFoI$iUk`TknSe)ub;32^?=93dZ9^B#&s"#7__5E8\N_!s];U3,mfkJHH,e*&qoq
^juRm]mN\jNroUs*3/&7JHH,e*&qoq^juRm%NIHIi4smG#7__7`.8!q%NP=,>W1!H0E~>

%%EndBinary
grestore
np
grestore
gsave
41.6833 155.367 mo
49.6833 155.367 li
49.6833 147.366 li
41.6833 147.366 li
41.6833 155.367 li
clp
41.6833 149.232 mo
41.6833 147.948 li
42.9676 147.948 li
42.9676 147.948 li
41.6833 149.232 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 1.5 11.2417 280.842 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 12 
/M[12 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=
#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=
#A@da#6tJ=#6tJ=#A@da~>
<~"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5
"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5
"[tjK"U,&5"U,&5"[tjK~>
<~"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5
"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5
"Y;2U"U,&5"U,&5"Y;2U~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
41.6833 149.232 mo
41.6833 149.232 li
42.9676 147.948 li
42.9676 147.948 li
41.6833 149.232 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 30.3167 430.208 ]ct
[1.5 0 0 1.5 11.2417 280.842 ]ct
snap_to_device
<<
/T 1
/W 12 
/H 12 
/M[12 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=
#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=#A@da#6tJ=#6tJ=
#A@da#6tJ=#6tJ=#A@da~>
<~"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5
"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5"[tjK"U,&5"U,&5
"[tjK"U,&5"U,&5"[tjK~>
<~"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5
"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5"Y;2U"U,&5"U,&5
"Y;2U"U,&5"U,&5"Y;2U~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
grestore
grestore
1 lw
8.95193 166.037 mo
27.0415 147.948 li
42.9677 147.948 li
42.9677 212.913 li
24.8781 231.003 li
8.95193 231.003 li
cp
8.95193 166.037 mo
24.8781 166.037 li
42.9677 147.948 li
24.8781 166.037 mo
24.8781 231.003 li
.535302 .450416 .448524 .0988174 cmyk
@
788.261 231.254 mo
804.187 231.254 li
804.187 166.289 li
788.261 166.289 li
cp
.537377 .360388 .204013 .00146487 cmyk
f
804.187 166.289 mo
822.277 148.199 li
822.277 213.165 li
804.187 231.254 li
cp
.65951 .492744 .332036 .0711986 cmyk
f
788.261 166.289 mo
806.351 148.199 li
822.277 148.199 li
804.187 166.289 li
cp
.4159 .272496 .162051 0 cmyk
f
788.261 166.289 mo
806.351 148.199 li
822.277 148.199 li
822.277 213.165 li
804.187 231.254 li
788.261 231.254 li
cp
788.261 166.289 mo
804.187 166.289 li
822.277 148.199 li
804.187 166.289 mo
804.187 231.254 li
.552117 .363409 .19263 .000823987 cmyk
@
690.121 231.254 mo
706.047 231.254 li
706.047 166.289 li
690.121 166.289 li
cp
.441352 .329351 .127382 0 cmyk
f
706.047 166.289 mo
724.136 148.199 li
724.136 213.165 li
706.047 231.254 li
cp
.597314 .476936 .27628 .0295415 cmyk
f
690.121 166.289 mo
708.21 148.199 li
724.136 148.199 li
706.047 166.289 li
cp
.338109 .248936 .0951858 0 cmyk
f
690.121 166.289 mo
708.21 148.199 li
724.136 148.199 li
724.136 213.165 li
706.047 231.254 li
690.121 231.254 li
cp
690.121 166.289 mo
706.047 166.289 li
724.136 148.199 li
706.047 166.289 mo
706.047 231.254 li
.535302 .450416 .448524 .0988174 cmyk
@
202.296 401.106 mo
218.222 401.106 li
218.222 336.14 li
202.296 336.14 li
cp
.452888 .102724 .652125 0 cmyk
f
218.222 336.14 mo
236.312 318.051 li
236.312 383.016 li
218.222 401.106 li
cp
.579492 .258854 .746456 .060029 cmyk
f
202.296 336.14 mo
220.386 318.051 li
236.312 318.051 li
218.222 336.14 li
cp
.359045 .070985 .501427 0 cmyk
f
202.296 336.14 mo
220.386 318.051 li
236.312 318.051 li
236.312 383.016 li
218.222 401.106 li
202.296 401.106 li
cp
202.296 336.14 mo
218.222 336.14 li
236.312 318.051 li
218.222 336.14 mo
218.222 401.106 li
.535302 .450416 .448524 .0988174 cmyk
@
228.379 401.106 mo
244.306 401.106 li
244.306 336.14 li
228.379 336.14 li
cp
.0750439 .336156 .370306 0 cmyk
f
244.306 336.14 mo
262.395 318.051 li
262.395 383.016 li
244.306 401.106 li
cp
.270817 .460182 .518425 .0242313 cmyk
f
228.379 336.14 mo
246.469 318.051 li
262.395 318.051 li
244.306 336.14 li
cp
.0588388 .267033 .285466 0 cmyk
f
228.379 336.14 mo
246.469 318.051 li
262.395 318.051 li
262.395 383.016 li
244.306 401.106 li
228.379 401.106 li
cp
228.379 336.14 mo
244.306 336.14 li
262.395 318.051 li
244.306 336.14 mo
244.306 401.106 li
.535302 .450416 .448524 .0988174 cmyk
@
254.463 401.106 mo
270.389 401.106 li
270.389 336.14 li
254.463 336.14 li
cp
.112551 .134554 .616968 0 cmyk
f
270.389 336.14 mo
288.478 318.051 li
288.478 383.016 li
270.389 401.106 li
cp
.306981 .29102 .741237 .015259 cmyk
f
254.463 336.14 mo
272.552 318.051 li
288.478 318.051 li
270.389 336.14 li
cp
.0886549 .10309 .479072 0 cmyk
f
254.463 336.14 mo
272.552 318.051 li
288.478 318.051 li
288.478 383.016 li
270.389 401.106 li
254.463 401.106 li
cp
254.463 336.14 mo
270.389 336.14 li
288.478 318.051 li
270.389 336.14 mo
270.389 401.106 li
.535302 .450416 .448524 .0988174 cmyk
@
280.546 401.106 mo
296.472 401.106 li
296.472 336.14 li
280.546 336.14 li
cp
.441352 .329351 .127382 0 cmyk
f
296.472 336.14 mo
314.562 318.051 li
314.562 383.016 li
296.472 401.106 li
cp
.597314 .476936 .27628 .0295415 cmyk
f
280.546 336.14 mo
298.636 318.051 li
314.562 318.051 li
296.472 336.14 li
cp
.338109 .248936 .0951858 0 cmyk
f
280.546 336.14 mo
298.636 318.051 li
314.562 318.051 li
314.562 383.016 li
296.472 401.106 li
280.546 401.106 li
cp
280.546 336.14 mo
296.472 336.14 li
314.562 318.051 li
296.472 336.14 mo
296.472 401.106 li
.535302 .450416 .448524 .0988174 cmyk
@
46.327 194.279 mo
69.6735 194.279 li
69.6735 195.779 li
46.327 195.779 li
cp
68.6735 192.029 mo
74.6735 195.029 li
68.6735 198.029 li
cp
.697566 .635523 .625452 .606073 cmyk
f
716.654 194.004 mo
740 194.004 li
740 195.504 li
716.654 195.504 li
cp
739 191.754 mo
745 194.754 li
739 197.754 li
cp
f
1.5 lw
746.022 194.754 mo
746.022 190.057 749.829 186.25 754.526 186.25 cv
759.222 186.25 763.03 190.057 763.03 194.754 cv
763.03 199.45 759.222 203.258 754.526 203.258 cv
749.829 203.258 746.022 199.45 746.022 194.754 cv
cp
@
747.73 195.275 mo
761.903 195.276 li
@
765.966 194.036 mo
777.974 194.036 li
777.974 195.536 li
765.966 195.536 li
cp
776.974 191.786 mo
782.974 194.786 li
776.974 197.786 li
cp
f
58.8262 195.981 mo
57.8942 195.981 li
58.6442 195.231 li
58.6442 291.306 li
57.8942 290.556 li
754.526 290.556 li
753.776 291.306 li
753.776 208.258 li
755.276 208.258 li
755.276 292.056 li
57.1442 292.056 li
57.1442 194.481 li
58.8262 194.481 li
cp
751.526 209.258 mo
754.526 203.258 li
757.526 209.258 li
cp
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: KAAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+CambriaMath
Type42DictBegin
[<000100000008000800080008676c796600000000000002a4000021466865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e8000000f86c6f636100000000000001e00000
007e6d6178700000000000000260000000206e616d650000000000000280
0000002467646972000000000000000000000000000100000006e66638ef
545c5f0f3cf5001b080000000000b9e6983d00000000d18d01e4f434ec4a
16f118ef00000009000200000000000000010000079afe390000175af434
fda416f100010000000000000000000000000000003e054400be03e80050
03e700680432003f04080014021c00aa02a8006c046e00b2046e0081046e
0090046e004d046e0082046e006f027000b80511fff30540003904c60087
03080039059600390441003906cf003705dc00370569008704f600390519
0039043c000f04c30046058300a60529ffeb04d20068047500690450005c
03ae006904a3006903f800690466fff104e5001e0470005c0289008c046a
005c0287008a06b50018049700180443006e0476001803ce001703b20032
0328007504970018045a0046047a000704d9000f0434000f044d0064056b
005f05a1001804a100b704a1008804a1009d04a10051043c002905b700b4
00000050009b00d0012e01750188019601c101fe0242027a02c303200347
038503d8040b043b04a004d10531058705bb0605066c06b106e707330795
07e30831087608a609010938097509c90a150a480a910ac00b330b880bba
0c110c4b0c900cc10d180d7a0dcf0e1b0e520e9c0edc0f290f680fb10ffb
1042108210a3000000010000003e00c0002d0097000600020010002f0086
000009a41128000300010000000100120001000000000006001200004a4f
524e4b492b43616d627269614d61746800>
[8519 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 5904 43 <0002006effef03d503cc0010001e00000522263534373e02333216151402
0e01011416333236123534262322060201b49bab181f92d680a0a8518dc4
feea5b5c6298585459689b5911aea350698ed471afa374fef8b45b01266e
69b0013d786c6daefebc>KAAAAA+CambriaMath AddT42Char 
1 5410 40 <0001008afff002410596001c0000013e0135342e01273f01330306151416
33323637170e0123222635343701590c0a1629350cfc3bf6161a1c1e443e
39617b4c414e1c047c353f1b1e1f0e033409fbad63312824314538664b5f
4a437f00>KAAAAA+CambriaMath AddT42Char 
1 6294 46 <00010032ffef037003cc002e0000012e0123220615141e01171e0315140e
012322262737331e0133323635342e01272e0235343e01333216170702f2
0b5f664f62194c503f4c2c145fa36853a062304e04646d5f6b1e444a4e57
2c559e695d994c2d02c9595c514224374230263f3e4531597f3e191eda60
62554e2d413c2d2f4c593a4f7740161bd200>KAAAAA+CambriaMath AddT42Char 
1 4038 30 <00020069fff0045d03cd002100330000013717030615141633323637170e
01232226353437270e0123222635341236333216033e0135342623220602
15141633323e0137035b5c4093161a1c1e443e395a7f4a3e4a170d60ac60
6e7987ec9141711c0906424f67a45c3943427f871c038b4210fd865f3528
2431453860515244373e048c82a696ac013db71dfeb1293c234d48a6fee9
8b686772d38a>KAAAAA+CambriaMath AddT42Char 
1 5504 41 <00010018fff0069d03cd00510000013e013332161d0114073e0133321615
1407030615141633323637170e0123222635343f013e0135342623220e02
070323133e0135342623220e02070323133635342623220607273e013332
1615140701b85cb65d60640156ab5c5c641d411b1a1c1e443e3956805241
4e212c180f2e342a606a43145bad73150f333626616e3e155fad92161a1c
1f453c39587f4c3f491702be89856d670e07087a776a603f74fefa6d2d28
243145385b565d48417ead5e5a1c453d3f85815dfe4b01fc5d5920483d3f
8b805cfe4f027a603428243343385c555343373e>KAAAAA+CambriaMath AddT42Char 
1 4610 34 <00020069fff0039903cd001900230000250e0123222635343e0233321615
1404210615141633323637253e02353426232206034561c784919f4d9cda
7b7979fec1fec60c525d5c9553fe2a8dca6c393865bbc76b6cb19e6bf5c3
6b6268aaaa3c46695f5053fc01316b5b3d45cc00>KAAAAA+CambriaMath AddT42Char 
1 1968 16 <00010087fff004a80565001e00000103232e0123220a0115141633323e01
3733030623222635341a012433321604a83c60085b658aed8a6c704b7062
30603dbbcdbcc469c001069d5b9b0532fef17b6dfeecfe3bc298902d6b60
fee434d8d093018001229816>KAAAAA+CambriaMath AddT42Char 
1 5734 42 <00010018fff0047f03cd003a0000013635342623220607273e0133321615
1407173e01333216151407030615141633323637170e0123222635343f01
3e0135342623220e020703230111161a1c1f453c395c7a4d3f49180c62b1
5e5d641d411b1a1c1e443e39568052414e212c180f2e342a616d42155fad
027a60342824334338605153433541048a856b5f3f74fefa6d2d28243145
385c555d48417ead5e5a1c453d43877f5dfe4f00>KAAAAA+CambriaMath AddT42Char 
1 6704 49 <00010046ffef043b03d10047000005222e0235343637133e013534262322
0e0207273e0333321e0215140607030e0115141633323e04353426232206
07273e0333321615140e0601641d27180a0e0b2a04051418132c2d2a1230
1f464e562d26301b0a020238090c0a0e21646e6e58371f212a4726391841
494e254840223e5668767f83111d35482b3982420115182b0a1f28172429
1238203f331f192931180e1a0bfe96396d2a2a34355d7f94a45324274135
332442321e4b3f307c8a9189795a3500>KAAAAA+CambriaMath AddT42Char 
1 3288 25 <0001000fffef041e0565002e000013141633323635342e01272e0235343e
013332161703232e0223220e01151416171e0215140e012322262713ab71
76889c2b57524a623a72d0885c9d5f3860042c5244537e424f7062673175
d5885cd5543c01377a7794843d5d55373261784a76b462191efeff55612a
4475484b714d446b784f7abd671e17011300>KAAAAA+CambriaMath AddT42Char 
1 6432 47 <00010075fff0030a04b3001e0000250e0123223534371323373e04373307
210721030e0115143332363702b757a158d11176a80f3b3d292220208a37
013016fed0591a0e672c6344bd6964d3434a02074501101c345165f765fe
7c71631e7c435100>KAAAAA+CambriaMath AddT42Char 
1 5162 38 <0002008cfff0024305440003001e0000010723370336353426273f013303
0615141633323637170e0123222635343702352eb12e91172b3f0bf43b90
161a1c1e443e39627a4c414e1c0544c2c2fd5e64322d20023509fd7e6232
2824314538674a5f4a4c7600>KAAAAA+CambriaMath AddT42Char 
1 4332 32 <00010069ffef038b03cc001d0000012e022322060215141633323637170e
012322263534123e013332170702f102152f2b65a16650505b854a3d5ebf
6e9196509ace7585703102cc4c4422a1fed9886663454a3d6860aca46b01
00c2601ee200>KAAAAA+CambriaMath AddT42Char 
1 4842 36 <0002001efe41047103cd002900390000170e0215141633323e0137270e01
232226353412363332161737170306070e0423203534363725323e033534
2623220602151416f5131a0b6c6d7b956a320e61a6606d7986ee923f7039
5c40670b2729334c78ab75fe86444b0167336573402d424d66a25d3c5617
2d2a1d4b456ff6f903857aa498ab013bba1e244210fe2e31c6d2ae8f6a3a
dc385c338346988ace4c4e47a5fee88b6867>KAAAAA+CambriaMath AddT42Char 
1 4428 33 <00020069fff0045d0596002a003e0000250e012322263534123633321617
373e0135342e01273f0133030615141633323637170e0123222635343713
363534262322060215141633323e043702bc60ac606e7987ec913d673634
080c1629350cfb3bf9161a1c1e443e395c7e493e4a17360f424d66a25d39
431f404543383011ff8c82a696ac013db7191fe721501e1e1f0e033409fb
ad6232282431453861505244373e016648404e47a5fee88b68671b3c5657
7754>KAAAAA+CambriaMath AddT42Char 
1 4720 35 <0001fff1fe410457059c00260000050e01232227371633323e0137132337
3e03373e0133321707232e0123220e010f0121072101af2ebe902a18110a
252d403717d7a90f433b21171235ddab624727580e2d2c394f3818190101
16fefe11d9d50558032e726503b745040e1c2d3cb4b510aa39323f7c696d
6500>KAAAAA+CambriaMath AddT42Char 
1 6178 45 <00010017000003aa03cd00250000013e0133321707232e0223220e020703
23133e0135342623220607273e0133321615140701bc62b55d4931306706
161e1724556a3f155fad910e081a1c1f453c395c7c4b3f491302cb857c0b
e02a2e123e847a5efe4f027a3c42162824334338605153433235>KAAAAA+CambriaMath AddT42Char 
1 1678 14 <0002fff3000004a10565001d0024000021373e0135342f0121070e011514
170721373e02370133131e0217070121032e01352302f60b3b3a0307fe48
372724650bfe670b1f373e3802819748051a2d2b0bfd4b01871103040b31
055267272e816245632654103131042953600454fba54f592b0631021c01
4242c62c>KAAAAA+CambriaMath AddT42Char 
1 5010 37 <0001005cfff004580596003200000136353426273f013303173e01333216
151407030615141633323637170e0123222635343f013e0135342623220e
02070323015d1833420cfd3aac0c5fa9565d641d411b1a1c1e443e39607b
4d414d212b17102e3429646e41135bad04776b292a22023409fd4b047e71
6b5f3f74fefa6d2d2824314538654c5c49417ead5d5d1a473b448b7f58fe
4f00>KAAAAA+CambriaMath AddT42Char 
1 784 6 <0001006c01c1023c025c0003000001213521023cfe3001d001c19b00>KAAAAA+CambriaMath AddT42Char 
1 4194 31 <0002005cfff003e705960018002d00003707270136353426273f01330317
3e01333216151402062322030615141633323e0435342623220e0207f85c
4001031733420cfd3ab00d61aa556d7985ec92850f0f4550294a4d453a20
3b41305d7248193141100477662e2a22023409fd44048274a697a5fec1bb
016c46424f461b3e6594a94d68683d8d9473>KAAAAA+CambriaMath AddT42Char 
1 3426 26 <00010046000004a50555002100002901373e03371323220e010723132103
23342e022b01030e0215141e01170254fe5b0b28261d1d14d67f3e4a4a35
604b04144e600a1c293494d90907051428313106142a5a5b03d324627301
51fea061613313fc26272e33141f23100400>KAAAAA+CambriaMath AddT42Char 
1 0 0 <000400be0000048605540028002c0030003400000135343e02373e033534
2623220e020723353e0133321e0215140e02070e031d0117152335011121
1101112111023706162a2417261b0f413e2030241909603c894346633e1c
0f243c2c20261507129001fcfd060361fc3801e71616252a3527192f3339
234b521424321e821e2e1d334629263e3d462d212c27281c066ea1a1fee4
049afb6604f7faac0554>KAAAAA+CambriaMath AddT42Char 
KAAAAA+CambriaMath /CharStrings get begin
/g43 43 def
/g40 40 def
/g46 46 def
/g30 30 def
/g41 41 def
/g34 34 def
/g16 16 def
/g42 42 def
/g49 49 def
/g25 25 def
/g47 47 def
/g38 38 def
/g32 32 def
/g36 36 def
/g33 33 def
/g35 35 def
/g45 45 def
/g14 14 def
/g37 37 def
/g6 6 def
/g31 31 def
/g26 26 def
end
KAAAAA+CambriaMath /Encoding get
dup 34 /g43 put
dup 35 /g40 put
dup 39 /g46 put
dup 40 /g30 put
dup 41 /g41 put
dup 42 /g34 put
dup 50 /g16 put
dup 51 /g42 put
dup 52 /g49 put
dup 60 /g25 put
dup 62 /g47 put
dup 63 /g38 put
dup 65 /g32 put
dup 66 /g36 put
dup 67 /g33 put
dup 69 /g35 put
dup 70 /g45 put
dup 76 /g14 put
dup 78 /g37 put
dup 91 /g6 put
dup 92 /g31 put
dup 93 /g26 put
pop
end
%ADOEndSubsetFont
/RVWWHN+CambriaMath /KAAAAA+CambriaMath findfont ct_VMDictPut/RVWWHN+CambriaMath*1 [34{/.notdef}rp /g43 /g40 3{/.notdef}rp /g46 /g30 /g41 /g34 7{/.notdef}rp /g16 /g42 /g49 7{/.notdef}rp /g25 /.notdef /g47 /g38 /.notdef /g32 /g36 /g33 /.notdef /g35 /g45 5{/.notdef}rp /g14 /.notdef /g37 12{/.notdef}rp /g6 /g31 /g26 162{/.notdef}rp]RVWWHN+CambriaMath nfRVWWHN+CambriaMath*1 [12 0 0 -12 0 0 ]msf349.976 338.967 mo(<)sh356.351 338.967 mo(*#E)[6 3.74393 0 ]xsh372.726 338.967 mo([)sh376.726 338.967 mo(L)sh384.351 338.967 mo(>>*3>?"3)[4.74963 4.74966 5.99762 6.87366 4.74966 3.7536 6.36966 0 ]xsh349.357 356.727 mo(<A\(#*)[6.37448 5.49847 6.62646 3.74634 0 ]xsh377.607 356.727 mo([)sh381.607 356.727 mo(LBBF*B\(>?"3)[7.62473 7.3728 7.3728 5.75278 6.00482 7.37277 6.62891 4.74484 3.74881 6.37686 0 ]xsh%ADOBeginSubsetFont: MAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RVWWHM+TimesNewRomanPSMT gcheck setglobal} if
1 150 1 <000200b0ffe4019003b0000b0017005bb0852b58b10319b80125401d0d67
369019a01902064000070c40120b0f4015034009349015a0150215bc0125
001800d2010000182b10f65df4ed10ed003fed3fed3130015d2b1bb70c12
0600120b000700183f3f1133113330315901321615140623222635343613
321615140623222635343601212e41412e2e41412c2f41422e2e414103b0
412e2e41412e2e41fd13422e2e41412e2e42>RVWWHM+TimesNewRomanPSMT AddT42Char 
RVWWHM+TimesNewRomanPSMT /CharStrings get begin
/g1 1 def
end
RVWWHM+TimesNewRomanPSMT /Encoding get
dup 33 /g1 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RVWWHM+TimesNewRomanPSMT*1 [33{/.notdef}rp /g1 /g2 221{/.notdef}rp]RVWWHM+TimesNewRomanPSMT nfRVWWHM+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf327.702 360.567 mo(!)shRVWWHN+CambriaMath*1 [12 0 0 -12 0 0 ]msf348.897 375.927 mo(<*#E)[6.37448 6.00241 3.74634 0 ]xsh371.647 375.927 mo([)sh375.647 375.927 mo(2\(#?\\F\(>*C)[7.12439 6.62048 3.75232 3.75241 6.50043 5.75638 6.62048 4.74844 5.99643 0 ]xsh436.527 375.927 mo(2"34)[7.12439 6.36844 6.87247 0 ]xsh348.118 395.127 mo(2)sh355.243 395.127 mo(N\(33*#)[6.62509 6.62527 6.87729 6.87726 6.00122 0 ]xsh394.998 395.127 mo(])sh402.123 395.127 mo(F\(3'E"F\)\(>?")[5.75037 6.62646 6.87848 5.49847 6.62643 6.37445 5.75037 9.99838 6.62646 4.75446 3.74643 0 ]xsh477.123 395.127 mo(3)sh518.293 360.267 mo
518.293 355.57 522.1 351.763 526.797 351.763 cv
531.494 351.763 535.301 355.57 535.301 360.267 cv
535.301 364.963 531.494 368.771 526.797 368.771 cv
522.1 368.771 518.293 364.963 518.293 360.267 cv
cp
.697566 .635523 .625452 .606073 cmyk
@
519.48 360.267 mo
533.653 360.267 li
@
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RVWWHN+CambriaMath gcheck setglobal} if
1 6530 48 <00010018fff0047f03cd003c0000010615141633323637170e0123222635
3437270e01232226353437133635342623220607273e0233321615140f01
0e0215141633323e023713330386161a1c1e443e395b80483e4a180c63b1
5d5d641d411b1a1c1f453c3955564f31404a1f2c110f072e342a616d4215
5fad014360342824314538615052443640048b846b5f3f7401066d2d2824
33433856401b56494f76ad424a3612453d43877f5d01b100>RVWWHN+CambriaMath AddT42Char 
1 746 5 <000200aa00000172038700030007000001152335131523350172c8c8c803
87eaeafd61e8e800>RVWWHN+CambriaMath AddT42Char 
RVWWHN+CambriaMath /CharStrings get begin
/g48 48 def
/g5 5 def
end
RVWWHN+CambriaMath /Encoding get
dup 61 /g48 put
dup 90 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RVWWHN+CambriaMath*1 [34{/.notdef}rp /g43 /g40 3{/.notdef}rp /g46 /g30 /g41 /g34 7{/.notdef}rp /g16 /g42 /g49 7{/.notdef}rp /g25 /g48 /g47 /g38 /.notdef /g32 /g36 /g33 /.notdef /g35 /g45 5{/.notdef}rp /g14 /.notdef /g37 11{/.notdef}rp /g5 /g6 /g31 /g26 162{/.notdef}rp]RVWWHN+CambriaMath nfRVWWHN+CambriaMath*1 [12 0 0 -12 0 0 ]msf546.252 364.887 mo(Z)sh554.002 364.887 mo(<=\\>)[6.37445 6.87848 6.50641 0 ]xsh578.502 364.887 mo(F\(A>?"3)[5.75037 6.62646 5.49847 4.75446 3.7464 6.37445 0 ]xsh1 lw
[4 3 ] 0 dsh
158.871 323.83 mo
158.871 313.208 167.481 304.598 178.103 304.598 cv
641.757 304.598 li
652.379 304.598 660.99 313.208 660.99 323.83 cv
660.99 400.757 li
660.99 411.379 652.379 419.99 641.757 419.99 cv
178.103 419.99 li
167.481 419.99 158.871 411.379 158.871 400.757 cv
cp
.697566 .635523 .625452 .606073 cmyk
@
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: KAAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RVWWHN+CambriaMath gcheck setglobal} if
1 1802 15 <00030039000004ce0555001d002b00360000011e0115140e012321373e03
371336353426273721321e011514060725323e0235342e022322070b0116
33323e013534262b01038e5d647af4ebfe430b26261a1616aa162e340b01
ef96b555a09efeea768b6a301e495f4f574b71913d5998996e8584b002bb
25895785bd7431061b3045630302643a312603313f7a5c83c3342b266275
4d2b4b351703fdf7fd6b0445b0816566>RVWWHN+CambriaMath AddT42Char 
1 2830 22 <00020087ffef04e20565000f001c000001321615140a010423222635341a
012401102322060a011510333236120350c1d16ac9fefe8dc9d065bf0109
0170df6cbb8d4ee189e5920565e0d49bfe7dfee589e0d096017a012195fe
7601329afee2feaa83fecbfc01c7>RVWWHN+CambriaMath AddT42Char 
RVWWHN+CambriaMath /CharStrings get begin
/g15 15 def
/g22 22 def
end
RVWWHN+CambriaMath /Encoding get
dup 77 /g15 put
dup 85 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RVWWHN+CambriaMath*1 [34{/.notdef}rp /g43 /g40 3{/.notdef}rp /g46 /g30 /g41 /g34 7{/.notdef}rp /g16 /g42 /g49 7{/.notdef}rp /g25 /g48 /g47 /g38 /.notdef /g32 /g36 /g33 /.notdef /g35 /g45 5{/.notdef}rp /g14 /g15 /g37 6{/.notdef}rp /g22 4{/.notdef}rp /g5 /g6 /g31 /g26 162{/.notdef}rp]RVWWHN+CambriaMath nfRVWWHN+CambriaMath*1 [12 0 0 -12 0 0 ]msf21.6971 252.087 mo(U)sh801.538 252.087 mo(M)sh214.288 194.004 mo
234.8 194.004 li
234.8 195.504 li
214.288 195.504 li
cp
233.8 191.754 mo
239.8 194.754 li
233.8 197.754 li
cp
.697566 .635523 .625452 .606073 cmyk
f
555.674 194.004 mo
576.186 194.004 li
576.186 195.504 li
555.674 195.504 li
cp
575.186 191.754 mo
581.186 194.754 li
575.186 197.754 li
cp
f
608.796 194.004 mo
629.308 194.004 li
629.308 195.504 li
608.796 195.504 li
cp
628.308 191.754 mo
634.308 194.754 li
628.308 197.754 li
cp
f
321.749 194.525 mo
342.261 194.526 li
342.261 196.026 li
321.749 196.025 li
cp
341.261 192.276 mo
347.261 195.276 li
341.261 198.276 li
cp
f
375.628 194.525 mo
396.14 194.526 li
396.14 196.026 li
375.628 196.025 li
cp
395.14 192.276 mo
401.14 195.276 li
395.14 198.276 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/RVWWHN+CambriaMath*1 uf/RVWWHN+CambriaMath uf/KAAAAA+CambriaMath uf/RVWWHM+TimesNewRomanPSMT*1 uf/RVWWHM+TimesNewRomanPSMT uf/MAAAAA+TimesNewRomanPSMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
